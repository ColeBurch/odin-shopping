/*! For license information please see index.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkodin_shopping=self.webpackChunkodin_shopping||[]).push([[826],{383:(e,n,t)=>{t.d(n,{Z:()=>v});var r=t(537),a=t.n(r),l=t(645),o=t.n(l),i=t(667),u=t.n(i),s=new URL(t(909),t.b),c=new URL(t(133),t.b),d=new URL(t(601),t.b),A=new URL(t(686),t.b),f=o()(a()),p=u()(s),m=u()(c),h=u()(d),g=u()(A);f.push([e.id,`/*\n! tailwindcss v3.3.2 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #e5e7eb; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: '';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured \`sans\` font-family by default.\n5. Use the user's configured \`sans\` font-feature-settings by default.\n6. Use the user's configured \`sans\` font-variation-settings by default.\n*/\n\nhtml {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, sans-serif, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 4 */\n  font-feature-settings: normal; /* 5 */\n  font-variation-settings: normal; /* 6 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from \`html\` so users can set them as a class directly on the \`html\` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  text-decoration: underline;\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user's configured \`mono\` font family by default.\n2. Correct the odd \`em\` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent \`sub\` and \`sup\` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  font-weight: inherit; /* 1 */\n  line-height: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional \`:invalid\` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to \`inherit\` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role="button"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements \`display: block\` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add \`vertical-align: middle\` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n[hidden] {\n  display: none;\n}\n\n[type='text'],[type='email'],[type='url'],[type='password'],[type='number'],[type='date'],[type='datetime-local'],[type='month'],[type='search'],[type='tel'],[type='time'],[type='week'],[multiple],textarea,select {\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  background-color: #fff;\n  border-color: #6b7280;\n  border-width: 1px;\n  border-radius: 0px;\n  padding-top: 0.5rem;\n  padding-right: 0.75rem;\n  padding-bottom: 0.5rem;\n  padding-left: 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5rem;\n  --tw-shadow: 0 0 rgba(0,0,0,0);\n}\n\n[type='text']:focus, [type='email']:focus, [type='url']:focus, [type='password']:focus, [type='number']:focus, [type='date']:focus, [type='datetime-local']:focus, [type='month']:focus, [type='search']:focus, [type='tel']:focus, [type='time']:focus, [type='week']:focus, [multiple]:focus, textarea:focus, select:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  --tw-ring-inset: var(--tw-empty,/*!*/ /*!*/);\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: #2563eb;\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: /*!*/ /*!*/ 0 0 0 0px #fff, /*!*/ /*!*/ 0 0 0 calc(1px + 0px) #2563eb, var(--tw-shadow);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n  border-color: #2563eb;\n}\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  color: #6b7280;\n  opacity: 1;\n}\n\ninput::placeholder,textarea::placeholder {\n  color: #6b7280;\n  opacity: 1;\n}\n\n::-webkit-datetime-edit-fields-wrapper {\n  padding: 0;\n}\n\n::-webkit-date-and-time-value {\n  min-height: 1.5em;\n}\n\n::-webkit-datetime-edit,::-webkit-datetime-edit-year-field,::-webkit-datetime-edit-month-field,::-webkit-datetime-edit-day-field,::-webkit-datetime-edit-hour-field,::-webkit-datetime-edit-minute-field,::-webkit-datetime-edit-second-field,::-webkit-datetime-edit-millisecond-field,::-webkit-datetime-edit-meridiem-field {\n  padding-top: 0;\n  padding-bottom: 0;\n}\n\nselect {\n  background-image: url(${p});\n  background-position: right 0.5rem center;\n  background-repeat: no-repeat;\n  background-size: 1.5em 1.5em;\n  padding-right: 2.5rem;\n  -webkit-print-color-adjust: exact;\n          print-color-adjust: exact;\n}\n\n[multiple] {\n  background-image: none;\n  background-image: initial;\n  background-position: 0 0;\n  background-position: initial;\n  background-repeat: repeat;\n  background-repeat: initial;\n  background-size: auto auto;\n  background-size: initial;\n  padding-right: 0.75rem;\n  -webkit-print-color-adjust: inherit;\n          print-color-adjust: inherit;\n}\n\n[type='checkbox'],[type='radio'] {\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  padding: 0;\n  -webkit-print-color-adjust: exact;\n          print-color-adjust: exact;\n  display: inline-block;\n  vertical-align: middle;\n  background-origin: border-box;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  flex-shrink: 0;\n  height: 1rem;\n  width: 1rem;\n  color: #2563eb;\n  background-color: #fff;\n  border-color: #6b7280;\n  border-width: 1px;\n  --tw-shadow: 0 0 rgba(0,0,0,0);\n}\n\n[type='checkbox'] {\n  border-radius: 0px;\n}\n\n[type='radio'] {\n  border-radius: 100%;\n}\n\n[type='checkbox']:focus,[type='radio']:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  --tw-ring-inset: var(--tw-empty,/*!*/ /*!*/);\n  --tw-ring-offset-width: 2px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: #2563eb;\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: /*!*/ /*!*/ 0 0 0 2px #fff, /*!*/ /*!*/ 0 0 0 calc(2px + 2px) #2563eb, var(--tw-shadow);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n}\n\n[type='checkbox']:checked,[type='radio']:checked {\n  border-color: transparent;\n  background-color: currentColor;\n  background-size: 100% 100%;\n  background-position: center;\n  background-repeat: no-repeat;\n}\n\n[type='checkbox']:checked {\n  background-image: url(${m});\n}\n\n[type='radio']:checked {\n  background-image: url(${h});\n}\n\n[type='checkbox']:checked:hover,[type='checkbox']:checked:focus,[type='radio']:checked:hover,[type='radio']:checked:focus {\n  border-color: transparent;\n  background-color: currentColor;\n}\n\n[type='checkbox']:indeterminate {\n  background-image: url(${g});\n  border-color: transparent;\n  background-color: currentColor;\n  background-size: 100% 100%;\n  background-position: center;\n  background-repeat: no-repeat;\n}\n\n[type='checkbox']:indeterminate:hover,[type='checkbox']:indeterminate:focus {\n  border-color: transparent;\n  background-color: currentColor;\n}\n\n[type='file'] {\n  background: transparent none repeat 0 0 / auto auto padding-box border-box scroll;\n  background: initial;\n  border-color: inherit;\n  border-width: 0;\n  border-radius: 0;\n  padding: 0;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n[type='file']:focus {\n  outline: 1px solid ButtonText;\n  outline: 1px auto -webkit-focus-ring-color;\n}\n\n*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position:  ;\n  --tw-gradient-via-position:  ;\n  --tw-gradient-to-position:  ;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgba(59, 130, 246, 0.5);\n  --tw-ring-offset-shadow: 0 0 rgba(0,0,0,0);\n  --tw-ring-shadow: 0 0 rgba(0,0,0,0);\n  --tw-shadow: 0 0 rgba(0,0,0,0);\n  --tw-shadow-colored: 0 0 rgba(0,0,0,0);\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position:  ;\n  --tw-gradient-via-position:  ;\n  --tw-gradient-to-position:  ;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgba(59, 130, 246, 0.5);\n  --tw-ring-offset-shadow: 0 0 rgba(0,0,0,0);\n  --tw-ring-shadow: 0 0 rgba(0,0,0,0);\n  --tw-shadow: 0 0 rgba(0,0,0,0);\n  --tw-shadow-colored: 0 0 rgba(0,0,0,0);\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n.container {\n  width: 100%;\n}\n@media (min-width: 640px) {\n\n  .container {\n    max-width: 640px;\n  }\n}\n@media (min-width: 768px) {\n\n  .container {\n    max-width: 768px;\n  }\n}\n@media (min-width: 1024px) {\n\n  .container {\n    max-width: 1024px;\n  }\n}\n@media (min-width: 1280px) {\n\n  .container {\n    max-width: 1280px;\n  }\n}\n@media (min-width: 1536px) {\n\n  .container {\n    max-width: 1536px;\n  }\n}\n.aspect-h-1 {\n  --tw-aspect-h: 1;\n}\n.aspect-w-1 {\n  position: relative;\n  padding-bottom: calc(var(--tw-aspect-h) / 1 * 100%);\n  padding-bottom: calc(var(--tw-aspect-h) / var(--tw-aspect-w) * 100%);\n  --tw-aspect-w: 1;\n}\n.aspect-w-1 > * {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n.pointer-events-none {\n  pointer-events: none;\n}\n.fixed {\n  position: fixed;\n}\n.absolute {\n  position: absolute;\n}\n.relative {\n  position: relative;\n}\n.inset-0 {\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n}\n.inset-y-0 {\n  top: 0px;\n  bottom: 0px;\n}\n.-left-8 {\n  left: -2rem;\n}\n.right-0 {\n  right: 0px;\n}\n.top-full {\n  top: 100%;\n}\n.z-10 {\n  z-index: 10;\n}\n.-m-1 {\n  margin: -0.25rem;\n}\n.-m-1\\.5 {\n  margin: -0.375rem;\n}\n.-m-2 {\n  margin: -0.5rem;\n}\n.-m-2\\.5 {\n  margin: -0.625rem;\n}\n.-mx-3 {\n  margin-left: -0.75rem;\n  margin-right: -0.75rem;\n}\n.-my-6 {\n  margin-top: -1.5rem;\n  margin-bottom: -1.5rem;\n}\n.mx-2 {\n  margin-left: 0.5rem;\n  margin-right: 0.5rem;\n}\n.mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n.my-4 {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n.mt-1 {\n  margin-top: 0.25rem;\n}\n.mt-10 {\n  margin-top: 2.5rem;\n}\n.mt-2 {\n  margin-top: 0.5rem;\n}\n.mt-3 {\n  margin-top: 0.75rem;\n}\n.mt-4 {\n  margin-top: 1rem;\n}\n.mt-6 {\n  margin-top: 1.5rem;\n}\n.block {\n  display: block;\n}\n.inline-block {\n  display: inline-block;\n}\n.flex {\n  display: flex;\n}\n.inline-flex {\n  display: inline-flex;\n}\n.flow-root {\n  display: flow-root;\n}\n.grid {\n  display: grid;\n}\n.hidden {\n  display: none;\n}\n.h-11 {\n  height: 2.75rem;\n}\n.h-5 {\n  height: 1.25rem;\n}\n.h-6 {\n  height: 1.5rem;\n}\n.h-64 {\n  height: 16rem;\n}\n.h-7 {\n  height: 1.75rem;\n}\n.h-8 {\n  height: 2rem;\n}\n.h-full {\n  height: 100%;\n}\n.min-h-full {\n  min-height: 100%;\n}\n.min-h-screen {\n  min-height: 100vh;\n}\n.w-11 {\n  width: 2.75rem;\n}\n.w-44 {\n  width: 11rem;\n}\n.w-5 {\n  width: 1.25rem;\n}\n.w-6 {\n  width: 1.5rem;\n}\n.w-auto {\n  width: auto;\n}\n.w-full {\n  width: 100%;\n}\n.w-screen {\n  width: 100vw;\n}\n.min-w-full {\n  min-width: 100%;\n}\n.max-w-2xl {\n  max-width: 42rem;\n}\n.max-w-7xl {\n  max-width: 80rem;\n}\n.max-w-md {\n  max-width: 28rem;\n}\n.flex-auto {\n  flex: 1 1 auto;\n}\n.flex-none {\n  flex: none;\n}\n.flex-shrink-0 {\n  flex-shrink: 0;\n}\n.flex-grow {\n  flex-grow: 1;\n}\n.translate-y-0 {\n  --tw-translate-y: 0px;\n  transform: translate(var(--tw-translate-x), 0px) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.translate-y-1 {\n  --tw-translate-y: 0.25rem;\n  transform: translate(var(--tw-translate-x), 0.25rem) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.rotate-180 {\n  --tw-rotate: 180deg;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(180deg) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.transform {\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.grid-cols-1 {\n  grid-template-columns: repeat(1, minmax(0, 1fr));\n}\n.grid-cols-2 {\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n}\n.flex-col {\n  flex-direction: column;\n}\n.items-center {\n  align-items: center;\n}\n.justify-center {\n  justify-content: center;\n}\n.justify-between {\n  justify-content: space-between;\n}\n.gap-x-1 {\n  -moz-column-gap: 0.25rem;\n       column-gap: 0.25rem;\n}\n.gap-x-2 {\n  -moz-column-gap: 0.5rem;\n       column-gap: 0.5rem;\n}\n.gap-x-2\\.5 {\n  -moz-column-gap: 0.625rem;\n       column-gap: 0.625rem;\n}\n.gap-x-6 {\n  -moz-column-gap: 1.5rem;\n       column-gap: 1.5rem;\n}\n.gap-y-10 {\n  row-gap: 2.5rem;\n}\n.gap-y-6 {\n  row-gap: 1.5rem;\n}\n.space-x-6 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(1.5rem * 0);\n  margin-right: calc(1.5rem * var(--tw-space-x-reverse));\n  margin-left: calc(1.5rem * (1 - 0));\n  margin-left: calc(1.5rem * (1 - var(--tw-space-x-reverse)));\n  margin-left: calc(1.5rem * calc(1 - 0));\n  margin-left: calc(1.5rem * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-y-2 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(0.5rem * (1 - 0));\n  margin-top: calc(0.5rem * (1 - var(--tw-space-y-reverse)));\n  margin-top: calc(0.5rem * calc(1 - 0));\n  margin-top: calc(0.5rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(0.5rem * 0);\n  margin-bottom: calc(0.5rem * var(--tw-space-y-reverse));\n}\n.divide-x > :not([hidden]) ~ :not([hidden]) {\n  --tw-divide-x-reverse: 0;\n  border-right-width: calc(1px * 0);\n  border-right-width: calc(1px * var(--tw-divide-x-reverse));\n  border-left-width: calc(1px * (1 - 0));\n  border-left-width: calc(1px * (1 - var(--tw-divide-x-reverse)));\n  border-left-width: calc(1px * calc(1 - 0));\n  border-left-width: calc(1px * calc(1 - var(--tw-divide-x-reverse)));\n}\n.divide-y > :not([hidden]) ~ :not([hidden]) {\n  --tw-divide-y-reverse: 0;\n  border-top-width: calc(1px * (1 - 0));\n  border-top-width: calc(1px * (1 - var(--tw-divide-y-reverse)));\n  border-top-width: calc(1px * calc(1 - 0));\n  border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));\n  border-bottom-width: calc(1px * 0);\n  border-bottom-width: calc(1px * var(--tw-divide-y-reverse));\n}\n.divide-gray-500\\/10 > :not([hidden]) ~ :not([hidden]) {\n  border-color: rgba(107, 114, 128, 0.1);\n}\n.divide-gray-900\\/5 > :not([hidden]) ~ :not([hidden]) {\n  border-color: rgba(17, 24, 39, 0.05);\n}\n.overflow-hidden {\n  overflow: hidden;\n}\n.overflow-y-auto {\n  overflow-y: auto;\n}\n.rounded-3xl {\n  border-radius: 1.5rem;\n}\n.rounded-lg {\n  border-radius: 0.5rem;\n}\n.rounded-md {\n  border-radius: 0.375rem;\n}\n.border {\n  border-width: 1px;\n}\n.border-transparent {\n  border-color: transparent;\n}\n.bg-gray-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(243, 244, 246, 1);\n  background-color: rgba(243, 244, 246, var(--tw-bg-opacity));\n}\n.bg-gray-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(229, 231, 235, 1);\n  background-color: rgba(229, 231, 235, var(--tw-bg-opacity));\n}\n.bg-gray-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(249, 250, 251, 1);\n  background-color: rgba(249, 250, 251, var(--tw-bg-opacity));\n}\n.bg-indigo-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgba(79, 70, 229, 1);\n  background-color: rgba(79, 70, 229, var(--tw-bg-opacity));\n}\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgba(255, 255, 255, 1);\n  background-color: rgba(255, 255, 255, var(--tw-bg-opacity));\n}\n.object-cover {\n  -o-object-fit: cover;\n     object-fit: cover;\n}\n.object-center {\n  -o-object-position: center;\n     object-position: center;\n}\n.p-1 {\n  padding: 0.25rem;\n}\n.p-1\\.5 {\n  padding: 0.375rem;\n}\n.p-2 {\n  padding: 0.5rem;\n}\n.p-2\\.5 {\n  padding: 0.625rem;\n}\n.p-3 {\n  padding: 0.75rem;\n}\n.p-4 {\n  padding: 1rem;\n}\n.p-6 {\n  padding: 1.5rem;\n}\n.px-3 {\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n.px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n.px-6 {\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n}\n.px-8 {\n  padding-left: 2rem;\n  padding-right: 2rem;\n}\n.py-16 {\n  padding-top: 4rem;\n  padding-bottom: 4rem;\n}\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n.py-2\\.5 {\n  padding-top: 0.625rem;\n  padding-bottom: 0.625rem;\n}\n.py-3 {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n}\n.py-6 {\n  padding-top: 1.5rem;\n  padding-bottom: 1.5rem;\n}\n.pb-80 {\n  padding-bottom: 20rem;\n}\n.pl-3 {\n  padding-left: 0.75rem;\n}\n.pl-6 {\n  padding-left: 1.5rem;\n}\n.pr-3 {\n  padding-right: 0.75rem;\n}\n.pr-3\\.5 {\n  padding-right: 0.875rem;\n}\n.pt-16 {\n  padding-top: 4rem;\n}\n.text-center {\n  text-align: center;\n}\n.font-sans {\n  font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, sans-serif, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n}\n.text-2xl {\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\n.text-4xl {\n  font-size: 2.25rem;\n  line-height: 2.5rem;\n}\n.text-base {\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.text-xl {\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n}\n.font-bold {\n  font-weight: 700;\n}\n.font-medium {\n  font-weight: 500;\n}\n.font-semibold {\n  font-weight: 600;\n}\n.leading-6 {\n  line-height: 1.5rem;\n}\n.leading-7 {\n  line-height: 1.75rem;\n}\n.tracking-tight {\n  letter-spacing: -0.025em;\n}\n.text-gray-400 {\n  --tw-text-opacity: 1;\n  color: rgba(156, 163, 175, 1);\n  color: rgba(156, 163, 175, var(--tw-text-opacity));\n}\n.text-gray-500 {\n  --tw-text-opacity: 1;\n  color: rgba(107, 114, 128, 1);\n  color: rgba(107, 114, 128, var(--tw-text-opacity));\n}\n.text-gray-600 {\n  --tw-text-opacity: 1;\n  color: rgba(75, 85, 99, 1);\n  color: rgba(75, 85, 99, var(--tw-text-opacity));\n}\n.text-gray-700 {\n  --tw-text-opacity: 1;\n  color: rgba(55, 65, 81, 1);\n  color: rgba(55, 65, 81, var(--tw-text-opacity));\n}\n.text-gray-900 {\n  --tw-text-opacity: 1;\n  color: rgba(17, 24, 39, 1);\n  color: rgba(17, 24, 39, var(--tw-text-opacity));\n}\n.text-slate-600 {\n  --tw-text-opacity: 1;\n  color: rgba(71, 85, 105, 1);\n  color: rgba(71, 85, 105, var(--tw-text-opacity));\n}\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgba(255, 255, 255, 1);\n  color: rgba(255, 255, 255, var(--tw-text-opacity));\n}\n.antialiased {\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.opacity-0 {\n  opacity: 0;\n}\n.opacity-100 {\n  opacity: 1;\n}\n.shadow-lg {\n  --tw-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\n  box-shadow: 0 0 rgba(0,0,0,0), 0 0 rgba(0,0,0,0), 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 rgba(0,0,0,0)), var(--tw-ring-shadow, 0 0 rgba(0,0,0,0)), var(--tw-shadow);\n}\n.ring-1 {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color), var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color), 0 0 rgba(0,0,0,0);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 rgba(0,0,0,0));\n}\n.ring-gray-900\\/5 {\n  --tw-ring-color: rgba(17, 24, 39, 0.05);\n}\n.filter {\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n.transition {\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.duration-150 {\n  transition-duration: 150ms;\n}\n.duration-200 {\n  transition-duration: 200ms;\n}\n.ease-in {\n  transition-timing-function: cubic-bezier(0.4, 0, 1, 1);\n}\n.ease-out {\n  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);\n}\n@media (min-width: 1024px) {\n\n  .lg\\:aspect-none {\n    position: static;\n    padding-bottom: 0;\n  }\n\n  .lg\\:aspect-none > * {\n    position: static;\n    height: auto;\n    width: auto;\n    top: auto;\n    right: auto;\n    bottom: auto;\n    left: auto;\n  }\n}\n.hover\\:bg-gray-100:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(243, 244, 246, 1);\n  background-color: rgba(243, 244, 246, var(--tw-bg-opacity));\n}\n.hover\\:bg-gray-50:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(249, 250, 251, 1);\n  background-color: rgba(249, 250, 251, var(--tw-bg-opacity));\n}\n.hover\\:bg-indigo-700:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgba(67, 56, 202, 1);\n  background-color: rgba(67, 56, 202, var(--tw-bg-opacity));\n}\n.group:hover .group-hover\\:bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgba(255, 255, 255, 1);\n  background-color: rgba(255, 255, 255, var(--tw-bg-opacity));\n}\n.group:hover .group-hover\\:opacity-75 {\n  opacity: 0.75;\n}\n@media (min-width: 640px) {\n\n  .sm\\:static {\n    position: static;\n  }\n\n  .sm\\:left-1\\/2 {\n    left: 50%;\n  }\n\n  .sm\\:top-0 {\n    top: 0px;\n  }\n\n  .sm\\:max-w-lg {\n    max-width: 32rem;\n  }\n\n  .sm\\:max-w-sm {\n    max-width: 24rem;\n  }\n\n  .sm\\:translate-x-8 {\n    --tw-translate-x: 2rem;\n    transform: translate(2rem, var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  }\n\n  .sm\\:grid-cols-2 {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n\n  .sm\\:px-6 {\n    padding-left: 1.5rem;\n    padding-right: 1.5rem;\n  }\n\n  .sm\\:py-24 {\n    padding-top: 6rem;\n    padding-bottom: 6rem;\n  }\n\n  .sm\\:pb-40 {\n    padding-bottom: 10rem;\n  }\n\n  .sm\\:pt-24 {\n    padding-top: 6rem;\n  }\n\n  .sm\\:text-6xl {\n    font-size: 3.75rem;\n    line-height: 1;\n  }\n\n  .sm\\:opacity-0 {\n    opacity: 0;\n  }\n\n  .sm\\:ring-1 {\n    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n    box-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color), var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color), 0 0 rgba(0,0,0,0);\n    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 rgba(0,0,0,0));\n  }\n\n  .sm\\:ring-gray-900\\/10 {\n    --tw-ring-color: rgba(17, 24, 39, 0.1);\n  }\n}\n@media (min-width: 1024px) {\n\n  .lg\\:absolute {\n    position: absolute;\n  }\n\n  .lg\\:inset-y-0 {\n    top: 0px;\n    bottom: 0px;\n  }\n\n  .lg\\:left-1\\/2 {\n    left: 50%;\n  }\n\n  .lg\\:top-1\\/2 {\n    top: 50%;\n  }\n\n  .lg\\:mx-auto {\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .lg\\:flex {\n    display: flex;\n  }\n\n  .lg\\:hidden {\n    display: none;\n  }\n\n  .lg\\:h-80 {\n    height: 20rem;\n  }\n\n  .lg\\:h-full {\n    height: 100%;\n  }\n\n  .lg\\:w-full {\n    width: 100%;\n  }\n\n  .lg\\:max-w-7xl {\n    max-width: 80rem;\n  }\n\n  .lg\\:flex-1 {\n    flex: 1 1 0%;\n  }\n\n  .lg\\:-translate-y-1\\/2 {\n    --tw-translate-y: -50%;\n    transform: translate(var(--tw-translate-x), -50%) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  }\n\n  .lg\\:translate-x-8 {\n    --tw-translate-x: 2rem;\n    transform: translate(2rem, var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  }\n\n  .lg\\:grid-cols-4 {\n    grid-template-columns: repeat(4, minmax(0, 1fr));\n  }\n\n  .lg\\:justify-end {\n    justify-content: flex-end;\n  }\n\n  .lg\\:gap-x-12 {\n    -moz-column-gap: 3rem;\n         column-gap: 3rem;\n  }\n\n  .lg\\:gap-y-8 {\n    row-gap: 2rem;\n  }\n\n  .lg\\:space-x-8 > :not([hidden]) ~ :not([hidden]) {\n    --tw-space-x-reverse: 0;\n    margin-right: calc(2rem * 0);\n    margin-right: calc(2rem * var(--tw-space-x-reverse));\n    margin-left: calc(2rem * (1 - 0));\n    margin-left: calc(2rem * (1 - var(--tw-space-x-reverse)));\n    margin-left: calc(2rem * calc(1 - 0));\n    margin-left: calc(2rem * calc(1 - var(--tw-space-x-reverse)));\n  }\n\n  .lg\\:px-8 {\n    padding-left: 2rem;\n    padding-right: 2rem;\n  }\n\n  .lg\\:pb-48 {\n    padding-bottom: 12rem;\n  }\n\n  .lg\\:pt-40 {\n    padding-top: 10rem;\n  }\n\n  .lg\\:opacity-100 {\n    opacity: 1;\n  }\n}\n@media (min-width: 1280px) {\n\n  .xl\\:gap-x-8 {\n    -moz-column-gap: 2rem;\n         column-gap: 2rem;\n  }\n}\n`,"",{version:3,sources:["webpack://./src/index.css","<no source>"],names:[],mappings:"AAAA;;CAAc,CAAd;;;CAAc;;AAAd;;;EAAA,sBAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,mBAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;EAAA,gBAAc;AAAA;;AAAd;;;;;;;CAAc;;AAAd;EAAA,gBAAc,EAAd,MAAc;EAAd,8BAAc,EAAd,MAAc;EAAd,gBAAc,EAAd,MAAc;EAAd,cAAc;KAAd,WAAc,EAAd,MAAc;EAAd,wRAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,+BAAc,EAAd,MAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,0BAAc;EAAd,yCAAc;UAAd,iCAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;EAAA,kBAAc;EAAd,oBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;EAAd,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,mBAAc;AAAA;;AAAd;;;CAAc;;AAAd;;;;EAAA,+GAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,cAAc;EAAd,cAAc;EAAd,kBAAc;EAAd,wBAAc;AAAA;;AAAd;EAAA,eAAc;AAAA;;AAAd;EAAA,WAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;EAAd,yBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;EAAA,oBAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,SAAc,EAAd,MAAc;EAAd,UAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,oBAAc;AAAA;;AAAd;;;CAAc;;AAAd;;;;EAAA,0BAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,aAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,YAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,6BAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,0BAAc,EAAd,MAAc;EAAd,aAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,kBAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;;;;;;;;EAAA,SAAc;AAAA;;AAAd;EAAA,SAAc;EAAd,UAAc;AAAA;;AAAd;EAAA,UAAc;AAAA;;AAAd;;;EAAA,gBAAc;EAAd,SAAc;EAAd,UAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,UAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;EAAA,UAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;AAAA;;AAAd;;CAAc;AAAd;EAAA,eAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;;;;EAAA,cAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;EAAd,YAAc;AAAA;;AAAd,wEAAc;AAAd;EAAA,aAAc;AAAA;;AAAd;EAAA,wBAAc;KAAd,qBAAc;UAAd,gBAAc;EAAd,sBAAc;EAAd,qBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,mBAAc;EAAd,sBAAc;EAAd,sBAAc;EAAd,qBAAc;EAAd,eAAc;EAAd,mBAAc;EAAd,8BAAc;AAAA;;AAAd;EAAA,8BAAc;EAAd,mBAAc;EAAd,4CAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,wBAAc;EAAd,2GAAc;EAAd,yGAAc;EAAd,mGAAc;EAAd,iFAAc;EAAd;AAAc;;AAAd;EAAA,cAAc;EAAd;AAAc;;AAAd;EAAA,cAAc;EAAd;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA,cAAc;EAAd;AAAc;;AAAd;EAAA,yDAAc;EAAd,wCAAc;EAAd,4BAAc;EAAd,4BAAc;EAAd,qBAAc;EAAd,iCAAc;UAAd;AAAc;;AAAd;EAAA,sBAAc;EAAd,yBAAc;EAAd,wBAAc;EAAd,4BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,0BAAc;EAAd,wBAAc;EAAd,sBAAc;EAAd,mCAAc;UAAd;AAAc;;AAAd;EAAA,wBAAc;KAAd,qBAAc;UAAd,gBAAc;EAAd,UAAc;EAAd,iCAAc;UAAd,yBAAc;EAAd,qBAAc;EAAd,sBAAc;EAAd,6BAAc;EAAd,yBAAc;KAAd,sBAAc;UAAd,iBAAc;EAAd,cAAc;EAAd,YAAc;EAAd,WAAc;EAAd,cAAc;EAAd,sBAAc;EAAd,qBAAc;EAAd,iBAAc;EAAd;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA,8BAAc;EAAd,mBAAc;EAAd,4CAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,wBAAc;EAAd,2GAAc;EAAd,yGAAc;EAAd,mGAAc;EAAd;AAAc;;AAAd;EAAA,yBAAc;EAAd,8BAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA;AAAc;;AAAd;EAAA,yBAAc;EAAd;AAAc;;AAAd;EAAA,yDAAc;EAAd,yBAAc;EAAd,8BAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd;AAAc;;AAAd;EAAA,yBAAc;EAAd;AAAc;;AAAd;EAAA,iFAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,eAAc;EAAd,gBAAc;EAAd,UAAc;EAAd,kBAAc;EAAd;AAAc;;AAAd;EAAA,6BAAc;EAAd;AAAc;;AAAd;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,8BAAc;EAAd,6BAAc;EAAd,4BAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,wCAAc;EAAd,0CAAc;EAAd,mCAAc;EAAd,8BAAc;EAAd,sCAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd;AAAc;;AAAd;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,8BAAc;EAAd,6BAAc;EAAd,4BAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,wCAAc;EAAd,0CAAc;EAAd,mCAAc;EAAd,8BAAc;EAAd,sCAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd;AAAc;AACd;EAAA;AAAoB;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;;EAAA;IAAA;EAAoB;AAAA;AAApB;EAAA;AAAoB;AAApB;EAAA,kBAAoB;EAApB,mDAAoB;EAApB,oEAAoB;EAApB;AAAoB;AAApB;EAAA,kBAAoB;EAApB,YAAoB;EAApB,WAAoB;EAApB,MAAoB;EAApB,QAAoB;EAApB,SAAoB;EAApB;AAAoB;AACpB;EAAA,kBAAmB;EAAnB,UAAmB;EAAnB,WAAmB;EAAnB,UAAmB;EAAnB,YAAmB;EAAnB,gBAAmB;EAAnB,sBAAmB;EAAnB,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,QAAmB;EAAnB,UAAmB;EAAnB,WAAmB;EAAnB;AAAmB;AAAnB;EAAA,QAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA,gBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB,6KAAmB;EAAnB;AAAmB;AAAnB;EAAA,yBAAmB;EAAnB,iLAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB,qLAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,wBAAmB;OAAnB;AAAmB;AAAnB;EAAA,uBAAmB;OAAnB;AAAmB;AAAnB;EAAA,yBAAmB;OAAnB;AAAmB;AAAnB;EAAA,uBAAmB;OAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,8BAAmB;EAAnB,sDAAmB;EAAnB,mCAAmB;EAAnB,2DAAmB;EAAnB,uCAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,kCAAmB;EAAnB,0DAAmB;EAAnB,sCAAmB;EAAnB,8DAAmB;EAAnB,+BAAmB;EAAnB;AAAmB;AAAnB;EAAA,wBAAmB;EAAnB,iCAAmB;EAAnB,0DAAmB;EAAnB,sCAAmB;EAAnB,+DAAmB;EAAnB,0CAAmB;EAAnB;AAAmB;AAAnB;EAAA,wBAAmB;EAAnB,qCAAmB;EAAnB,8DAAmB;EAAnB,yCAAmB;EAAnB,kEAAmB;EAAnB,kCAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,wCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,wCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,wCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,sCAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB,wCAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;KAAnB;AAAmB;AAAnB;EAAA,0BAAmB;KAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,eAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,6BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,6BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,0BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,0BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,0BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,2BAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB,6BAAmB;EAAnB;AAAmB;AAAnB;EAAA,mCAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,mFAAmB;EAAnB,mGAAmB;EAAnB,wHAAmB;EAAnB;AAAmB;AAAnB;EAAA,2GAAmB;EAAnB,yGAAmB;EAAnB,0MAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,gKAAmB;EAAnB,wJAAmB;EAAnB,iLAAmB;EAAnB,wDAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAFnB;;EAAA;IAAA,iBCAA;IDAA;GCAA;;EDAA;IAAA,iBCAA;IDAA,aCAA;IDAA,YCAA;IDAA,UCAA;IDAA,YCAA;IDAA,aCAA;IDAA;GCAA;CAAA;ADAA;EAAA,mBCAA;EDAA,yCCAA;EDAA;CCAA;ADAA;EAAA,mBCAA;EDAA,yCCAA;EDAA;CCAA;ADAA;EAAA,mBCAA;EDAA,uCCAA;EDAA;CCAA;ADAA;EAAA,mBCAA;EDAA,yCCAA;EDAA;CCAA;ADAA;EAAA;CCAA;ADAA;;EAAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA,uBCAA;IDAA,+KCAA;IDAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA,qBCAA;IDAA;GCAA;;EDAA;IAAA,kBCAA;IDAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA,mBCAA;IDAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA,4GCAA;IDAA,0GCAA;IDAA,2MCAA;IDAA;GCAA;;EDAA;IAAA;GCAA;CAAA;ADAA;;EAAA;IAAA;GCAA;;EDAA;IAAA,SCAA;IDAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA,kBCAA;IDAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA,uBCAA;IDAA,+KCAA;IDAA;GCAA;;EDAA;IAAA,uBCAA;IDAA,+KCAA;IDAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA,sBCAA;SDAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA,wBCAA;IDAA,6BCAA;IDAA,qDCAA;IDAA,kCCAA;IDAA,0DCAA;IDAA,sCCAA;IDAA;GCAA;;EDAA;IAAA,mBCAA;IDAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;;EDAA;IAAA;GCAA;CAAA;ADAA;;EAAA;IAAA,sBCAA;SDAA;GCAA;CAAA",sourcesContent:["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n",null],sourceRoot:""}]);const v=f},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,l){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(o[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&o[c[0]]||(void 0!==l&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=l),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),n.push(c))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),l="/*# ".concat(a," */");return[n].concat([l]).join("\n")}return[n].join("\n")}},448:(e,n,t)=>{var r=t(294),a=t(840);function l(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var o=new Set,i={};function u(e,n){s(e,n),s(e+"Capture",n)}function s(e,n){for(i[e]=n,e=0;e<n.length;e++)o.add(n[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,A=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},p={};function m(e,n,t,r,a,l,o){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=l,this.removeEmptyString=o}var h={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){h[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var n=e[0];h[n]=new m(n,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){h[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){h[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){h[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){h[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){h[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){h[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){h[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,n,t,r){var a=h.hasOwnProperty(n)?h[n]:null;(null!==a?0!==a.type:r||!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,a,r)&&(t=null),r||null===a?function(e){return!!d.call(p,e)||!d.call(f,e)&&(A.test(e)?p[e]=!0:(f[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):a.mustUseProperty?e[a.propertyName]=null===t?3!==a.type&&"":t:(n=a.attributeName,r=a.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(a=a.type)||4===a&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var n=e.replace(g,v);h[n]=new m(n,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var n=e.replace(g,v);h[n]=new m(n,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var n=e.replace(g,v);h[n]=new m(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){h[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),h.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){h[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var y=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),E=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),B=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),C=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),N=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),D=Symbol.for("react.memo"),L=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var I=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var _=Symbol.iterator;function M(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=_&&e[_]||e["@@iterator"])?e:null}var R,z=Object.assign;function F(e){if(void 0===R)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);R=n&&n[1]||""}return"\n"+R+e}var O=!1;function U(e,n){if(!e||O)return"";O=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(n){if(n&&r&&"string"==typeof n.stack){for(var a=n.stack.split("\n"),l=r.stack.split("\n"),o=a.length-1,i=l.length-1;1<=o&&0<=i&&a[o]!==l[i];)i--;for(;1<=o&&0<=i;o--,i--)if(a[o]!==l[i]){if(1!==o||1!==i)do{if(o--,0>--i||a[o]!==l[i]){var u="\n"+a[o].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=o&&0<=i);break}}}finally{O=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:"")?F(e):""}function j(e){switch(e.tag){case 5:return F(e.type);case 16:return F("Lazy");case 13:return F("Suspense");case 19:return F("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case E:return"Portal";case B:return"Profiler";case k:return"StrictMode";case N:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case P:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case D:return null!==(n=e.displayName||null)?n:$(e.type)||"Memo";case L:n=e._payload,e=e._init;try{return $(e(n))}catch(e){}}return null}function H(e){var n=e.type;switch(e.tag){case 24:return"Cache";case 9:return(n.displayName||"Context")+".Consumer";case 10:return(n._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=n.render).displayName||e.name||"",n.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return n;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $(n);case 8:return n===k?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof n)return n.displayName||n.name||null;if("string"==typeof n)return n}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function G(e){e._valueTracker||(e._valueTracker=function(e){var n=V(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var a=t.get,l=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function Y(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=V(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function Q(e,n){var t=n.checked;return z({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function K(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=W(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function X(e,n){null!=(n=n.checked)&&b(e,"checked",n,!1)}function Z(e,n){X(e,n);var t=W(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?ee(e,n.type,t):n.hasOwnProperty("defaultValue")&&ee(e,n.type,W(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function J(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function ee(e,n,t){"number"===n&&q(e.ownerDocument)===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}var ne=Array.isArray;function te(e,n,t,r){if(e=e.options,n){n={};for(var a=0;a<t.length;a++)n["$"+t[a]]=!0;for(t=0;t<e.length;t++)a=n.hasOwnProperty("$"+e[t].value),e[t].selected!==a&&(e[t].selected=a),a&&r&&(e[t].defaultSelected=!0)}else{for(t=""+W(t),n=null,a=0;a<e.length;a++){if(e[a].value===t)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==n||e[a].disabled||(n=e[a])}null!==n&&(n.selected=!0)}}function re(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(l(91));return z({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(l(92));if(ne(t)){if(1<t.length)throw Error(l(93));t=t[0]}n=t}null==n&&(n=""),t=n}e._wrapperState={initialValue:W(t)}}function le(e,n){var t=W(n.value),r=W(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function oe(e){var n=e.textContent;n===e._wrapperState.initialValue&&""!==n&&null!==n&&(e.value=n)}function ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?ie(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var se,ce,de=(ce=function(e,n){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=n;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+n.valueOf().toString()+"</svg>",n=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,n)}))}:ce);function Ae(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function me(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||fe.hasOwnProperty(e)&&fe[e]?(""+n).trim():n+"px"}function he(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),a=me(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,a):e[t]=a}}Object.keys(fe).forEach((function(e){pe.forEach((function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),fe[n]=fe[e]}))}));var ge=z({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,n){if(n){if(ge[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(l(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(l(60));if("object"!=typeof n.dangerouslySetInnerHTML||!("__html"in n.dangerouslySetInnerHTML))throw Error(l(61))}if(null!=n.style&&"object"!=typeof n.style)throw Error(l(62))}}function be(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ye=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,xe=null,ke=null;function Be(e){if(e=ba(e)){if("function"!=typeof Ee)throw Error(l(280));var n=e.stateNode;n&&(n=wa(n),Ee(e.stateNode,e.type,n))}}function Se(e){xe?ke?ke.push(e):ke=[e]:xe=e}function Ce(){if(xe){var e=xe,n=ke;if(ke=xe=null,Be(e),n)for(e=0;e<n.length;e++)Be(n[e])}}function Pe(e,n){return e(n)}function Ne(){}var Te=!1;function De(e,n,t){if(Te)return e(n,t);Te=!0;try{return Pe(e,n,t)}finally{Te=!1,(null!==xe||null!==ke)&&(Ne(),Ce())}}function Le(e,n){var t=e.stateNode;if(null===t)return null;var r=wa(t);if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(l(231,n,typeof t));return t}var Ie=!1;if(c)try{var _e={};Object.defineProperty(_e,"passive",{get:function(){Ie=!0}}),window.addEventListener("test",_e,_e),window.removeEventListener("test",_e,_e)}catch(ce){Ie=!1}function Me(e,n,t,r,a,l,o,i,u){var s=Array.prototype.slice.call(arguments,3);try{n.apply(t,s)}catch(e){this.onError(e)}}var Re=!1,ze=null,Fe=!1,Oe=null,Ue={onError:function(e){Re=!0,ze=e}};function je(e,n,t,r,a,l,o,i,u){Re=!1,ze=null,Me.apply(Ue,arguments)}function $e(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{0!=(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function He(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function We(e){if($e(e)!==e)throw Error(l(188))}function Ve(e){return null!==(e=function(e){var n=e.alternate;if(!n){if(null===(n=$e(e)))throw Error(l(188));return n!==e?null:e}for(var t=e,r=n;;){var a=t.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){t=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===t)return We(a),e;if(o===r)return We(a),n;o=o.sibling}throw Error(l(188))}if(t.return!==r.return)t=a,r=o;else{for(var i=!1,u=a.child;u;){if(u===t){i=!0,t=a,r=o;break}if(u===r){i=!0,r=a,t=o;break}u=u.sibling}if(!i){for(u=o.child;u;){if(u===t){i=!0,t=o,r=a;break}if(u===r){i=!0,r=o,t=a;break}u=u.sibling}if(!i)throw Error(l(189))}}if(t.alternate!==r)throw Error(l(190))}if(3!==t.tag)throw Error(l(188));return t.stateNode.current===t?e:n}(e))?Ge(e):null}function Ge(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var n=Ge(e);if(null!==n)return n;e=e.sibling}return null}var Ye=a.unstable_scheduleCallback,qe=a.unstable_cancelCallback,Qe=a.unstable_shouldYield,Ke=a.unstable_requestPaint,Xe=a.unstable_now,Ze=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,en=a.unstable_UserBlockingPriority,nn=a.unstable_NormalPriority,tn=a.unstable_LowPriority,rn=a.unstable_IdlePriority,an=null,ln=null,on=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(un(e)/sn|0)|0},un=Math.log,sn=Math.LN2,cn=64,dn=4194304;function An(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function fn(e,n){var t=e.pendingLanes;if(0===t)return 0;var r=0,a=e.suspendedLanes,l=e.pingedLanes,o=268435455&t;if(0!==o){var i=o&~a;0!==i?r=An(i):0!=(l&=o)&&(r=An(l))}else 0!=(o=t&~a)?r=An(o):0!==l&&(r=An(l));if(0===r)return 0;if(0!==n&&n!==r&&0==(n&a)&&((a=r&-r)>=(l=n&-n)||16===a&&0!=(4194240&l)))return n;if(0!=(4&r)&&(r|=16&t),0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)a=1<<(t=31-on(n)),r|=e[t],n&=~a;return r}function pn(e,n){switch(e){case 1:case 2:case 4:return n+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function mn(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function hn(){var e=cn;return 0==(4194240&(cn<<=1))&&(cn=64),e}function gn(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function vn(e,n,t){e.pendingLanes|=n,536870912!==n&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[n=31-on(n)]=t}function bn(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-on(t),a=1<<r;a&n|e[r]&n&&(e[r]|=n),t&=~a}}var yn=0;function wn(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var En,xn,kn,Bn,Sn,Cn=!1,Pn=[],Nn=null,Tn=null,Dn=null,Ln=new Map,In=new Map,_n=[],Mn="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Rn(e,n){switch(e){case"focusin":case"focusout":Nn=null;break;case"dragenter":case"dragleave":Tn=null;break;case"mouseover":case"mouseout":Dn=null;break;case"pointerover":case"pointerout":Ln.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":In.delete(n.pointerId)}}function zn(e,n,t,r,a,l){return null===e||e.nativeEvent!==l?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:l,targetContainers:[a]},null!==n&&null!==(n=ba(n))&&xn(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==a&&-1===n.indexOf(a)&&n.push(a),e)}function Fn(e){var n=va(e.target);if(null!==n){var t=$e(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=He(t)))return e.blockedOn=n,void Sn(e.priority,(function(){kn(t)}))}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function On(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Kn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=ba(t))&&xn(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);ye=r,t.target.dispatchEvent(r),ye=null,n.shift()}return!0}function Un(e,n,t){On(e)&&t.delete(n)}function jn(){Cn=!1,null!==Nn&&On(Nn)&&(Nn=null),null!==Tn&&On(Tn)&&(Tn=null),null!==Dn&&On(Dn)&&(Dn=null),Ln.forEach(Un),In.forEach(Un)}function $n(e,n){e.blockedOn===n&&(e.blockedOn=null,Cn||(Cn=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,jn)))}function Hn(e){function n(n){return $n(n,e)}if(0<Pn.length){$n(Pn[0],e);for(var t=1;t<Pn.length;t++){var r=Pn[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Nn&&$n(Nn,e),null!==Tn&&$n(Tn,e),null!==Dn&&$n(Dn,e),Ln.forEach(n),In.forEach(n),t=0;t<_n.length;t++)(r=_n[t]).blockedOn===e&&(r.blockedOn=null);for(;0<_n.length&&null===(t=_n[0]).blockedOn;)Fn(t),null===t.blockedOn&&_n.shift()}var Wn=y.ReactCurrentBatchConfig,Vn=!0;function Gn(e,n,t,r){var a=yn,l=Wn.transition;Wn.transition=null;try{yn=1,qn(e,n,t,r)}finally{yn=a,Wn.transition=l}}function Yn(e,n,t,r){var a=yn,l=Wn.transition;Wn.transition=null;try{yn=4,qn(e,n,t,r)}finally{yn=a,Wn.transition=l}}function qn(e,n,t,r){if(Vn){var a=Kn(e,n,t,r);if(null===a)Wr(e,n,r,Qn,t),Rn(e,r);else if(function(e,n,t,r,a){switch(n){case"focusin":return Nn=zn(Nn,e,n,t,r,a),!0;case"dragenter":return Tn=zn(Tn,e,n,t,r,a),!0;case"mouseover":return Dn=zn(Dn,e,n,t,r,a),!0;case"pointerover":var l=a.pointerId;return Ln.set(l,zn(Ln.get(l)||null,e,n,t,r,a)),!0;case"gotpointercapture":return l=a.pointerId,In.set(l,zn(In.get(l)||null,e,n,t,r,a)),!0}return!1}(a,e,n,t,r))r.stopPropagation();else if(Rn(e,r),4&n&&-1<Mn.indexOf(e)){for(;null!==a;){var l=ba(a);if(null!==l&&En(l),null===(l=Kn(e,n,t,r))&&Wr(e,n,r,Qn,t),l===a)break;a=l}null!==a&&r.stopPropagation()}else Wr(e,n,r,null,t)}}var Qn=null;function Kn(e,n,t,r){if(Qn=null,null!==(e=va(e=we(r))))if(null===(n=$e(e)))e=null;else if(13===(t=n.tag)){if(null!==(e=He(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null);return Qn=e,null}function Xn(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case en:return 4;case nn:case tn:return 16;case rn:return 536870912;default:return 16}default:return 16}}var Zn=null,Jn=null,et=null;function nt(){if(et)return et;var e,n,t=Jn,r=t.length,a="value"in Zn?Zn.value:Zn.textContent,l=a.length;for(e=0;e<r&&t[e]===a[e];e++);var o=r-e;for(n=1;n<=o&&t[r-n]===a[l-n];n++);return et=a.slice(e,1<n?1-n:void 0)}function tt(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function rt(){return!0}function at(){return!1}function lt(e){function n(n,t,r,a,l){for(var o in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=a,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(o)&&(n=e[o],this[o]=n?n(a):a[o]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?rt:at,this.isPropagationStopped=at,this}return z(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rt)},persist:function(){},isPersistent:rt}),n}var ot,it,ut,st={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ct=lt(st),dt=z({},st,{view:0,detail:0}),At=lt(dt),ft=z({},dt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Bt,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ut&&(ut&&"mousemove"===e.type?(ot=e.screenX-ut.screenX,it=e.screenY-ut.screenY):it=ot=0,ut=e),ot)},movementY:function(e){return"movementY"in e?e.movementY:it}}),pt=lt(ft),mt=lt(z({},ft,{dataTransfer:0})),ht=lt(z({},dt,{relatedTarget:0})),gt=lt(z({},st,{animationName:0,elapsedTime:0,pseudoElement:0})),vt=z({},st,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bt=lt(vt),yt=lt(z({},st,{data:0})),wt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Et={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kt(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=xt[e])&&!!n[e]}function Bt(){return kt}var St=z({},dt,{key:function(e){if(e.key){var n=wt[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=tt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Et[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Bt,charCode:function(e){return"keypress"===e.type?tt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Ct=lt(St),Pt=lt(z({},ft,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Nt=lt(z({},dt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Bt})),Tt=lt(z({},st,{propertyName:0,elapsedTime:0,pseudoElement:0})),Dt=z({},ft,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Lt=lt(Dt),It=[9,13,27,32],_t=c&&"CompositionEvent"in window,Mt=null;c&&"documentMode"in document&&(Mt=document.documentMode);var Rt=c&&"TextEvent"in window&&!Mt,zt=c&&(!_t||Mt&&8<Mt&&11>=Mt),Ft=String.fromCharCode(32),Ot=!1;function Ut(e,n){switch(e){case"keyup":return-1!==It.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function jt(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $t=!1,Ht={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!Ht[e.type]:"textarea"===n}function Vt(e,n,t,r){Se(r),0<(n=Gr(n,"onChange")).length&&(t=new ct("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Gt=null,Yt=null;function qt(e){Fr(e,0)}function Qt(e){if(Y(ya(e)))return e}function Kt(e,n){if("change"===e)return n}var Xt=!1;if(c){var Zt;if(c){var Jt="oninput"in document;if(!Jt){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jt="function"==typeof er.oninput}Zt=Jt}else Zt=!1;Xt=Zt&&(!document.documentMode||9<document.documentMode)}function nr(){Gt&&(Gt.detachEvent("onpropertychange",tr),Yt=Gt=null)}function tr(e){if("value"===e.propertyName&&Qt(Yt)){var n=[];Vt(n,Yt,e,we(e)),De(qt,n)}}function rr(e,n,t){"focusin"===e?(nr(),Yt=t,(Gt=n).attachEvent("onpropertychange",tr)):"focusout"===e&&nr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qt(Yt)}function lr(e,n){if("click"===e)return Qt(n)}function or(e,n){if("input"===e||"change"===e)return Qt(n)}var ir="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function ur(e,n){if(ir(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var a=t[r];if(!d.call(n,a)||!ir(e[a],n[a]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,n){var t,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function dr(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?dr(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function Ar(){for(var e=window,n=q();n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=q((e=n.contentWindow).document)}return n}function fr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}function pr(e){var n=Ar(),t=e.focusedElem,r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&dr(t.ownerDocument.documentElement,t)){if(null!==r&&fr(t))if(n=r.start,void 0===(e=r.end)&&(e=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(e,t.value.length);else if((e=(n=t.ownerDocument||document)&&n.defaultView||window).getSelection){e=e.getSelection();var a=t.textContent.length,l=Math.min(r.start,a);r=void 0===r.end?l:Math.min(r.end,a),!e.extend&&l>r&&(a=r,r=l,l=a),a=cr(t,l);var o=cr(t,r);a&&o&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==o.node||e.focusOffset!==o.offset)&&((n=n.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),l>r?(e.addRange(n),e.extend(o.node,o.offset)):(n.setEnd(o.node,o.offset),e.addRange(n)))}for(n=[],e=t;e=e.parentNode;)1===e.nodeType&&n.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<n.length;t++)(e=n[t]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,hr=null,gr=null,vr=null,br=!1;function yr(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;br||null==hr||hr!==q(r)||(r="selectionStart"in(r=hr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&ur(vr,r)||(vr=r,0<(r=Gr(gr,"onSelect")).length&&(n=new ct("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=hr)))}function wr(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var Er={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},xr={},kr={};function Br(e){if(xr[e])return xr[e];if(!Er[e])return e;var n,t=Er[e];for(n in t)if(t.hasOwnProperty(n)&&n in kr)return xr[e]=t[n];return e}c&&(kr=document.createElement("div").style,"AnimationEvent"in window||(delete Er.animationend.animation,delete Er.animationiteration.animation,delete Er.animationstart.animation),"TransitionEvent"in window||delete Er.transitionend.transition);var Sr=Br("animationend"),Cr=Br("animationiteration"),Pr=Br("animationstart"),Nr=Br("transitionend"),Tr=new Map,Dr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Lr(e,n){Tr.set(e,n),u(n,[e])}for(var Ir=0;Ir<Dr.length;Ir++){var _r=Dr[Ir];Lr(_r.toLowerCase(),"on"+(_r[0].toUpperCase()+_r.slice(1)))}Lr(Sr,"onAnimationEnd"),Lr(Cr,"onAnimationIteration"),Lr(Pr,"onAnimationStart"),Lr("dblclick","onDoubleClick"),Lr("focusin","onFocus"),Lr("focusout","onBlur"),Lr(Nr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Mr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Rr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Mr));function zr(e,n,t){var r=e.type||"unknown-event";e.currentTarget=t,function(e,n,t,r,a,o,i,u,s){if(je.apply(this,arguments),Re){if(!Re)throw Error(l(198));var c=ze;Re=!1,ze=null,Fe||(Fe=!0,Oe=c)}}(r,n,void 0,e),e.currentTarget=null}function Fr(e,n){n=0!=(4&n);for(var t=0;t<e.length;t++){var r=e[t],a=r.event;r=r.listeners;e:{var l=void 0;if(n)for(var o=r.length-1;0<=o;o--){var i=r[o],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==l&&a.isPropagationStopped())break e;zr(a,i,s),l=u}else for(o=0;o<r.length;o++){if(u=(i=r[o]).instance,s=i.currentTarget,i=i.listener,u!==l&&a.isPropagationStopped())break e;zr(a,i,s),l=u}}}if(Fe)throw e=Oe,Fe=!1,Oe=null,e}function Or(e,n){var t=n[ma];void 0===t&&(t=n[ma]=new Set);var r=e+"__bubble";t.has(r)||(Hr(n,e,2,!1),t.add(r))}function Ur(e,n,t){var r=0;n&&(r|=4),Hr(t,e,r,n)}var jr="_reactListening"+Math.random().toString(36).slice(2);function $r(e){if(!e[jr]){e[jr]=!0,o.forEach((function(n){"selectionchange"!==n&&(Rr.has(n)||Ur(n,!1,e),Ur(n,!0,e))}));var n=9===e.nodeType?e:e.ownerDocument;null===n||n[jr]||(n[jr]=!0,Ur("selectionchange",!1,n))}}function Hr(e,n,t,r){switch(Xn(n)){case 1:var a=Gn;break;case 4:a=Yn;break;default:a=qn}t=a.bind(null,n,t,e),a=void 0,!Ie||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(a=!0),r?void 0!==a?e.addEventListener(n,t,{capture:!0,passive:a}):e.addEventListener(n,t,!0):void 0!==a?e.addEventListener(n,t,{passive:a}):e.addEventListener(n,t,!1)}function Wr(e,n,t,r,a){var l=r;if(0==(1&n)&&0==(2&n)&&null!==r)e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===o)for(o=r.return;null!==o;){var u=o.tag;if((3===u||4===u)&&((u=o.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;o=o.return}for(;null!==i;){if(null===(o=va(i)))return;if(5===(u=o.tag)||6===u){r=l=o;continue e}i=i.parentNode}}r=r.return}De((function(){var r=l,a=we(t),o=[];e:{var i=Tr.get(e);if(void 0!==i){var u=ct,s=e;switch(e){case"keypress":if(0===tt(t))break e;case"keydown":case"keyup":u=Ct;break;case"focusin":s="focus",u=ht;break;case"focusout":s="blur",u=ht;break;case"beforeblur":case"afterblur":u=ht;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=pt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mt;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Nt;break;case Sr:case Cr:case Pr:u=gt;break;case Nr:u=Tt;break;case"scroll":u=At;break;case"wheel":u=Lt;break;case"copy":case"cut":case"paste":u=bt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pt}var c=0!=(4&n),d=!c&&"scroll"===e,A=c?null!==i?i+"Capture":null:i;c=[];for(var f,p=r;null!==p;){var m=(f=p).stateNode;if(5===f.tag&&null!==m&&(f=m,null!==A&&null!=(m=Le(p,A))&&c.push(Vr(p,m,f))),d)break;p=p.return}0<c.length&&(i=new u(i,s,null,t,a),o.push({event:i,listeners:c}))}}if(0==(7&n)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||t===ye||!(s=t.relatedTarget||t.fromElement)||!va(s)&&!s[pa])&&(u||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(s=(s=t.relatedTarget||t.toElement)?va(s):null)&&(s!==(d=$e(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=pt,m="onMouseLeave",A="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pt,m="onPointerLeave",A="onPointerEnter",p="pointer"),d=null==u?i:ya(u),f=null==s?i:ya(s),(i=new c(m,p+"leave",u,t,a)).target=d,i.relatedTarget=f,m=null,va(a)===r&&((c=new c(A,p+"enter",s,t,a)).target=f,c.relatedTarget=d,m=c),d=m,u&&s)e:{for(A=s,p=0,f=c=u;f;f=Yr(f))p++;for(f=0,m=A;m;m=Yr(m))f++;for(;0<p-f;)c=Yr(c),p--;for(;0<f-p;)A=Yr(A),f--;for(;p--;){if(c===A||null!==A&&c===A.alternate)break e;c=Yr(c),A=Yr(A)}c=null}else c=null;null!==u&&qr(o,i,u,c,!1),null!==s&&null!==d&&qr(o,d,s,c,!0)}if("select"===(u=(i=r?ya(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var h=Kt;else if(Wt(i))if(Xt)h=or;else{h=ar;var g=rr}else(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(h=lr);switch(h&&(h=h(e,r))?Vt(o,h,t,a):(g&&g(e,i,r),"focusout"===e&&(g=i._wrapperState)&&g.controlled&&"number"===i.type&&ee(i,"number",i.value)),g=r?ya(r):window,e){case"focusin":(Wt(g)||"true"===g.contentEditable)&&(hr=g,gr=r,vr=null);break;case"focusout":vr=gr=hr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,yr(o,t,a);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":yr(o,t,a)}var v;if(_t)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else $t?Ut(e,t)&&(b="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(b="onCompositionStart");b&&(zt&&"ko"!==t.locale&&($t||"onCompositionStart"!==b?"onCompositionEnd"===b&&$t&&(v=nt()):(Jn="value"in(Zn=a)?Zn.value:Zn.textContent,$t=!0)),0<(g=Gr(r,b)).length&&(b=new yt(b,e,null,t,a),o.push({event:b,listeners:g}),(v||null!==(v=jt(t)))&&(b.data=v))),(v=Rt?function(e,n){switch(e){case"compositionend":return jt(n);case"keypress":return 32!==n.which?null:(Ot=!0,Ft);case"textInput":return(e=n.data)===Ft&&Ot?null:e;default:return null}}(e,t):function(e,n){if($t)return"compositionend"===e||!_t&&Ut(e,n)?(e=nt(),et=Jn=Zn=null,$t=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return zt&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(r=Gr(r,"onBeforeInput")).length&&(a=new yt("onBeforeInput","beforeinput",null,t,a),o.push({event:a,listeners:r}),a.data=v)}Fr(o,n)}))}function Vr(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Gr(e,n){for(var t=n+"Capture",r=[];null!==e;){var a=e,l=a.stateNode;5===a.tag&&null!==l&&(a=l,null!=(l=Le(e,t))&&r.unshift(Vr(e,l,a)),null!=(l=Le(e,n))&&r.push(Vr(e,l,a))),e=e.return}return r}function Yr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function qr(e,n,t,r,a){for(var l=n._reactName,o=[];null!==t&&t!==r;){var i=t,u=i.alternate,s=i.stateNode;if(null!==u&&u===r)break;5===i.tag&&null!==s&&(i=s,a?null!=(u=Le(t,l))&&o.unshift(Vr(t,u,i)):a||null!=(u=Le(t,l))&&o.push(Vr(t,u,i))),t=t.return}0!==o.length&&e.push({event:n,listeners:o})}var Qr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Qr,"\n").replace(Kr,"")}function Zr(e,n,t){if(n=Xr(n),Xr(e)!==n&&t)throw Error(l(425))}function Jr(){}var ea=null,na=null;function ta(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,la="function"==typeof Promise?Promise:void 0,oa="function"==typeof queueMicrotask?queueMicrotask:void 0!==la?function(e){return la.resolve(null).then(e).catch(ia)}:ra;function ia(e){setTimeout((function(){throw e}))}function ua(e,n){var t=n,r=0;do{var a=t.nextSibling;if(e.removeChild(t),a&&8===a.nodeType)if("/$"===(t=a.data)){if(0===r)return e.removeChild(a),void Hn(n);r--}else"$"!==t&&"$?"!==t&&"$!"!==t||r++;t=a}while(t);Hn(n)}function sa(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n)break;if("/$"===n)return null}}return e}function ca(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),Aa="__reactFiber$"+da,fa="__reactProps$"+da,pa="__reactContainer$"+da,ma="__reactEvents$"+da,ha="__reactListeners$"+da,ga="__reactHandles$"+da;function va(e){var n=e[Aa];if(n)return n;for(var t=e.parentNode;t;){if(n=t[pa]||t[Aa]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=ca(e);null!==e;){if(t=e[Aa])return t;e=ca(e)}return n}t=(e=t).parentNode}return null}function ba(e){return!(e=e[Aa]||e[pa])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ya(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(l(33))}function wa(e){return e[fa]||null}var Ea=[],xa=-1;function ka(e){return{current:e}}function Ba(e){0>xa||(e.current=Ea[xa],Ea[xa]=null,xa--)}function Sa(e,n){xa++,Ea[xa]=e.current,e.current=n}var Ca={},Pa=ka(Ca),Na=ka(!1),Ta=Ca;function Da(e,n){var t=e.type.contextTypes;if(!t)return Ca;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var a,l={};for(a in t)l[a]=n[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=l),l}function La(e){return null!=e.childContextTypes}function Ia(){Ba(Na),Ba(Pa)}function _a(e,n,t){if(Pa.current!==Ca)throw Error(l(168));Sa(Pa,n),Sa(Na,t)}function Ma(e,n,t){var r=e.stateNode;if(n=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var a in r=r.getChildContext())if(!(a in n))throw Error(l(108,H(e)||"Unknown",a));return z({},t,r)}function Ra(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ca,Ta=Pa.current,Sa(Pa,e),Sa(Na,Na.current),!0}function za(e,n,t){var r=e.stateNode;if(!r)throw Error(l(169));t?(e=Ma(e,n,Ta),r.__reactInternalMemoizedMergedChildContext=e,Ba(Na),Ba(Pa),Sa(Pa,e)):Ba(Na),Sa(Na,t)}var Fa=null,Oa=!1,Ua=!1;function ja(e){null===Fa?Fa=[e]:Fa.push(e)}function $a(){if(!Ua&&null!==Fa){Ua=!0;var e=0,n=yn;try{var t=Fa;for(yn=1;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}Fa=null,Oa=!1}catch(n){throw null!==Fa&&(Fa=Fa.slice(e+1)),Ye(Je,$a),n}finally{yn=n,Ua=!1}}return null}var Ha=[],Wa=0,Va=null,Ga=0,Ya=[],qa=0,Qa=null,Ka=1,Xa="";function Za(e,n){Ha[Wa++]=Ga,Ha[Wa++]=Va,Va=e,Ga=n}function Ja(e,n,t){Ya[qa++]=Ka,Ya[qa++]=Xa,Ya[qa++]=Qa,Qa=e;var r=Ka;e=Xa;var a=32-on(r)-1;r&=~(1<<a),t+=1;var l=32-on(n)+a;if(30<l){var o=a-a%5;l=(r&(1<<o)-1).toString(32),r>>=o,a-=o,Ka=1<<32-on(n)+a|t<<a|r,Xa=l+e}else Ka=1<<l|t<<a|r,Xa=e}function el(e){null!==e.return&&(Za(e,1),Ja(e,1,0))}function nl(e){for(;e===Va;)Va=Ha[--Wa],Ha[Wa]=null,Ga=Ha[--Wa],Ha[Wa]=null;for(;e===Qa;)Qa=Ya[--qa],Ya[qa]=null,Xa=Ya[--qa],Ya[qa]=null,Ka=Ya[--qa],Ya[qa]=null}var tl=null,rl=null,al=!1,ll=null;function ol(e,n){var t=Ls(5,null,null,0);t.elementType="DELETED",t.stateNode=n,t.return=e,null===(n=e.deletions)?(e.deletions=[t],e.flags|=16):n.push(t)}function il(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,tl=e,rl=sa(n.firstChild),!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,tl=e,rl=null,!0);case 13:return null!==(n=8!==n.nodeType?null:n)&&(t=null!==Qa?{id:Ka,overflow:Xa}:null,e.memoizedState={dehydrated:n,treeContext:t,retryLane:1073741824},(t=Ls(18,null,null,0)).stateNode=n,t.return=e,e.child=t,tl=e,rl=null,!0);default:return!1}}function ul(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function sl(e){if(al){var n=rl;if(n){var t=n;if(!il(e,n)){if(ul(e))throw Error(l(418));n=sa(t.nextSibling);var r=tl;n&&il(e,n)?ol(r,t):(e.flags=-4097&e.flags|2,al=!1,tl=e)}}else{if(ul(e))throw Error(l(418));e.flags=-4097&e.flags|2,al=!1,tl=e}}}function cl(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;tl=e}function dl(e){if(e!==tl)return!1;if(!al)return cl(e),al=!0,!1;var n;if((n=3!==e.tag)&&!(n=5!==e.tag)&&(n="head"!==(n=e.type)&&"body"!==n&&!ta(e.type,e.memoizedProps)),n&&(n=rl)){if(ul(e))throw Al(),Error(l(418));for(;n;)ol(e,n),n=sa(n.nextSibling)}if(cl(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType){var t=e.data;if("/$"===t){if(0===n){rl=sa(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++}e=e.nextSibling}rl=null}}else rl=tl?sa(e.stateNode.nextSibling):null;return!0}function Al(){for(var e=rl;e;)e=sa(e.nextSibling)}function fl(){rl=tl=null,al=!1}function pl(e){null===ll?ll=[e]:ll.push(e)}var ml=y.ReactCurrentBatchConfig;function hl(e,n){if(e&&e.defaultProps){for(var t in n=z({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}return n}var gl=ka(null),vl=null,bl=null,yl=null;function wl(){yl=bl=vl=null}function El(e){var n=gl.current;Ba(gl),e._currentValue=n}function xl(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function kl(e,n){vl=e,yl=bl=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&n)&&(yi=!0),e.firstContext=null)}function Bl(e){var n=e._currentValue;if(yl!==e)if(e={context:e,memoizedValue:n,next:null},null===bl){if(null===vl)throw Error(l(308));bl=e,vl.dependencies={lanes:0,firstContext:e}}else bl=bl.next=e;return n}var Sl=null;function Cl(e){null===Sl?Sl=[e]:Sl.push(e)}function Pl(e,n,t,r){var a=n.interleaved;return null===a?(t.next=t,Cl(n)):(t.next=a.next,a.next=t),n.interleaved=t,Nl(e,r)}function Nl(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}var Tl=!1;function Dl(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ll(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Il(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function _l(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Nu)){var a=r.pending;return null===a?n.next=n:(n.next=a.next,a.next=n),r.pending=n,Nl(e,t)}return null===(a=r.interleaved)?(n.next=n,Cl(r)):(n.next=a.next,a.next=n),r.interleaved=n,Nl(e,t)}function Ml(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,0!=(4194240&t))){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,bn(e,t)}}function Rl(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var a=null,l=null;if(null!==(t=t.firstBaseUpdate)){do{var o={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===l?a=l=o:l=l.next=o,t=t.next}while(null!==t);null===l?a=l=n:l=l.next=n}else a=l=n;return t={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:l,shared:r.shared,effects:r.effects},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function zl(e,n,t,r){var a=e.updateQueue;Tl=!1;var l=a.firstBaseUpdate,o=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var u=i,s=u.next;u.next=null,null===o?l=s:o.next=s,o=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==l){var d=a.baseState;for(o=0,c=s=u=null,i=l;;){var A=i.lane,f=i.eventTime;if((r&A)===A){null!==c&&(c=c.next={eventTime:f,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var p=e,m=i;switch(A=n,f=t,m.tag){case 1:if("function"==typeof(p=m.payload)){d=p.call(f,d,A);break e}d=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(A="function"==typeof(p=m.payload)?p.call(f,d,A):p))break e;d=z({},d,A);break e;case 2:Tl=!0}}null!==i.callback&&0!==i.lane&&(e.flags|=64,null===(A=a.effects)?a.effects=[i]:A.push(i))}else f={eventTime:f,lane:A,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=f,u=d):c=c.next=f,o|=A;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(A=i).next,A.next=null,a.lastBaseUpdate=A,a.shared.pending=null}}if(null===c&&(u=d),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(n=a.shared.interleaved)){a=n;do{o|=a.lane,a=a.next}while(a!==n)}else null===l&&(a.shared.lanes=0);zu|=o,e.lanes=o,e.memoizedState=d}}function Fl(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],a=r.callback;if(null!==a){if(r.callback=null,r=t,"function"!=typeof a)throw Error(l(191,a));a.call(r)}}}var Ol=(new r.Component).refs;function Ul(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:z({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var jl={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=ns(),a=ts(e),l=Il(r,a);l.payload=n,null!=t&&(l.callback=t),null!==(n=_l(e,l,a))&&(rs(n,e,a,r),Ml(n,e,a))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=ns(),a=ts(e),l=Il(r,a);l.tag=1,l.payload=n,null!=t&&(l.callback=t),null!==(n=_l(e,l,a))&&(rs(n,e,a,r),Ml(n,e,a))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=ns(),r=ts(e),a=Il(t,r);a.tag=2,null!=n&&(a.callback=n),null!==(n=_l(e,a,r))&&(rs(n,e,r,t),Ml(n,e,r))}};function $l(e,n,t,r,a,l,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,o):!(n.prototype&&n.prototype.isPureReactComponent&&ur(t,r)&&ur(a,l))}function Hl(e,n,t){var r=!1,a=Ca,l=n.contextType;return"object"==typeof l&&null!==l?l=Bl(l):(a=La(n)?Ta:Pa.current,l=(r=null!=(r=n.contextTypes))?Da(e,a):Ca),n=new n(t,l),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=jl,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=l),n}function Wl(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&jl.enqueueReplaceState(n,n.state,null)}function Vl(e,n,t,r){var a=e.stateNode;a.props=t,a.state=e.memoizedState,a.refs=Ol,Dl(e);var l=n.contextType;"object"==typeof l&&null!==l?a.context=Bl(l):(l=La(n)?Ta:Pa.current,a.context=Da(e,l)),a.state=e.memoizedState,"function"==typeof(l=n.getDerivedStateFromProps)&&(Ul(e,n,l,t),a.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(n=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),n!==a.state&&jl.enqueueReplaceState(a,a.state,null),zl(e,t,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function Gl(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(l(309));var r=t.stateNode}if(!r)throw Error(l(147,e));var a=r,o=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===o?n.ref:(n=function(e){var n=a.refs;n===Ol&&(n=a.refs={}),null===e?delete n[o]:n[o]=e},n._stringRef=o,n)}if("string"!=typeof e)throw Error(l(284));if(!t._owner)throw Error(l(290,e))}return e}function Yl(e,n){throw e=Object.prototype.toString.call(n),Error(l(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function ql(e){return(0,e._init)(e._payload)}function Ql(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function a(e,n){return(e=_s(e,n)).index=0,e.sibling=null,e}function o(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=2,t):r:(n.flags|=2,t):(n.flags|=1048576,t)}function i(n){return e&&null===n.alternate&&(n.flags|=2),n}function u(e,n,t,r){return null===n||6!==n.tag?((n=Fs(t,e.mode,r)).return=e,n):((n=a(n,t)).return=e,n)}function s(e,n,t,r){var l=t.type;return l===x?d(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===L&&ql(l)===n.type)?((r=a(n,t.props)).ref=Gl(e,n,t),r.return=e,r):((r=Ms(t.type,t.key,t.props,null,e.mode,r)).ref=Gl(e,n,t),r.return=e,r)}function c(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Os(t,e.mode,r)).return=e,n):((n=a(n,t.children||[])).return=e,n)}function d(e,n,t,r,l){return null===n||7!==n.tag?((n=Rs(t,e.mode,r,l)).return=e,n):((n=a(n,t)).return=e,n)}function A(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n)return(n=Fs(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return(t=Ms(n.type,n.key,n.props,null,e.mode,t)).ref=Gl(e,null,n),t.return=e,t;case E:return(n=Os(n,e.mode,t)).return=e,n;case L:return A(e,(0,n._init)(n._payload),t)}if(ne(n)||M(n))return(n=Rs(n,e.mode,t,null)).return=e,n;Yl(e,n)}return null}function f(e,n,t,r){var a=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t)return null!==a?null:u(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return t.key===a?s(e,n,t,r):null;case E:return t.key===a?c(e,n,t,r):null;case L:return f(e,n,(a=t._init)(t._payload),r)}if(ne(t)||M(t))return null!==a?null:d(e,n,t,r,null);Yl(e,t)}return null}function p(e,n,t,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(n,e=e.get(t)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return s(n,e=e.get(null===r.key?t:r.key)||null,r,a);case E:return c(n,e=e.get(null===r.key?t:r.key)||null,r,a);case L:return p(e,n,t,(0,r._init)(r._payload),a)}if(ne(r)||M(r))return d(n,e=e.get(t)||null,r,a,null);Yl(n,r)}return null}function m(a,l,i,u){for(var s=null,c=null,d=l,m=l=0,h=null;null!==d&&m<i.length;m++){d.index>m?(h=d,d=null):h=d.sibling;var g=f(a,d,i[m],u);if(null===g){null===d&&(d=h);break}e&&d&&null===g.alternate&&n(a,d),l=o(g,l,m),null===c?s=g:c.sibling=g,c=g,d=h}if(m===i.length)return t(a,d),al&&Za(a,m),s;if(null===d){for(;m<i.length;m++)null!==(d=A(a,i[m],u))&&(l=o(d,l,m),null===c?s=d:c.sibling=d,c=d);return al&&Za(a,m),s}for(d=r(a,d);m<i.length;m++)null!==(h=p(d,a,m,i[m],u))&&(e&&null!==h.alternate&&d.delete(null===h.key?m:h.key),l=o(h,l,m),null===c?s=h:c.sibling=h,c=h);return e&&d.forEach((function(e){return n(a,e)})),al&&Za(a,m),s}function h(a,i,u,s){var c=M(u);if("function"!=typeof c)throw Error(l(150));if(null==(u=c.call(u)))throw Error(l(151));for(var d=c=null,m=i,h=i=0,g=null,v=u.next();null!==m&&!v.done;h++,v=u.next()){m.index>h?(g=m,m=null):g=m.sibling;var b=f(a,m,v.value,s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&n(a,m),i=o(b,i,h),null===d?c=b:d.sibling=b,d=b,m=g}if(v.done)return t(a,m),al&&Za(a,h),c;if(null===m){for(;!v.done;h++,v=u.next())null!==(v=A(a,v.value,s))&&(i=o(v,i,h),null===d?c=v:d.sibling=v,d=v);return al&&Za(a,h),c}for(m=r(a,m);!v.done;h++,v=u.next())null!==(v=p(m,a,h,v.value,s))&&(e&&null!==v.alternate&&m.delete(null===v.key?h:v.key),i=o(v,i,h),null===d?c=v:d.sibling=v,d=v);return e&&m.forEach((function(e){return n(a,e)})),al&&Za(a,h),c}return function e(r,l,o,u){if("object"==typeof o&&null!==o&&o.type===x&&null===o.key&&(o=o.props.children),"object"==typeof o&&null!==o){switch(o.$$typeof){case w:e:{for(var s=o.key,c=l;null!==c;){if(c.key===s){if((s=o.type)===x){if(7===c.tag){t(r,c.sibling),(l=a(c,o.props.children)).return=r,r=l;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===L&&ql(s)===c.type){t(r,c.sibling),(l=a(c,o.props)).ref=Gl(r,c,o),l.return=r,r=l;break e}t(r,c);break}n(r,c),c=c.sibling}o.type===x?((l=Rs(o.props.children,r.mode,u,o.key)).return=r,r=l):((u=Ms(o.type,o.key,o.props,null,r.mode,u)).ref=Gl(r,l,o),u.return=r,r=u)}return i(r);case E:e:{for(c=o.key;null!==l;){if(l.key===c){if(4===l.tag&&l.stateNode.containerInfo===o.containerInfo&&l.stateNode.implementation===o.implementation){t(r,l.sibling),(l=a(l,o.children||[])).return=r,r=l;break e}t(r,l);break}n(r,l),l=l.sibling}(l=Os(o,r.mode,u)).return=r,r=l}return i(r);case L:return e(r,l,(c=o._init)(o._payload),u)}if(ne(o))return m(r,l,o,u);if(M(o))return h(r,l,o,u);Yl(r,o)}return"string"==typeof o&&""!==o||"number"==typeof o?(o=""+o,null!==l&&6===l.tag?(t(r,l.sibling),(l=a(l,o)).return=r,r=l):(t(r,l),(l=Fs(o,r.mode,u)).return=r,r=l),i(r)):t(r,l)}}var Kl=Ql(!0),Xl=Ql(!1),Zl={},Jl=ka(Zl),eo=ka(Zl),no=ka(Zl);function to(e){if(e===Zl)throw Error(l(174));return e}function ro(e,n){switch(Sa(no,n),Sa(eo,e),Sa(Jl,Zl),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:ue(null,"");break;default:n=ue(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}Ba(Jl),Sa(Jl,n)}function ao(){Ba(Jl),Ba(eo),Ba(no)}function lo(e){to(no.current);var n=to(Jl.current),t=ue(n,e.type);n!==t&&(Sa(eo,e),Sa(Jl,t))}function oo(e){eo.current===e&&(Ba(Jl),Ba(eo))}var io=ka(0);function uo(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(0!=(128&n.flags))return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var so=[];function co(){for(var e=0;e<so.length;e++)so[e]._workInProgressVersionPrimary=null;so.length=0}var Ao=y.ReactCurrentDispatcher,fo=y.ReactCurrentBatchConfig,po=0,mo=null,ho=null,go=null,vo=!1,bo=!1,yo=0,wo=0;function Eo(){throw Error(l(321))}function xo(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!ir(e[t],n[t]))return!1;return!0}function ko(e,n,t,r,a,o){if(po=o,mo=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,Ao.current=null===e||null===e.memoizedState?ii:ui,e=t(r,a),bo){o=0;do{if(bo=!1,yo=0,25<=o)throw Error(l(301));o+=1,go=ho=null,n.updateQueue=null,Ao.current=si,e=t(r,a)}while(bo)}if(Ao.current=oi,n=null!==ho&&null!==ho.next,po=0,go=ho=mo=null,vo=!1,n)throw Error(l(300));return e}function Bo(){var e=0!==yo;return yo=0,e}function So(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===go?mo.memoizedState=go=e:go=go.next=e,go}function Co(){if(null===ho){var e=mo.alternate;e=null!==e?e.memoizedState:null}else e=ho.next;var n=null===go?mo.memoizedState:go.next;if(null!==n)go=n,ho=e;else{if(null===e)throw Error(l(310));e={memoizedState:(ho=e).memoizedState,baseState:ho.baseState,baseQueue:ho.baseQueue,queue:ho.queue,next:null},null===go?mo.memoizedState=go=e:go=go.next=e}return go}function Po(e,n){return"function"==typeof n?n(e):n}function No(e){var n=Co(),t=n.queue;if(null===t)throw Error(l(311));t.lastRenderedReducer=e;var r=ho,a=r.baseQueue,o=t.pending;if(null!==o){if(null!==a){var i=a.next;a.next=o.next,o.next=i}r.baseQueue=a=o,t.pending=null}if(null!==a){o=a.next,r=r.baseState;var u=i=null,s=null,c=o;do{var d=c.lane;if((po&d)===d)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var A={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=A,i=r):s=s.next=A,mo.lanes|=d,zu|=d}c=c.next}while(null!==c&&c!==o);null===s?i=r:s.next=u,ir(r,n.memoizedState)||(yi=!0),n.memoizedState=r,n.baseState=i,n.baseQueue=s,t.lastRenderedState=r}if(null!==(e=t.interleaved)){a=e;do{o=a.lane,mo.lanes|=o,zu|=o,a=a.next}while(a!==e)}else null===a&&(t.lanes=0);return[n.memoizedState,t.dispatch]}function To(e){var n=Co(),t=n.queue;if(null===t)throw Error(l(311));t.lastRenderedReducer=e;var r=t.dispatch,a=t.pending,o=n.memoizedState;if(null!==a){t.pending=null;var i=a=a.next;do{o=e(o,i.action),i=i.next}while(i!==a);ir(o,n.memoizedState)||(yi=!0),n.memoizedState=o,null===n.baseQueue&&(n.baseState=o),t.lastRenderedState=o}return[o,r]}function Do(){}function Lo(e,n){var t=mo,r=Co(),a=n(),o=!ir(r.memoizedState,a);if(o&&(r.memoizedState=a,yi=!0),r=r.queue,Wo(Mo.bind(null,t,r,e),[e]),r.getSnapshot!==n||o||null!==go&&1&go.memoizedState.tag){if(t.flags|=2048,Oo(9,_o.bind(null,t,r,a,n),void 0,null),null===Tu)throw Error(l(349));0!=(30&po)||Io(t,n,a)}return a}function Io(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=mo.updateQueue)?(n={lastEffect:null,stores:null},mo.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function _o(e,n,t,r){n.value=t,n.getSnapshot=r,Ro(n)&&zo(e)}function Mo(e,n,t){return t((function(){Ro(n)&&zo(e)}))}function Ro(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!ir(e,t)}catch(e){return!0}}function zo(e){var n=Nl(e,1);null!==n&&rs(n,e,1,-1)}function Fo(e){var n=So();return"function"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Po,lastRenderedState:e},n.queue=e,e=e.dispatch=ti.bind(null,mo,e),[n.memoizedState,e]}function Oo(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=mo.updateQueue)?(n={lastEffect:null,stores:null},mo.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function Uo(){return Co().memoizedState}function jo(e,n,t,r){var a=So();mo.flags|=e,a.memoizedState=Oo(1|n,t,void 0,void 0===r?null:r)}function $o(e,n,t,r){var a=Co();r=void 0===r?null:r;var l=void 0;if(null!==ho){var o=ho.memoizedState;if(l=o.destroy,null!==r&&xo(r,o.deps))return void(a.memoizedState=Oo(n,t,l,r))}mo.flags|=e,a.memoizedState=Oo(1|n,t,l,r)}function Ho(e,n){return jo(8390656,8,e,n)}function Wo(e,n){return $o(2048,8,e,n)}function Vo(e,n){return $o(4,2,e,n)}function Go(e,n){return $o(4,4,e,n)}function Yo(e,n){return"function"==typeof n?(e=e(),n(e),function(){n(null)}):null!=n?(e=e(),n.current=e,function(){n.current=null}):void 0}function qo(e,n,t){return t=null!=t?t.concat([e]):null,$o(4,4,Yo.bind(null,n,e),t)}function Qo(){}function Ko(e,n){var t=Co();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&xo(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function Xo(e,n){var t=Co();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&xo(n,r[1])?r[0]:(e=e(),t.memoizedState=[e,n],e)}function Zo(e,n,t){return 0==(21&po)?(e.baseState&&(e.baseState=!1,yi=!0),e.memoizedState=t):(ir(t,n)||(t=hn(),mo.lanes|=t,zu|=t,e.baseState=!0),n)}function Jo(e,n){var t=yn;yn=0!==t&&4>t?t:4,e(!0);var r=fo.transition;fo.transition={};try{e(!1),n()}finally{yn=t,fo.transition=r}}function ei(){return Co().memoizedState}function ni(e,n,t){var r=ts(e);t={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null},ri(e)?ai(n,t):null!==(t=Pl(e,n,t,r))&&(rs(t,e,r,ns()),li(t,n,r))}function ti(e,n,t){var r=ts(e),a={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null};if(ri(e))ai(n,a);else{var l=e.alternate;if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=n.lastRenderedReducer))try{var o=n.lastRenderedState,i=l(o,t);if(a.hasEagerState=!0,a.eagerState=i,ir(i,o)){var u=n.interleaved;return null===u?(a.next=a,Cl(n)):(a.next=u.next,u.next=a),void(n.interleaved=a)}}catch(e){}null!==(t=Pl(e,n,a,r))&&(rs(t,e,r,a=ns()),li(t,n,r))}}function ri(e){var n=e.alternate;return e===mo||null!==n&&n===mo}function ai(e,n){bo=vo=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function li(e,n,t){if(0!=(4194240&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,bn(e,t)}}var oi={readContext:Bl,useCallback:Eo,useContext:Eo,useEffect:Eo,useImperativeHandle:Eo,useInsertionEffect:Eo,useLayoutEffect:Eo,useMemo:Eo,useReducer:Eo,useRef:Eo,useState:Eo,useDebugValue:Eo,useDeferredValue:Eo,useTransition:Eo,useMutableSource:Eo,useSyncExternalStore:Eo,useId:Eo,unstable_isNewReconciler:!1},ii={readContext:Bl,useCallback:function(e,n){return So().memoizedState=[e,void 0===n?null:n],e},useContext:Bl,useEffect:Ho,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,jo(4194308,4,Yo.bind(null,n,e),t)},useLayoutEffect:function(e,n){return jo(4194308,4,e,n)},useInsertionEffect:function(e,n){return jo(4,2,e,n)},useMemo:function(e,n){var t=So();return n=void 0===n?null:n,e=e(),t.memoizedState=[e,n],e},useReducer:function(e,n,t){var r=So();return n=void 0!==t?t(n):n,r.memoizedState=r.baseState=n,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:n},r.queue=e,e=e.dispatch=ni.bind(null,mo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},So().memoizedState=e},useState:Fo,useDebugValue:Qo,useDeferredValue:function(e){return So().memoizedState=e},useTransition:function(){var e=Fo(!1),n=e[0];return e=Jo.bind(null,e[1]),So().memoizedState=e,[n,e]},useMutableSource:function(){},useSyncExternalStore:function(e,n,t){var r=mo,a=So();if(al){if(void 0===t)throw Error(l(407));t=t()}else{if(t=n(),null===Tu)throw Error(l(349));0!=(30&po)||Io(r,n,t)}a.memoizedState=t;var o={value:t,getSnapshot:n};return a.queue=o,Ho(Mo.bind(null,r,o,e),[e]),r.flags|=2048,Oo(9,_o.bind(null,r,o,t,n),void 0,null),t},useId:function(){var e=So(),n=Tu.identifierPrefix;if(al){var t=Xa;n=":"+n+"R"+(t=(Ka&~(1<<32-on(Ka)-1)).toString(32)+t),0<(t=yo++)&&(n+="H"+t.toString(32)),n+=":"}else n=":"+n+"r"+(t=wo++).toString(32)+":";return e.memoizedState=n},unstable_isNewReconciler:!1},ui={readContext:Bl,useCallback:Ko,useContext:Bl,useEffect:Wo,useImperativeHandle:qo,useInsertionEffect:Vo,useLayoutEffect:Go,useMemo:Xo,useReducer:No,useRef:Uo,useState:function(){return No(Po)},useDebugValue:Qo,useDeferredValue:function(e){return Zo(Co(),ho.memoizedState,e)},useTransition:function(){return[No(Po)[0],Co().memoizedState]},useMutableSource:Do,useSyncExternalStore:Lo,useId:ei,unstable_isNewReconciler:!1},si={readContext:Bl,useCallback:Ko,useContext:Bl,useEffect:Wo,useImperativeHandle:qo,useInsertionEffect:Vo,useLayoutEffect:Go,useMemo:Xo,useReducer:To,useRef:Uo,useState:function(){return To(Po)},useDebugValue:Qo,useDeferredValue:function(e){var n=Co();return null===ho?n.memoizedState=e:Zo(n,ho.memoizedState,e)},useTransition:function(){return[To(Po)[0],Co().memoizedState]},useMutableSource:Do,useSyncExternalStore:Lo,useId:ei,unstable_isNewReconciler:!1};function ci(e,n){try{var t="",r=n;do{t+=j(r),r=r.return}while(r);var a=t}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:n,stack:a,digest:null}}function di(e,n,t){return{value:e,source:null,stack:null!=t?t:null,digest:null!=n?n:null}}function Ai(e,n){try{console.error(n.value)}catch(e){setTimeout((function(){throw e}))}}var fi="function"==typeof WeakMap?WeakMap:Map;function pi(e,n,t){(t=Il(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){Vu||(Vu=!0,Gu=r),Ai(0,n)},t}function mi(e,n,t){(t=Il(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=n.value;t.payload=function(){return r(a)},t.callback=function(){Ai(0,n)}}var l=e.stateNode;return null!==l&&"function"==typeof l.componentDidCatch&&(t.callback=function(){Ai(0,n),"function"!=typeof r&&(null===Yu?Yu=new Set([this]):Yu.add(this));var e=n.stack;this.componentDidCatch(n.value,{componentStack:null!==e?e:""})}),t}function hi(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new fi;var a=new Set;r.set(n,a)}else void 0===(a=r.get(n))&&(a=new Set,r.set(n,a));a.has(t)||(a.add(t),e=Ss.bind(null,e,n,t),n.then(e,e))}function gi(e){do{var n;if((n=13===e.tag)&&(n=null===(n=e.memoizedState)||null!==n.dehydrated),n)return e;e=e.return}while(null!==e);return null}function vi(e,n,t,r,a){return 0==(1&e.mode)?(e===n?e.flags|=65536:(e.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((n=Il(-1,1)).tag=2,_l(t,n,1))),t.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}var bi=y.ReactCurrentOwner,yi=!1;function wi(e,n,t,r){n.child=null===e?Xl(n,null,t,r):Kl(n,e.child,t,r)}function Ei(e,n,t,r,a){t=t.render;var l=n.ref;return kl(n,a),r=ko(e,n,t,r,l,a),t=Bo(),null===e||yi?(al&&t&&el(n),n.flags|=1,wi(e,n,r,a),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~a,Vi(e,n,a))}function xi(e,n,t,r,a){if(null===e){var l=t.type;return"function"!=typeof l||Is(l)||void 0!==l.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=Ms(t.type,null,r,n,n.mode,a)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=l,ki(e,n,l,r,a))}if(l=e.child,0==(e.lanes&a)){var o=l.memoizedProps;if((t=null!==(t=t.compare)?t:ur)(o,r)&&e.ref===n.ref)return Vi(e,n,a)}return n.flags|=1,(e=_s(l,r)).ref=n.ref,e.return=n,n.child=e}function ki(e,n,t,r,a){if(null!==e){var l=e.memoizedProps;if(ur(l,r)&&e.ref===n.ref){if(yi=!1,n.pendingProps=r=l,0==(e.lanes&a))return n.lanes=e.lanes,Vi(e,n,a);0!=(131072&e.flags)&&(yi=!0)}}return Ci(e,n,t,r,a)}function Bi(e,n,t){var r=n.pendingProps,a=r.children,l=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&n.mode))n.memoizedState={baseLanes:0,cachePool:null,transitions:null},Sa(_u,Iu),Iu|=t;else{if(0==(1073741824&t))return e=null!==l?l.baseLanes|t:t,n.lanes=n.childLanes=1073741824,n.memoizedState={baseLanes:e,cachePool:null,transitions:null},n.updateQueue=null,Sa(_u,Iu),Iu|=e,null;n.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==l?l.baseLanes:t,Sa(_u,Iu),Iu|=r}else null!==l?(r=l.baseLanes|t,n.memoizedState=null):r=t,Sa(_u,Iu),Iu|=r;return wi(e,n,a,t),n.child}function Si(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=512,n.flags|=2097152)}function Ci(e,n,t,r,a){var l=La(t)?Ta:Pa.current;return l=Da(n,l),kl(n,a),t=ko(e,n,t,r,l,a),r=Bo(),null===e||yi?(al&&r&&el(n),n.flags|=1,wi(e,n,t,a),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~a,Vi(e,n,a))}function Pi(e,n,t,r,a){if(La(t)){var l=!0;Ra(n)}else l=!1;if(kl(n,a),null===n.stateNode)Wi(e,n),Hl(n,t,r),Vl(n,t,r,a),r=!0;else if(null===e){var o=n.stateNode,i=n.memoizedProps;o.props=i;var u=o.context,s=t.contextType;s="object"==typeof s&&null!==s?Bl(s):Da(n,s=La(t)?Ta:Pa.current);var c=t.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate;d||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(i!==r||u!==s)&&Wl(n,o,r,s),Tl=!1;var A=n.memoizedState;o.state=A,zl(n,r,o,a),u=n.memoizedState,i!==r||A!==u||Na.current||Tl?("function"==typeof c&&(Ul(n,t,c,r),u=n.memoizedState),(i=Tl||$l(n,t,i,r,A,u,s))?(d||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(n.flags|=4194308)):("function"==typeof o.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=u),o.props=r,o.state=u,o.context=s,r=i):("function"==typeof o.componentDidMount&&(n.flags|=4194308),r=!1)}else{o=n.stateNode,Ll(e,n),i=n.memoizedProps,s=n.type===n.elementType?i:hl(n.type,i),o.props=s,d=n.pendingProps,A=o.context,u="object"==typeof(u=t.contextType)&&null!==u?Bl(u):Da(n,u=La(t)?Ta:Pa.current);var f=t.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(i!==d||A!==u)&&Wl(n,o,r,u),Tl=!1,A=n.memoizedState,o.state=A,zl(n,r,o,a);var p=n.memoizedState;i!==d||A!==p||Na.current||Tl?("function"==typeof f&&(Ul(n,t,f,r),p=n.memoizedState),(s=Tl||$l(n,t,s,r,A,p,u)||!1)?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,p,u),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof o.componentDidUpdate&&(n.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof o.componentDidUpdate||i===e.memoizedProps&&A===e.memoizedState||(n.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||i===e.memoizedProps&&A===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=p),o.props=r,o.state=p,o.context=u,r=s):("function"!=typeof o.componentDidUpdate||i===e.memoizedProps&&A===e.memoizedState||(n.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||i===e.memoizedProps&&A===e.memoizedState||(n.flags|=1024),r=!1)}return Ni(e,n,t,r,l,a)}function Ni(e,n,t,r,a,l){Si(e,n);var o=0!=(128&n.flags);if(!r&&!o)return a&&za(n,t,!1),Vi(e,n,l);r=n.stateNode,bi.current=n;var i=o&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&o?(n.child=Kl(n,e.child,null,l),n.child=Kl(n,null,i,l)):wi(e,n,i,l),n.memoizedState=r.state,a&&za(n,t,!0),n.child}function Ti(e){var n=e.stateNode;n.pendingContext?_a(0,n.pendingContext,n.pendingContext!==n.context):n.context&&_a(0,n.context,!1),ro(e,n.containerInfo)}function Di(e,n,t,r,a){return fl(),pl(a),n.flags|=256,wi(e,n,t,r),n.child}var Li,Ii,_i,Mi,Ri={dehydrated:null,treeContext:null,retryLane:0};function zi(e){return{baseLanes:e,cachePool:null,transitions:null}}function Fi(e,n,t){var r,a=n.pendingProps,o=io.current,i=!1,u=0!=(128&n.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(i=!0,n.flags&=-129):null!==e&&null===e.memoizedState||(o|=1),Sa(io,1&o),null===e)return sl(n),null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&n.mode)?n.lanes=1:"$!"===e.data?n.lanes=8:n.lanes=1073741824,null):(u=a.children,e=a.fallback,i?(a=n.mode,i=n.child,u={mode:"hidden",children:u},0==(1&a)&&null!==i?(i.childLanes=0,i.pendingProps=u):i=zs(u,a,0,null),e=Rs(e,a,t,null),i.return=n,e.return=n,i.sibling=e,n.child=i,n.child.memoizedState=zi(t),n.memoizedState=Ri,e):Oi(n,u));if(null!==(o=e.memoizedState)&&null!==(r=o.dehydrated))return function(e,n,t,r,a,o,i){if(t)return 256&n.flags?(n.flags&=-257,Ui(e,n,i,r=di(Error(l(422))))):null!==n.memoizedState?(n.child=e.child,n.flags|=128,null):(o=r.fallback,a=n.mode,r=zs({mode:"visible",children:r.children},a,0,null),(o=Rs(o,a,i,null)).flags|=2,r.return=n,o.return=n,r.sibling=o,n.child=r,0!=(1&n.mode)&&Kl(n,e.child,null,i),n.child.memoizedState=zi(i),n.memoizedState=Ri,o);if(0==(1&n.mode))return Ui(e,n,i,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var u=r.dgst;return r=u,Ui(e,n,i,r=di(o=Error(l(419)),r,void 0))}if(u=0!=(i&e.childLanes),yi||u){if(null!==(r=Tu)){switch(i&-i){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!=(a&(r.suspendedLanes|i))?0:a)&&a!==o.retryLane&&(o.retryLane=a,Nl(e,a),rs(r,e,a,-1))}return hs(),Ui(e,n,i,r=di(Error(l(421))))}return"$?"===a.data?(n.flags|=128,n.child=e.child,n=Ps.bind(null,e),a._reactRetry=n,null):(e=o.treeContext,rl=sa(a.nextSibling),tl=n,al=!0,ll=null,null!==e&&(Ya[qa++]=Ka,Ya[qa++]=Xa,Ya[qa++]=Qa,Ka=e.id,Xa=e.overflow,Qa=n),(n=Oi(n,r.children)).flags|=4096,n)}(e,n,u,a,r,o,t);if(i){i=a.fallback,u=n.mode,r=(o=e.child).sibling;var s={mode:"hidden",children:a.children};return 0==(1&u)&&n.child!==o?((a=n.child).childLanes=0,a.pendingProps=s,n.deletions=null):(a=_s(o,s)).subtreeFlags=14680064&o.subtreeFlags,null!==r?i=_s(r,i):(i=Rs(i,u,t,null)).flags|=2,i.return=n,a.return=n,a.sibling=i,n.child=a,a=i,i=n.child,u=null===(u=e.child.memoizedState)?zi(t):{baseLanes:u.baseLanes|t,cachePool:null,transitions:u.transitions},i.memoizedState=u,i.childLanes=e.childLanes&~t,n.memoizedState=Ri,a}return e=(i=e.child).sibling,a=_s(i,{mode:"visible",children:a.children}),0==(1&n.mode)&&(a.lanes=t),a.return=n,a.sibling=null,null!==e&&(null===(t=n.deletions)?(n.deletions=[e],n.flags|=16):t.push(e)),n.child=a,n.memoizedState=null,a}function Oi(e,n){return(n=zs({mode:"visible",children:n},e.mode,0,null)).return=e,e.child=n}function Ui(e,n,t,r){return null!==r&&pl(r),Kl(n,e.child,null,t),(e=Oi(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function ji(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),xl(e.return,n,t)}function $i(e,n,t,r,a){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:a}:(l.isBackwards=n,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=t,l.tailMode=a)}function Hi(e,n,t){var r=n.pendingProps,a=r.revealOrder,l=r.tail;if(wi(e,n,r.children,t),0!=(2&(r=io.current)))r=1&r|2,n.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ji(e,t,n);else if(19===e.tag)ji(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Sa(io,r),0==(1&n.mode))n.memoizedState=null;else switch(a){case"forwards":for(t=n.child,a=null;null!==t;)null!==(e=t.alternate)&&null===uo(e)&&(a=t),t=t.sibling;null===(t=a)?(a=n.child,n.child=null):(a=t.sibling,t.sibling=null),$i(n,!1,a,t,l);break;case"backwards":for(t=null,a=n.child,n.child=null;null!==a;){if(null!==(e=a.alternate)&&null===uo(e)){n.child=a;break}e=a.sibling,a.sibling=t,t=a,a=e}$i(n,!0,t,null,l);break;case"together":$i(n,!1,null,null,void 0);break;default:n.memoizedState=null}return n.child}function Wi(e,n){0==(1&n.mode)&&null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2)}function Vi(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),zu|=n.lanes,0==(t&n.childLanes))return null;if(null!==e&&n.child!==e.child)throw Error(l(153));if(null!==n.child){for(t=_s(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=_s(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function Gi(e,n){if(!al)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Yi(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var a=e.child;null!==a;)t|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)t|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function qi(e,n,t){var r=n.pendingProps;switch(nl(n),n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Yi(n),null;case 1:case 17:return La(n.type)&&Ia(),Yi(n),null;case 3:return r=n.stateNode,ao(),Ba(Na),Ba(Pa),co(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(dl(n)?n.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&n.flags)||(n.flags|=1024,null!==ll&&(is(ll),ll=null))),Ii(e,n),Yi(n),null;case 5:oo(n);var a=to(no.current);if(t=n.type,null!==e&&null!=n.stateNode)_i(e,n,t,r,a),e.ref!==n.ref&&(n.flags|=512,n.flags|=2097152);else{if(!r){if(null===n.stateNode)throw Error(l(166));return Yi(n),null}if(e=to(Jl.current),dl(n)){r=n.stateNode,t=n.type;var o=n.memoizedProps;switch(r[Aa]=n,r[fa]=o,e=0!=(1&n.mode),t){case"dialog":Or("cancel",r),Or("close",r);break;case"iframe":case"object":case"embed":Or("load",r);break;case"video":case"audio":for(a=0;a<Mr.length;a++)Or(Mr[a],r);break;case"source":Or("error",r);break;case"img":case"image":case"link":Or("error",r),Or("load",r);break;case"details":Or("toggle",r);break;case"input":K(r,o),Or("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!o.multiple},Or("invalid",r);break;case"textarea":ae(r,o),Or("invalid",r)}for(var u in ve(t,o),a=null,o)if(o.hasOwnProperty(u)){var s=o[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==o.suppressHydrationWarning&&Zr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==o.suppressHydrationWarning&&Zr(r.textContent,s,e),a=["children",""+s]):i.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Or("scroll",r)}switch(t){case"input":G(r),J(r,o,!0);break;case"textarea":G(r),oe(r);break;case"select":case"option":break;default:"function"==typeof o.onClick&&(r.onclick=Jr)}r=a,n.updateQueue=r,null!==r&&(n.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ie(t)),"http://www.w3.org/1999/xhtml"===e?"script"===t?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(t,{is:r.is}):(e=u.createElement(t),"select"===t&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,t),e[Aa]=n,e[fa]=r,Li(e,n,!1,!1),n.stateNode=e;e:{switch(u=be(t,r),t){case"dialog":Or("cancel",e),Or("close",e),a=r;break;case"iframe":case"object":case"embed":Or("load",e),a=r;break;case"video":case"audio":for(a=0;a<Mr.length;a++)Or(Mr[a],e);a=r;break;case"source":Or("error",e),a=r;break;case"img":case"image":case"link":Or("error",e),Or("load",e),a=r;break;case"details":Or("toggle",e),a=r;break;case"input":K(e,r),a=Q(e,r),Or("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=z({},r,{value:void 0}),Or("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Or("invalid",e)}for(o in ve(t,a),s=a)if(s.hasOwnProperty(o)){var c=s[o];"style"===o?he(e,c):"dangerouslySetInnerHTML"===o?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===o?"string"==typeof c?("textarea"!==t||""!==c)&&Ae(e,c):"number"==typeof c&&Ae(e,""+c):"suppressContentEditableWarning"!==o&&"suppressHydrationWarning"!==o&&"autoFocus"!==o&&(i.hasOwnProperty(o)?null!=c&&"onScroll"===o&&Or("scroll",e):null!=c&&b(e,o,c,u))}switch(t){case"input":G(e),J(e,r,!1);break;case"textarea":G(e),oe(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(o=r.value)?te(e,!!r.multiple,o,!1):null!=r.defaultValue&&te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(t){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(n.flags|=4)}null!==n.ref&&(n.flags|=512,n.flags|=2097152)}return Yi(n),null;case 6:if(e&&null!=n.stateNode)Mi(e,n,e.memoizedProps,r);else{if("string"!=typeof r&&null===n.stateNode)throw Error(l(166));if(t=to(no.current),to(Jl.current),dl(n)){if(r=n.stateNode,t=n.memoizedProps,r[Aa]=n,(o=r.nodeValue!==t)&&null!==(e=tl))switch(e.tag){case 3:Zr(r.nodeValue,t,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,t,0!=(1&e.mode))}o&&(n.flags|=4)}else(r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[Aa]=n,n.stateNode=r}return Yi(n),null;case 13:if(Ba(io),r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(al&&null!==rl&&0!=(1&n.mode)&&0==(128&n.flags))Al(),fl(),n.flags|=98560,o=!1;else if(o=dl(n),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error(l(318));if(!(o=null!==(o=n.memoizedState)?o.dehydrated:null))throw Error(l(317));o[Aa]=n}else fl(),0==(128&n.flags)&&(n.memoizedState=null),n.flags|=4;Yi(n),o=!1}else null!==ll&&(is(ll),ll=null),o=!0;if(!o)return 65536&n.flags?n:null}return 0!=(128&n.flags)?(n.lanes=t,n):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(n.child.flags|=8192,0!=(1&n.mode)&&(null===e||0!=(1&io.current)?0===Mu&&(Mu=3):hs())),null!==n.updateQueue&&(n.flags|=4),Yi(n),null);case 4:return ao(),Ii(e,n),null===e&&$r(n.stateNode.containerInfo),Yi(n),null;case 10:return El(n.type._context),Yi(n),null;case 19:if(Ba(io),null===(o=n.memoizedState))return Yi(n),null;if(r=0!=(128&n.flags),null===(u=o.rendering))if(r)Gi(o,!1);else{if(0!==Mu||null!==e&&0!=(128&e.flags))for(e=n.child;null!==e;){if(null!==(u=uo(e))){for(n.flags|=128,Gi(o,!1),null!==(r=u.updateQueue)&&(n.updateQueue=r,n.flags|=4),n.subtreeFlags=0,r=t,t=n.child;null!==t;)e=r,(o=t).flags&=14680066,null===(u=o.alternate)?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=u.childLanes,o.lanes=u.lanes,o.child=u.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=u.memoizedProps,o.memoizedState=u.memoizedState,o.updateQueue=u.updateQueue,o.type=u.type,e=u.dependencies,o.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return Sa(io,1&io.current|2),n.child}e=e.sibling}null!==o.tail&&Xe()>Hu&&(n.flags|=128,r=!0,Gi(o,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=uo(u))){if(n.flags|=128,r=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),Gi(o,!0),null===o.tail&&"hidden"===o.tailMode&&!u.alternate&&!al)return Yi(n),null}else 2*Xe()-o.renderingStartTime>Hu&&1073741824!==t&&(n.flags|=128,r=!0,Gi(o,!1),n.lanes=4194304);o.isBackwards?(u.sibling=n.child,n.child=u):(null!==(t=o.last)?t.sibling=u:n.child=u,o.last=u)}return null!==o.tail?(n=o.tail,o.rendering=n,o.tail=n.sibling,o.renderingStartTime=Xe(),n.sibling=null,t=io.current,Sa(io,r?1&t|2:1&t),n):(Yi(n),null);case 22:case 23:return As(),r=null!==n.memoizedState,null!==e&&null!==e.memoizedState!==r&&(n.flags|=8192),r&&0!=(1&n.mode)?0!=(1073741824&Iu)&&(Yi(n),6&n.subtreeFlags&&(n.flags|=8192)):Yi(n),null;case 24:case 25:return null}throw Error(l(156,n.tag))}function Qi(e,n){switch(nl(n),n.tag){case 1:return La(n.type)&&Ia(),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return ao(),Ba(Na),Ba(Pa),co(),0!=(65536&(e=n.flags))&&0==(128&e)?(n.flags=-65537&e|128,n):null;case 5:return oo(n),null;case 13:if(Ba(io),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(l(340));fl()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return Ba(io),null;case 4:return ao(),null;case 10:return El(n.type._context),null;case 22:case 23:return As(),null;default:return null}}Li=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},Ii=function(){},_i=function(e,n,t,r){var a=e.memoizedProps;if(a!==r){e=n.stateNode,to(Jl.current);var l,o=null;switch(t){case"input":a=Q(e,a),r=Q(e,r),o=[];break;case"select":a=z({},a,{value:void 0}),r=z({},r,{value:void 0}),o=[];break;case"textarea":a=re(e,a),r=re(e,r),o=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ve(t,r),t=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(l in u)u.hasOwnProperty(l)&&(t||(t={}),t[l]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(i.hasOwnProperty(c)?o||(o=[]):(o=o||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(l in u)!u.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(t||(t={}),t[l]="");for(l in s)s.hasOwnProperty(l)&&u[l]!==s[l]&&(t||(t={}),t[l]=s[l])}else t||(o||(o=[]),o.push(c,t)),t=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(o=o||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(o=o||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(i.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Or("scroll",e),o||u===s||(o=[])):(o=o||[]).push(c,s))}t&&(o=o||[]).push("style",t);var c=o;(n.updateQueue=c)&&(n.flags|=4)}},Mi=function(e,n,t,r){t!==r&&(n.flags|=4)};var Ki=!1,Xi=!1,Zi="function"==typeof WeakSet?WeakSet:Set,Ji=null;function eu(e,n){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Bs(e,n,t)}else t.current=null}function nu(e,n,t){try{t()}catch(t){Bs(e,n,t)}}var tu=!1;function ru(e,n,t){var r=n.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var l=a.destroy;a.destroy=void 0,void 0!==l&&nu(n,t,l)}a=a.next}while(a!==r)}}function au(e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var t=n=n.next;do{if((t.tag&e)===e){var r=t.create;t.destroy=r()}t=t.next}while(t!==n)}}function lu(e){var n=e.ref;if(null!==n){var t=e.stateNode;e.tag,e=t,"function"==typeof n?n(e):n.current=e}}function ou(e){var n=e.alternate;null!==n&&(e.alternate=null,ou(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&(delete n[Aa],delete n[fa],delete n[ma],delete n[ha],delete n[ga]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function su(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(su(e,n,t),e=e.sibling;null!==e;)su(e,n,t),e=e.sibling}function cu(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cu(e,n,t),e=e.sibling;null!==e;)cu(e,n,t),e=e.sibling}var du=null,Au=!1;function fu(e,n,t){for(t=t.child;null!==t;)pu(e,n,t),t=t.sibling}function pu(e,n,t){if(ln&&"function"==typeof ln.onCommitFiberUnmount)try{ln.onCommitFiberUnmount(an,t)}catch(e){}switch(t.tag){case 5:Xi||eu(t,n);case 6:var r=du,a=Au;du=null,fu(e,n,t),Au=a,null!==(du=r)&&(Au?(e=du,t=t.stateNode,8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)):du.removeChild(t.stateNode));break;case 18:null!==du&&(Au?(e=du,t=t.stateNode,8===e.nodeType?ua(e.parentNode,t):1===e.nodeType&&ua(e,t),Hn(e)):ua(du,t.stateNode));break;case 4:r=du,a=Au,du=t.stateNode.containerInfo,Au=!0,fu(e,n,t),du=r,Au=a;break;case 0:case 11:case 14:case 15:if(!Xi&&null!==(r=t.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var l=a,o=l.destroy;l=l.tag,void 0!==o&&(0!=(2&l)||0!=(4&l))&&nu(t,n,o),a=a.next}while(a!==r)}fu(e,n,t);break;case 1:if(!Xi&&(eu(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount))try{r.props=t.memoizedProps,r.state=t.memoizedState,r.componentWillUnmount()}catch(e){Bs(t,n,e)}fu(e,n,t);break;case 21:fu(e,n,t);break;case 22:1&t.mode?(Xi=(r=Xi)||null!==t.memoizedState,fu(e,n,t),Xi=r):fu(e,n,t);break;default:fu(e,n,t)}}function mu(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new Zi),n.forEach((function(n){var r=Ns.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))}))}}function hu(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var a=t[r];try{var o=e,i=n,u=i;e:for(;null!==u;){switch(u.tag){case 5:du=u.stateNode,Au=!1;break e;case 3:case 4:du=u.stateNode.containerInfo,Au=!0;break e}u=u.return}if(null===du)throw Error(l(160));pu(o,i,a),du=null,Au=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){Bs(a,n,e)}}if(12854&n.subtreeFlags)for(n=n.child;null!==n;)gu(n,e),n=n.sibling}function gu(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(hu(n,e),vu(e),4&r){try{ru(3,e,e.return),au(3,e)}catch(n){Bs(e,e.return,n)}try{ru(5,e,e.return)}catch(n){Bs(e,e.return,n)}}break;case 1:hu(n,e),vu(e),512&r&&null!==t&&eu(t,t.return);break;case 5:if(hu(n,e),vu(e),512&r&&null!==t&&eu(t,t.return),32&e.flags){var a=e.stateNode;try{Ae(a,"")}catch(n){Bs(e,e.return,n)}}if(4&r&&null!=(a=e.stateNode)){var o=e.memoizedProps,i=null!==t?t.memoizedProps:o,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===o.type&&null!=o.name&&X(a,o),be(u,i);var c=be(u,o);for(i=0;i<s.length;i+=2){var d=s[i],A=s[i+1];"style"===d?he(a,A):"dangerouslySetInnerHTML"===d?de(a,A):"children"===d?Ae(a,A):b(a,d,A,c)}switch(u){case"input":Z(a,o);break;case"textarea":le(a,o);break;case"select":var f=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!o.multiple;var p=o.value;null!=p?te(a,!!o.multiple,p,!1):f!==!!o.multiple&&(null!=o.defaultValue?te(a,!!o.multiple,o.defaultValue,!0):te(a,!!o.multiple,o.multiple?[]:"",!1))}a[fa]=o}catch(n){Bs(e,e.return,n)}}break;case 6:if(hu(n,e),vu(e),4&r){if(null===e.stateNode)throw Error(l(162));a=e.stateNode,o=e.memoizedProps;try{a.nodeValue=o}catch(n){Bs(e,e.return,n)}}break;case 3:if(hu(n,e),vu(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{Hn(n.containerInfo)}catch(n){Bs(e,e.return,n)}break;case 4:default:hu(n,e),vu(e);break;case 13:hu(n,e),vu(e),8192&(a=e.child).flags&&(o=null!==a.memoizedState,a.stateNode.isHidden=o,!o||null!==a.alternate&&null!==a.alternate.memoizedState||($u=Xe())),4&r&&mu(e);break;case 22:if(d=null!==t&&null!==t.memoizedState,1&e.mode?(Xi=(c=Xi)||d,hu(n,e),Xi=c):hu(n,e),vu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&0!=(1&e.mode))for(Ji=e,d=e.child;null!==d;){for(A=Ji=d;null!==Ji;){switch(p=(f=Ji).child,f.tag){case 0:case 11:case 14:case 15:ru(4,f,f.return);break;case 1:eu(f,f.return);var m=f.stateNode;if("function"==typeof m.componentWillUnmount){r=f,t=f.return;try{n=r,m.props=n.memoizedProps,m.state=n.memoizedState,m.componentWillUnmount()}catch(e){Bs(r,t,e)}}break;case 5:eu(f,f.return);break;case 22:if(null!==f.memoizedState){Eu(A);continue}}null!==p?(p.return=f,Ji=p):Eu(A)}d=d.sibling}e:for(d=null,A=e;;){if(5===A.tag){if(null===d){d=A;try{a=A.stateNode,c?"function"==typeof(o=a.style).setProperty?o.setProperty("display","none","important"):o.display="none":(u=A.stateNode,i=null!=(s=A.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",i))}catch(n){Bs(e,e.return,n)}}}else if(6===A.tag){if(null===d)try{A.stateNode.nodeValue=c?"":A.memoizedProps}catch(n){Bs(e,e.return,n)}}else if((22!==A.tag&&23!==A.tag||null===A.memoizedState||A===e)&&null!==A.child){A.child.return=A,A=A.child;continue}if(A===e)break e;for(;null===A.sibling;){if(null===A.return||A.return===e)break e;d===A&&(d=null),A=A.return}d===A&&(d=null),A.sibling.return=A.return,A=A.sibling}}break;case 19:hu(n,e),vu(e),4&r&&mu(e);case 21:}}function vu(e){var n=e.flags;if(2&n){try{e:{for(var t=e.return;null!==t;){if(iu(t)){var r=t;break e}t=t.return}throw Error(l(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(Ae(a,""),r.flags&=-33),cu(e,uu(e),a);break;case 3:case 4:var o=r.stateNode.containerInfo;su(e,uu(e),o);break;default:throw Error(l(161))}}catch(n){Bs(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function bu(e,n,t){Ji=e,yu(e,n,t)}function yu(e,n,t){for(var r=0!=(1&e.mode);null!==Ji;){var a=Ji,l=a.child;if(22===a.tag&&r){var o=null!==a.memoizedState||Ki;if(!o){var i=a.alternate,u=null!==i&&null!==i.memoizedState||Xi;i=Ki;var s=Xi;if(Ki=o,(Xi=u)&&!s)for(Ji=a;null!==Ji;)u=(o=Ji).child,22===o.tag&&null!==o.memoizedState?xu(a):null!==u?(u.return=o,Ji=u):xu(a);for(;null!==l;)Ji=l,yu(l,n,t),l=l.sibling;Ji=a,Ki=i,Xi=s}wu(e)}else 0!=(8772&a.subtreeFlags)&&null!==l?(l.return=a,Ji=l):wu(e)}}function wu(e){for(;null!==Ji;){var n=Ji;if(0!=(8772&n.flags)){var t=n.alternate;try{if(0!=(8772&n.flags))switch(n.tag){case 0:case 11:case 15:Xi||au(5,n);break;case 1:var r=n.stateNode;if(4&n.flags&&!Xi)if(null===t)r.componentDidMount();else{var a=n.elementType===n.type?t.memoizedProps:hl(n.type,t.memoizedProps);r.componentDidUpdate(a,t.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var o=n.updateQueue;null!==o&&Fl(n,o,r);break;case 3:var i=n.updateQueue;if(null!==i){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}Fl(n,i,t)}break;case 5:var u=n.stateNode;if(null===t&&4&n.flags){t=u;var s=n.memoizedProps;switch(n.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&t.focus();break;case"img":s.src&&(t.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===n.memoizedState){var c=n.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var A=d.dehydrated;null!==A&&Hn(A)}}}break;default:throw Error(l(163))}Xi||512&n.flags&&lu(n)}catch(e){Bs(n,n.return,e)}}if(n===e){Ji=null;break}if(null!==(t=n.sibling)){t.return=n.return,Ji=t;break}Ji=n.return}}function Eu(e){for(;null!==Ji;){var n=Ji;if(n===e){Ji=null;break}var t=n.sibling;if(null!==t){t.return=n.return,Ji=t;break}Ji=n.return}}function xu(e){for(;null!==Ji;){var n=Ji;try{switch(n.tag){case 0:case 11:case 15:var t=n.return;try{au(4,n)}catch(e){Bs(n,t,e)}break;case 1:var r=n.stateNode;if("function"==typeof r.componentDidMount){var a=n.return;try{r.componentDidMount()}catch(e){Bs(n,a,e)}}var l=n.return;try{lu(n)}catch(e){Bs(n,l,e)}break;case 5:var o=n.return;try{lu(n)}catch(e){Bs(n,o,e)}}}catch(e){Bs(n,n.return,e)}if(n===e){Ji=null;break}var i=n.sibling;if(null!==i){i.return=n.return,Ji=i;break}Ji=n.return}}var ku,Bu=Math.ceil,Su=y.ReactCurrentDispatcher,Cu=y.ReactCurrentOwner,Pu=y.ReactCurrentBatchConfig,Nu=0,Tu=null,Du=null,Lu=0,Iu=0,_u=ka(0),Mu=0,Ru=null,zu=0,Fu=0,Ou=0,Uu=null,ju=null,$u=0,Hu=1/0,Wu=null,Vu=!1,Gu=null,Yu=null,qu=!1,Qu=null,Ku=0,Xu=0,Zu=null,Ju=-1,es=0;function ns(){return 0!=(6&Nu)?Xe():-1!==Ju?Ju:Ju=Xe()}function ts(e){return 0==(1&e.mode)?1:0!=(2&Nu)&&0!==Lu?Lu&-Lu:null!==ml.transition?(0===es&&(es=hn()),es):0!==(e=yn)?e:e=void 0===(e=window.event)?16:Xn(e.type)}function rs(e,n,t,r){if(50<Xu)throw Xu=0,Zu=null,Error(l(185));vn(e,t,r),0!=(2&Nu)&&e===Tu||(e===Tu&&(0==(2&Nu)&&(Fu|=t),4===Mu&&us(e,Lu)),as(e,r),1===t&&0===Nu&&0==(1&n.mode)&&(Hu=Xe()+500,Oa&&$a()))}function as(e,n){var t=e.callbackNode;!function(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var o=31-on(l),i=1<<o,u=a[o];-1===u?0!=(i&t)&&0==(i&r)||(a[o]=pn(i,n)):u<=n&&(e.expiredLanes|=i),l&=~i}}(e,n);var r=fn(e,e===Tu?Lu:0);if(0===r)null!==t&&qe(t),e.callbackNode=null,e.callbackPriority=0;else if(n=r&-r,e.callbackPriority!==n){if(null!=t&&qe(t),1===n)0===e.tag?function(e){Oa=!0,ja(e)}(ss.bind(null,e)):ja(ss.bind(null,e)),oa((function(){0==(6&Nu)&&$a()})),t=null;else{switch(wn(r)){case 1:t=Je;break;case 4:t=en;break;case 16:default:t=nn;break;case 536870912:t=rn}t=Ts(t,ls.bind(null,e))}e.callbackPriority=n,e.callbackNode=t}}function ls(e,n){if(Ju=-1,es=0,0!=(6&Nu))throw Error(l(327));var t=e.callbackNode;if(xs()&&e.callbackNode!==t)return null;var r=fn(e,e===Tu?Lu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||n)n=gs(e,r);else{n=r;var a=Nu;Nu|=2;var o=ms();for(Tu===e&&Lu===n||(Wu=null,Hu=Xe()+500,fs(e,n));;)try{bs();break}catch(n){ps(e,n)}wl(),Su.current=o,Nu=a,null!==Du?n=0:(Tu=null,Lu=0,n=Mu)}if(0!==n){if(2===n&&0!==(a=mn(e))&&(r=a,n=os(e,a)),1===n)throw t=Ru,fs(e,0),us(e,r),as(e,Xe()),t;if(6===n)us(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var n=e;;){if(16384&n.flags){var t=n.updateQueue;if(null!==t&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var a=t[r],l=a.getSnapshot;a=a.value;try{if(!ir(l(),a))return!1}catch(e){return!1}}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}(a)&&(2===(n=gs(e,r))&&0!==(o=mn(e))&&(r=o,n=os(e,o)),1===n))throw t=Ru,fs(e,0),us(e,r),as(e,Xe()),t;switch(e.finishedWork=a,e.finishedLanes=r,n){case 0:case 1:throw Error(l(345));case 2:case 5:Es(e,ju,Wu);break;case 3:if(us(e,r),(130023424&r)===r&&10<(n=$u+500-Xe())){if(0!==fn(e,0))break;if(((a=e.suspendedLanes)&r)!==r){ns(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(Es.bind(null,e,ju,Wu),n);break}Es(e,ju,Wu);break;case 4:if(us(e,r),(4194240&r)===r)break;for(n=e.eventTimes,a=-1;0<r;){var i=31-on(r);o=1<<i,(i=n[i])>a&&(a=i),r&=~o}if(r=a,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Bu(r/1960))-r)){e.timeoutHandle=ra(Es.bind(null,e,ju,Wu),r);break}Es(e,ju,Wu);break;default:throw Error(l(329))}}}return as(e,Xe()),e.callbackNode===t?ls.bind(null,e):null}function os(e,n){var t=Uu;return e.current.memoizedState.isDehydrated&&(fs(e,n).flags|=256),2!==(e=gs(e,n))&&(n=ju,ju=t,null!==n&&is(n)),e}function is(e){null===ju?ju=e:ju.push.apply(ju,e)}function us(e,n){for(n&=~Ou,n&=~Fu,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-on(n),r=1<<t;e[t]=-1,n&=~r}}function ss(e){if(0!=(6&Nu))throw Error(l(327));xs();var n=fn(e,0);if(0==(1&n))return as(e,Xe()),null;var t=gs(e,n);if(0!==e.tag&&2===t){var r=mn(e);0!==r&&(n=r,t=os(e,r))}if(1===t)throw t=Ru,fs(e,0),us(e,n),as(e,Xe()),t;if(6===t)throw Error(l(345));return e.finishedWork=e.current.alternate,e.finishedLanes=n,Es(e,ju,Wu),as(e,Xe()),null}function cs(e,n){var t=Nu;Nu|=1;try{return e(n)}finally{0===(Nu=t)&&(Hu=Xe()+500,Oa&&$a())}}function ds(e){null!==Qu&&0===Qu.tag&&0==(6&Nu)&&xs();var n=Nu;Nu|=1;var t=Pu.transition,r=yn;try{if(Pu.transition=null,yn=1,e)return e()}finally{yn=r,Pu.transition=t,0==(6&(Nu=n))&&$a()}}function As(){Iu=_u.current,Ba(_u)}function fs(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,aa(t)),null!==Du)for(t=Du.return;null!==t;){var r=t;switch(nl(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ia();break;case 3:ao(),Ba(Na),Ba(Pa),co();break;case 5:oo(r);break;case 4:ao();break;case 13:case 19:Ba(io);break;case 10:El(r.type._context);break;case 22:case 23:As()}t=t.return}if(Tu=e,Du=e=_s(e.current,null),Lu=Iu=n,Mu=0,Ru=null,Ou=Fu=zu=0,ju=Uu=null,null!==Sl){for(n=0;n<Sl.length;n++)if(null!==(r=(t=Sl[n]).interleaved)){t.interleaved=null;var a=r.next,l=t.pending;if(null!==l){var o=l.next;l.next=a,r.next=o}t.pending=r}Sl=null}return e}function ps(e,n){for(;;){var t=Du;try{if(wl(),Ao.current=oi,vo){for(var r=mo.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}vo=!1}if(po=0,go=ho=mo=null,bo=!1,yo=0,Cu.current=null,null===t||null===t.return){Mu=1,Ru=n,Du=null;break}e:{var o=e,i=t.return,u=t,s=n;if(n=Lu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,d=u,A=d.tag;if(0==(1&d.mode)&&(0===A||11===A||15===A)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var p=gi(i);if(null!==p){p.flags&=-257,vi(p,i,u,0,n),1&p.mode&&hi(o,c,n),s=c;var m=(n=p).updateQueue;if(null===m){var h=new Set;h.add(s),n.updateQueue=h}else m.add(s);break e}if(0==(1&n)){hi(o,c,n),hs();break e}s=Error(l(426))}else if(al&&1&u.mode){var g=gi(i);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),vi(g,i,u,0,n),pl(ci(s,u));break e}}o=s=ci(s,u),4!==Mu&&(Mu=2),null===Uu?Uu=[o]:Uu.push(o),o=i;do{switch(o.tag){case 3:o.flags|=65536,n&=-n,o.lanes|=n,Rl(o,pi(0,s,n));break e;case 1:u=s;var v=o.type,b=o.stateNode;if(0==(128&o.flags)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Yu||!Yu.has(b)))){o.flags|=65536,n&=-n,o.lanes|=n,Rl(o,mi(o,u,n));break e}}o=o.return}while(null!==o)}ws(t)}catch(e){n=e,Du===t&&null!==t&&(Du=t=t.return);continue}break}}function ms(){var e=Su.current;return Su.current=oi,null===e?oi:e}function hs(){0!==Mu&&3!==Mu&&2!==Mu||(Mu=4),null===Tu||0==(268435455&zu)&&0==(268435455&Fu)||us(Tu,Lu)}function gs(e,n){var t=Nu;Nu|=2;var r=ms();for(Tu===e&&Lu===n||(Wu=null,fs(e,n));;)try{vs();break}catch(n){ps(e,n)}if(wl(),Nu=t,Su.current=r,null!==Du)throw Error(l(261));return Tu=null,Lu=0,Mu}function vs(){for(;null!==Du;)ys(Du)}function bs(){for(;null!==Du&&!Qe();)ys(Du)}function ys(e){var n=ku(e.alternate,e,Iu);e.memoizedProps=e.pendingProps,null===n?ws(e):Du=n,Cu.current=null}function ws(e){var n=e;do{var t=n.alternate;if(e=n.return,0==(32768&n.flags)){if(null!==(t=qi(t,n,Iu)))return void(Du=t)}else{if(null!==(t=Qi(t,n)))return t.flags&=32767,void(Du=t);if(null===e)return Mu=6,void(Du=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(n=n.sibling))return void(Du=n);Du=n=e}while(null!==n);0===Mu&&(Mu=5)}function Es(e,n,t){var r=yn,a=Pu.transition;try{Pu.transition=null,yn=1,function(e,n,t,r){do{xs()}while(null!==Qu);if(0!=(6&Nu))throw Error(l(327));t=e.finishedWork;var a=e.finishedLanes;if(null===t)return null;if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(l(177));e.callbackNode=null,e.callbackPriority=0;var o=t.lanes|t.childLanes;if(function(e,n){var t=e.pendingLanes&~n;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=n,e.mutableReadLanes&=n,e.entangledLanes&=n,n=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<t;){var a=31-on(t),l=1<<a;n[a]=0,r[a]=-1,e[a]=-1,t&=~l}}(e,o),e===Tu&&(Du=Tu=null,Lu=0),0==(2064&t.subtreeFlags)&&0==(2064&t.flags)||qu||(qu=!0,Ts(nn,(function(){return xs(),null}))),o=0!=(15990&t.flags),0!=(15990&t.subtreeFlags)||o){o=Pu.transition,Pu.transition=null;var i=yn;yn=1;var u=Nu;Nu|=4,Cu.current=null,function(e,n){if(ea=Vn,fr(e=Ar())){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var a=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,u=-1,s=-1,c=0,d=0,A=e,f=null;n:for(;;){for(var p;A!==t||0!==a&&3!==A.nodeType||(u=i+a),A!==o||0!==r&&3!==A.nodeType||(s=i+r),3===A.nodeType&&(i+=A.nodeValue.length),null!==(p=A.firstChild);)f=A,A=p;for(;;){if(A===e)break n;if(f===t&&++c===a&&(u=i),f===o&&++d===r&&(s=i),null!==(p=A.nextSibling))break;f=(A=f).parentNode}A=p}t=-1===u||-1===s?null:{start:u,end:s}}else t=null}t=t||{start:0,end:0}}else t=null;for(na={focusedElem:e,selectionRange:t},Vn=!1,Ji=n;null!==Ji;)if(e=(n=Ji).child,0!=(1028&n.subtreeFlags)&&null!==e)e.return=n,Ji=e;else for(;null!==Ji;){n=Ji;try{var m=n.alternate;if(0!=(1024&n.flags))switch(n.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var h=m.memoizedProps,g=m.memoizedState,v=n.stateNode,b=v.getSnapshotBeforeUpdate(n.elementType===n.type?h:hl(n.type,h),g);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var y=n.stateNode.containerInfo;1===y.nodeType?y.textContent="":9===y.nodeType&&y.documentElement&&y.removeChild(y.documentElement);break;default:throw Error(l(163))}}catch(e){Bs(n,n.return,e)}if(null!==(e=n.sibling)){e.return=n.return,Ji=e;break}Ji=n.return}m=tu,tu=!1}(e,t),gu(t,e),pr(na),Vn=!!ea,na=ea=null,e.current=t,bu(t,e,a),Ke(),Nu=u,yn=i,Pu.transition=o}else e.current=t;if(qu&&(qu=!1,Qu=e,Ku=a),0===(o=e.pendingLanes)&&(Yu=null),function(e){if(ln&&"function"==typeof ln.onCommitFiberRoot)try{ln.onCommitFiberRoot(an,e,void 0,128==(128&e.current.flags))}catch(e){}}(t.stateNode),as(e,Xe()),null!==n)for(r=e.onRecoverableError,t=0;t<n.length;t++)r((a=n[t]).value,{componentStack:a.stack,digest:a.digest});if(Vu)throw Vu=!1,e=Gu,Gu=null,e;0!=(1&Ku)&&0!==e.tag&&xs(),0!=(1&(o=e.pendingLanes))?e===Zu?Xu++:(Xu=0,Zu=e):Xu=0,$a()}(e,n,t,r)}finally{Pu.transition=a,yn=r}return null}function xs(){if(null!==Qu){var e=wn(Ku),n=Pu.transition,t=yn;try{if(Pu.transition=null,yn=16>e?16:e,null===Qu)var r=!1;else{if(e=Qu,Qu=null,Ku=0,0!=(6&Nu))throw Error(l(331));var a=Nu;for(Nu|=4,Ji=e.current;null!==Ji;){var o=Ji,i=o.child;if(0!=(16&Ji.flags)){var u=o.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Ji=c;null!==Ji;){var d=Ji;switch(d.tag){case 0:case 11:case 15:ru(8,d,o)}var A=d.child;if(null!==A)A.return=d,Ji=A;else for(;null!==Ji;){var f=(d=Ji).sibling,p=d.return;if(ou(d),d===c){Ji=null;break}if(null!==f){f.return=p,Ji=f;break}Ji=p}}}var m=o.alternate;if(null!==m){var h=m.child;if(null!==h){m.child=null;do{var g=h.sibling;h.sibling=null,h=g}while(null!==h)}}Ji=o}}if(0!=(2064&o.subtreeFlags)&&null!==i)i.return=o,Ji=i;else e:for(;null!==Ji;){if(0!=(2048&(o=Ji).flags))switch(o.tag){case 0:case 11:case 15:ru(9,o,o.return)}var v=o.sibling;if(null!==v){v.return=o.return,Ji=v;break e}Ji=o.return}}var b=e.current;for(Ji=b;null!==Ji;){var y=(i=Ji).child;if(0!=(2064&i.subtreeFlags)&&null!==y)y.return=i,Ji=y;else e:for(i=b;null!==Ji;){if(0!=(2048&(u=Ji).flags))try{switch(u.tag){case 0:case 11:case 15:au(9,u)}}catch(e){Bs(u,u.return,e)}if(u===i){Ji=null;break e}var w=u.sibling;if(null!==w){w.return=u.return,Ji=w;break e}Ji=u.return}}if(Nu=a,$a(),ln&&"function"==typeof ln.onPostCommitFiberRoot)try{ln.onPostCommitFiberRoot(an,e)}catch(e){}r=!0}return r}finally{yn=t,Pu.transition=n}}return!1}function ks(e,n,t){e=_l(e,n=pi(0,n=ci(t,n),1),1),n=ns(),null!==e&&(vn(e,1,n),as(e,n))}function Bs(e,n,t){if(3===e.tag)ks(e,e,t);else for(;null!==n;){if(3===n.tag){ks(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Yu||!Yu.has(r))){n=_l(n,e=mi(n,e=ci(t,e),1),1),e=ns(),null!==n&&(vn(n,1,e),as(n,e));break}}n=n.return}}function Ss(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=ns(),e.pingedLanes|=e.suspendedLanes&t,Tu===e&&(Lu&t)===t&&(4===Mu||3===Mu&&(130023424&Lu)===Lu&&500>Xe()-$u?fs(e,0):Ou|=t),as(e,n)}function Cs(e,n){0===n&&(0==(1&e.mode)?n=1:(n=dn,0==(130023424&(dn<<=1))&&(dn=4194304)));var t=ns();null!==(e=Nl(e,n))&&(vn(e,n,t),as(e,t))}function Ps(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),Cs(e,t)}function Ns(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(t=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(l(314))}null!==r&&r.delete(n),Cs(e,t)}function Ts(e,n){return Ye(e,n)}function Ds(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ls(e,n,t,r){return new Ds(e,n,t,r)}function Is(e){return!(!(e=e.prototype)||!e.isReactComponent)}function _s(e,n){var t=e.alternate;return null===t?((t=Ls(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=14680064&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function Ms(e,n,t,r,a,o){var i=2;if(r=e,"function"==typeof e)Is(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case x:return Rs(t.children,a,o,n);case k:i=8,a|=8;break;case B:return(e=Ls(12,t,n,2|a)).elementType=B,e.lanes=o,e;case N:return(e=Ls(13,t,n,a)).elementType=N,e.lanes=o,e;case T:return(e=Ls(19,t,n,a)).elementType=T,e.lanes=o,e;case I:return zs(t,a,o,n);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:i=10;break e;case C:i=9;break e;case P:i=11;break e;case D:i=14;break e;case L:i=16,r=null;break e}throw Error(l(130,null==e?e:typeof e,""))}return(n=Ls(i,t,n,a)).elementType=e,n.type=r,n.lanes=o,n}function Rs(e,n,t,r){return(e=Ls(7,e,r,n)).lanes=t,e}function zs(e,n,t,r){return(e=Ls(22,e,r,n)).elementType=I,e.lanes=t,e.stateNode={isHidden:!1},e}function Fs(e,n,t){return(e=Ls(6,e,null,n)).lanes=t,e}function Os(e,n,t){return(n=Ls(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function Us(e,n,t,r,a){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gn(0),this.expirationTimes=gn(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gn(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function js(e,n,t,r,a,l,o,i,u){return e=new Us(e,n,t,i,u),1===n?(n=1,!0===l&&(n|=8)):n=0,l=Ls(3,null,null,n),e.current=l,l.stateNode=e,l.memoizedState={element:r,isDehydrated:t,cache:null,transitions:null,pendingSuspenseBoundaries:null},Dl(l),e}function $s(e){if(!e)return Ca;e:{if($e(e=e._reactInternals)!==e||1!==e.tag)throw Error(l(170));var n=e;do{switch(n.tag){case 3:n=n.stateNode.context;break e;case 1:if(La(n.type)){n=n.stateNode.__reactInternalMemoizedMergedChildContext;break e}}n=n.return}while(null!==n);throw Error(l(171))}if(1===e.tag){var t=e.type;if(La(t))return Ma(e,t,n)}return n}function Hs(e,n,t,r,a,l,o,i,u){return(e=js(t,r,!0,e,0,l,0,i,u)).context=$s(null),t=e.current,(l=Il(r=ns(),a=ts(t))).callback=null!=n?n:null,_l(t,l,a),e.current.lanes=a,vn(e,a,r),as(e,r),e}function Ws(e,n,t,r){var a=n.current,l=ns(),o=ts(a);return t=$s(t),null===n.context?n.context=t:n.pendingContext=t,(n=Il(l,o)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),null!==(e=_l(a,n,o))&&(rs(e,a,o,l),Ml(e,a,o)),o}function Vs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Gs(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function Ys(e,n){Gs(e,n),(e=e.alternate)&&Gs(e,n)}ku=function(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps||Na.current)yi=!0;else{if(0==(e.lanes&t)&&0==(128&n.flags))return yi=!1,function(e,n,t){switch(n.tag){case 3:Ti(n),fl();break;case 5:lo(n);break;case 1:La(n.type)&&Ra(n);break;case 4:ro(n,n.stateNode.containerInfo);break;case 10:var r=n.type._context,a=n.memoizedProps.value;Sa(gl,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=n.memoizedState))return null!==r.dehydrated?(Sa(io,1&io.current),n.flags|=128,null):0!=(t&n.child.childLanes)?Fi(e,n,t):(Sa(io,1&io.current),null!==(e=Vi(e,n,t))?e.sibling:null);Sa(io,1&io.current);break;case 19:if(r=0!=(t&n.childLanes),0!=(128&e.flags)){if(r)return Hi(e,n,t);n.flags|=128}if(null!==(a=n.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Sa(io,io.current),r)break;return null;case 22:case 23:return n.lanes=0,Bi(e,n,t)}return Vi(e,n,t)}(e,n,t);yi=0!=(131072&e.flags)}else yi=!1,al&&0!=(1048576&n.flags)&&Ja(n,Ga,n.index);switch(n.lanes=0,n.tag){case 2:var r=n.type;Wi(e,n),e=n.pendingProps;var a=Da(n,Pa.current);kl(n,t),a=ko(null,n,r,e,a,t);var o=Bo();return n.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(n.tag=1,n.memoizedState=null,n.updateQueue=null,La(r)?(o=!0,Ra(n)):o=!1,n.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Dl(n),a.updater=jl,n.stateNode=a,a._reactInternals=n,Vl(n,r,e,t),n=Ni(null,n,r,!0,o,t)):(n.tag=0,al&&o&&el(n),wi(null,n,a,t),n=n.child),n;case 16:r=n.elementType;e:{switch(Wi(e,n),e=n.pendingProps,r=(a=r._init)(r._payload),n.type=r,a=n.tag=function(e){if("function"==typeof e)return Is(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===D)return 14}return 2}(r),e=hl(r,e),a){case 0:n=Ci(null,n,r,e,t);break e;case 1:n=Pi(null,n,r,e,t);break e;case 11:n=Ei(null,n,r,e,t);break e;case 14:n=xi(null,n,r,hl(r.type,e),t);break e}throw Error(l(306,r,""))}return n;case 0:return r=n.type,a=n.pendingProps,Ci(e,n,r,a=n.elementType===r?a:hl(r,a),t);case 1:return r=n.type,a=n.pendingProps,Pi(e,n,r,a=n.elementType===r?a:hl(r,a),t);case 3:e:{if(Ti(n),null===e)throw Error(l(387));r=n.pendingProps,a=(o=n.memoizedState).element,Ll(e,n),zl(n,r,null,t);var i=n.memoizedState;if(r=i.element,o.isDehydrated){if(o={element:r,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},n.updateQueue.baseState=o,n.memoizedState=o,256&n.flags){n=Di(e,n,r,t,a=ci(Error(l(423)),n));break e}if(r!==a){n=Di(e,n,r,t,a=ci(Error(l(424)),n));break e}for(rl=sa(n.stateNode.containerInfo.firstChild),tl=n,al=!0,ll=null,t=Xl(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(fl(),r===a){n=Vi(e,n,t);break e}wi(e,n,r,t)}n=n.child}return n;case 5:return lo(n),null===e&&sl(n),r=n.type,a=n.pendingProps,o=null!==e?e.memoizedProps:null,i=a.children,ta(r,a)?i=null:null!==o&&ta(r,o)&&(n.flags|=32),Si(e,n),wi(e,n,i,t),n.child;case 6:return null===e&&sl(n),null;case 13:return Fi(e,n,t);case 4:return ro(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=Kl(n,null,r,t):wi(e,n,r,t),n.child;case 11:return r=n.type,a=n.pendingProps,Ei(e,n,r,a=n.elementType===r?a:hl(r,a),t);case 7:return wi(e,n,n.pendingProps,t),n.child;case 8:case 12:return wi(e,n,n.pendingProps.children,t),n.child;case 10:e:{if(r=n.type._context,a=n.pendingProps,o=n.memoizedProps,i=a.value,Sa(gl,r._currentValue),r._currentValue=i,null!==o)if(ir(o.value,i)){if(o.children===a.children&&!Na.current){n=Vi(e,n,t);break e}}else for(null!==(o=n.child)&&(o.return=n);null!==o;){var u=o.dependencies;if(null!==u){i=o.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===o.tag){(s=Il(-1,t&-t)).tag=2;var c=o.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?s.next=s:(s.next=d.next,d.next=s),c.pending=s}}o.lanes|=t,null!==(s=o.alternate)&&(s.lanes|=t),xl(o.return,t,n),u.lanes|=t;break}s=s.next}}else if(10===o.tag)i=o.type===n.type?null:o.child;else if(18===o.tag){if(null===(i=o.return))throw Error(l(341));i.lanes|=t,null!==(u=i.alternate)&&(u.lanes|=t),xl(i,t,n),i=o.sibling}else i=o.child;if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===n){i=null;break}if(null!==(o=i.sibling)){o.return=i.return,i=o;break}i=i.return}o=i}wi(e,n,a.children,t),n=n.child}return n;case 9:return a=n.type,r=n.pendingProps.children,kl(n,t),r=r(a=Bl(a)),n.flags|=1,wi(e,n,r,t),n.child;case 14:return a=hl(r=n.type,n.pendingProps),xi(e,n,r,a=hl(r.type,a),t);case 15:return ki(e,n,n.type,n.pendingProps,t);case 17:return r=n.type,a=n.pendingProps,a=n.elementType===r?a:hl(r,a),Wi(e,n),n.tag=1,La(r)?(e=!0,Ra(n)):e=!1,kl(n,t),Hl(n,r,a),Vl(n,r,a,t),Ni(null,n,r,!0,e,t);case 19:return Hi(e,n,t);case 22:return Bi(e,n,t)}throw Error(l(156,n.tag))};var qs="function"==typeof reportError?reportError:function(e){console.error(e)};function Qs(e){this._internalRoot=e}function Ks(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Js(){}function ec(e,n,t,r,a){var l=t._reactRootContainer;if(l){var o=l;if("function"==typeof a){var i=a;a=function(){var e=Vs(o);i.call(e)}}Ws(n,o,e,a)}else o=function(e,n,t,r,a){if(a){if("function"==typeof r){var l=r;r=function(){var e=Vs(o);l.call(e)}}var o=Hs(n,r,e,0,null,!1,0,"",Js);return e._reactRootContainer=o,e[pa]=o.current,$r(8===e.nodeType?e.parentNode:e),ds(),o}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var i=r;r=function(){var e=Vs(u);i.call(e)}}var u=js(e,0,!1,null,0,!1,0,"",Js);return e._reactRootContainer=u,e[pa]=u.current,$r(8===e.nodeType?e.parentNode:e),ds((function(){Ws(n,u,t,r)})),u}(t,n,e,a,r);return Vs(o)}Ks.prototype.render=Qs.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(l(409));Ws(e,n,null,null)},Ks.prototype.unmount=Qs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;ds((function(){Ws(null,e,null,null)})),n[pa]=null}},Ks.prototype.unstable_scheduleHydration=function(e){if(e){var n=Bn();e={blockedOn:null,target:e,priority:n};for(var t=0;t<_n.length&&0!==n&&n<_n[t].priority;t++);_n.splice(t,0,e),0===t&&Fn(e)}},En=function(e){switch(e.tag){case 3:var n=e.stateNode;if(n.current.memoizedState.isDehydrated){var t=An(n.pendingLanes);0!==t&&(bn(n,1|t),as(n,Xe()),0==(6&Nu)&&(Hu=Xe()+500,$a()))}break;case 13:ds((function(){var n=Nl(e,1);if(null!==n){var t=ns();rs(n,e,1,t)}})),Ys(e,1)}},xn=function(e){if(13===e.tag){var n=Nl(e,134217728);null!==n&&rs(n,e,134217728,ns()),Ys(e,134217728)}},kn=function(e){if(13===e.tag){var n=ts(e),t=Nl(e,n);null!==t&&rs(t,e,n,ns()),Ys(e,n)}},Bn=function(){return yn},Sn=function(e,n){var t=yn;try{return yn=e,n()}finally{yn=t}},Ee=function(e,n,t){switch(n){case"input":if(Z(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var a=wa(r);if(!a)throw Error(l(90));Y(r),Z(r,a)}}}break;case"textarea":le(e,t);break;case"select":null!=(n=t.value)&&te(e,!!t.multiple,n,!1)}},Pe=cs,Ne=ds;var nc={usingClientEntryPoint:!1,Events:[ba,ya,wa,Se,Ce,cs]},tc={findFiberByHostInstance:va,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ac=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ac.isDisabled&&ac.supportsFiber)try{an=ac.inject(rc),ln=ac}catch(ce){}}n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nc,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(n))throw Error(l(200));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.createRoot=function(e,n){if(!Xs(e))throw Error(l(299));var t=!1,r="",a=qs;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onRecoverableError&&(a=n.onRecoverableError)),n=js(e,1,!1,null,0,t,0,r,a),e[pa]=n.current,$r(8===e.nodeType?e.parentNode:e),new Qs(n)},n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(l(188));throw e=Object.keys(e).join(","),Error(l(268,e))}return null===(e=Ve(n))?null:e.stateNode},n.flushSync=function(e){return ds(e)},n.hydrate=function(e,n,t){if(!Zs(n))throw Error(l(200));return ec(null,e,n,!0,t)},n.hydrateRoot=function(e,n,t){if(!Xs(e))throw Error(l(405));var r=null!=t&&t.hydratedSources||null,a=!1,o="",i=qs;if(null!=t&&(!0===t.unstable_strictMode&&(a=!0),void 0!==t.identifierPrefix&&(o=t.identifierPrefix),void 0!==t.onRecoverableError&&(i=t.onRecoverableError)),n=Hs(n,null,e,1,null!=t?t:null,a,0,o,i),e[pa]=n.current,$r(e),r)for(e=0;e<r.length;e++)a=(a=(t=r[e])._getVersion)(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a);return new Ks(n)},n.render=function(e,n,t){if(!Zs(n))throw Error(l(200));return ec(null,e,n,!1,t)},n.unmountComponentAtNode=function(e){if(!Zs(e))throw Error(l(40));return!!e._reactRootContainer&&(ds((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[pa]=null}))})),!0)},n.unstable_batchedUpdates=cs,n.unstable_renderSubtreeIntoContainer=function(e,n,t,r){if(!Zs(t))throw Error(l(200));if(null==e||void 0===e._reactInternals)throw Error(l(38));return ec(e,n,t,!1,r)},n.version="18.2.0-next-9e3b772b8-20220608"},745:(e,n,t)=>{var r=t(935);n.s=r.createRoot,r.hydrateRoot},935:(e,n,t)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(448)},408:(e,n)=>{var t=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),A=Symbol.for("react.lazy"),f=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,h={};function g(e,n,t){this.props=e,this.context=n,this.refs=h,this.updater=t||p}function v(){}function b(e,n,t){this.props=e,this.context=n,this.refs=h,this.updater=t||p}g.prototype.isReactComponent={},g.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=g.prototype;var y=b.prototype=new v;y.constructor=b,m(y,g.prototype),y.isPureReactComponent=!0;var w=Array.isArray,E=Object.prototype.hasOwnProperty,x={current:null},k={key:!0,ref:!0,__self:!0,__source:!0};function B(e,n,r){var a,l={},o=null,i=null;if(null!=n)for(a in void 0!==n.ref&&(i=n.ref),void 0!==n.key&&(o=""+n.key),n)E.call(n,a)&&!k.hasOwnProperty(a)&&(l[a]=n[a]);var u=arguments.length-2;if(1===u)l.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];l.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===l[a]&&(l[a]=u[a]);return{$$typeof:t,type:e,key:o,ref:i,props:l,_owner:x.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var C=/\/+/g;function P(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function N(e,n,a,l,o){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case t:case r:u=!0}}if(u)return o=o(u=e),e=""===l?"."+P(u,0):l,w(o)?(a="",null!=e&&(a=e.replace(C,"$&/")+"/"),N(o,n,a,"",(function(e){return e}))):null!=o&&(S(o)&&(o=function(e,n){return{$$typeof:t,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(o,a+(!o.key||u&&u.key===o.key?"":(""+o.key).replace(C,"$&/")+"/")+e)),n.push(o)),1;if(u=0,l=""===l?".":l+":",w(e))for(var s=0;s<e.length;s++){var c=l+P(i=e[s],s);u+=N(i,n,a,c,o)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(i=e.next()).done;)u+=N(i=i.value,n,a,c=l+P(i,s++),o);else if("object"===i)throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.");return u}function T(e,n,t){if(null==e)return e;var r=[],a=0;return N(e,r,"","",(function(e){return n.call(t,e,a++)})),r}function D(e){if(-1===e._status){var n=e._result;(n=n()).then((function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)}),(function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)})),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var L={current:null},I={transition:null},_={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:I,ReactCurrentOwner:x};n.Children={map:T,forEach:function(e,n,t){T(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return T(e,(function(){n++})),n},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=g,n.Fragment=a,n.Profiler=o,n.PureComponent=b,n.StrictMode=l,n.Suspense=c,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=_,n.cloneElement=function(e,n,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=m({},e.props),l=e.key,o=e.ref,i=e._owner;if(null!=n){if(void 0!==n.ref&&(o=n.ref,i=x.current),void 0!==n.key&&(l=""+n.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in n)E.call(n,s)&&!k.hasOwnProperty(s)&&(a[s]=void 0===n[s]&&void 0!==u?u[s]:n[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:t,type:e.type,key:l,ref:o,props:a,_owner:i}},n.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},n.createElement=B,n.createFactory=function(e){var n=B.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:s,render:e}},n.isValidElement=S,n.lazy=function(e){return{$$typeof:A,_payload:{_status:-1,_result:e},_init:D}},n.memo=function(e,n){return{$$typeof:d,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=I.transition;I.transition={};try{e()}finally{I.transition=n}},n.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},n.useCallback=function(e,n){return L.current.useCallback(e,n)},n.useContext=function(e){return L.current.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e){return L.current.useDeferredValue(e)},n.useEffect=function(e,n){return L.current.useEffect(e,n)},n.useId=function(){return L.current.useId()},n.useImperativeHandle=function(e,n,t){return L.current.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return L.current.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return L.current.useLayoutEffect(e,n)},n.useMemo=function(e,n){return L.current.useMemo(e,n)},n.useReducer=function(e,n,t){return L.current.useReducer(e,n,t)},n.useRef=function(e){return L.current.useRef(e)},n.useState=function(e){return L.current.useState(e)},n.useSyncExternalStore=function(e,n,t){return L.current.useSyncExternalStore(e,n,t)},n.useTransition=function(){return L.current.useTransition()},n.version="18.2.0"},294:(e,n,t)=>{e.exports=t(408)},53:(e,n)=>{function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,a=e[r];if(!(0<l(a,n)))break e;e[r]=n,e[t]=a,t=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,a=e.length,o=a>>>1;r<o;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>l(u,t))s<a&&0>l(c,u)?(e[r]=c,e[s]=t,r=s):(e[r]=u,e[i]=t,r=i);else{if(!(s<a&&0>l(c,t)))break e;e[r]=c,e[s]=t,r=s}}}return n}function l(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;n.unstable_now=function(){return o.now()}}else{var i=Date,u=i.now();n.unstable_now=function(){return i.now()-u}}var s=[],c=[],d=1,A=null,f=3,p=!1,m=!1,h=!1,g="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function y(e){for(var n=r(c);null!==n;){if(null===n.callback)a(c);else{if(!(n.startTime<=e))break;a(c),n.sortIndex=n.expirationTime,t(s,n)}n=r(c)}}function w(e){if(h=!1,y(e),!m)if(null!==r(s))m=!0,I(E);else{var n=r(c);null!==n&&_(w,n.startTime-e)}}function E(e,t){m=!1,h&&(h=!1,v(S),S=-1),p=!0;var l=f;try{for(y(t),A=r(s);null!==A&&(!(A.expirationTime>t)||e&&!N());){var o=A.callback;if("function"==typeof o){A.callback=null,f=A.priorityLevel;var i=o(A.expirationTime<=t);t=n.unstable_now(),"function"==typeof i?A.callback=i:A===r(s)&&a(s),y(t)}else a(s);A=r(s)}if(null!==A)var u=!0;else{var d=r(c);null!==d&&_(w,d.startTime-t),u=!1}return u}finally{A=null,f=l,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,k=!1,B=null,S=-1,C=5,P=-1;function N(){return!(n.unstable_now()-P<C)}function T(){if(null!==B){var e=n.unstable_now();P=e;var t=!0;try{t=B(!0,e)}finally{t?x():(k=!1,B=null)}}else k=!1}if("function"==typeof b)x=function(){b(T)};else if("undefined"!=typeof MessageChannel){var D=new MessageChannel,L=D.port2;D.port1.onmessage=T,x=function(){L.postMessage(null)}}else x=function(){g(T,0)};function I(e){B=e,k||(k=!0,x())}function _(e,t){S=g((function(){e(n.unstable_now())}),t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){m||p||(m=!0,I(E))},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return f},n.unstable_getFirstCallbackNode=function(){return r(s)},n.unstable_next=function(e){switch(f){case 1:case 2:case 3:var n=3;break;default:n=f}var t=f;f=n;try{return e()}finally{f=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=function(){},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=f;f=e;try{return n()}finally{f=t}},n.unstable_scheduleCallback=function(e,a,l){var o=n.unstable_now();switch(l="object"==typeof l&&null!==l&&"number"==typeof(l=l.delay)&&0<l?o+l:o,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:l,expirationTime:i=l+i,sortIndex:-1},l>o?(e.sortIndex=l,t(c,e),null===r(s)&&e===r(c)&&(h?(v(S),S=-1):h=!0,_(w,l-o))):(e.sortIndex=i,t(s,e),m||p||(m=!0,I(E))),e},n.unstable_shouldYield=N,n.unstable_wrapCallback=function(e){var n=f;return function(){var t=f;f=n;try{return e.apply(this,arguments)}finally{f=t}}}},840:(e,n,t)=>{e.exports=t(53)},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var l={},o=[],i=0;i<e.length;i++){var u=e[i],s=r.base?u[0]+r.base:u[0],c=l[s]||0,d="".concat(s," ").concat(c);l[s]=c+1;var A=t(d),f={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==A)n[A].references++,n[A].updater(f);else{var p=a(f,r);r.byIndex=i,n.splice(i,0,{identifier:d,updater:p,references:1})}o.push(d)}return o}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var l=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<l.length;o++){var i=t(l[o]);n[i].references--}for(var u=r(e,a),s=0;s<l.length;s++){var c=t(l[s]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}l=u}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var l=t.sourceMap;l&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},66:(e,n,t)=>{var r,a=t(294),l=t.t(a,2),o=t(745),i=t(379),u=t.n(i),s=t(795),c=t.n(s),d=t(569),A=t.n(d),f=t(565),p=t.n(f),m=t(216),h=t.n(m),g=t(589),v=t.n(g),b=t(383),y={};function w(){return w=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},w.apply(this,arguments)}y.styleTagTransform=v(),y.setAttributes=p(),y.insert=A().bind(null,"head"),y.domAPI=c(),y.insertStyleElement=h(),u()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals,function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(r||(r={}));const E="popstate";function x(e,n){if(!1===e||null==e)throw new Error(n)}function k(e,n){if(!e){"undefined"!=typeof console&&console.warn(n);try{throw new Error(n)}catch(e){}}}function B(e,n){return{usr:e.state,key:e.key,idx:n}}function S(e,n,t,r){return void 0===t&&(t=null),w({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof n?P(n):n,{state:t,key:n&&n.key||r||Math.random().toString(36).substr(2,8)})}function C(e){let{pathname:n="/",search:t="",hash:r=""}=e;return t&&"?"!==t&&(n+="?"===t.charAt(0)?t:"?"+t),r&&"#"!==r&&(n+="#"===r.charAt(0)?r:"#"+r),n}function P(e){let n={};if(e){let t=e.indexOf("#");t>=0&&(n.hash=e.substr(t),e=e.substr(0,t));let r=e.indexOf("?");r>=0&&(n.search=e.substr(r),e=e.substr(0,r)),e&&(n.pathname=e)}return n}var N;function T(e,n,t){void 0===t&&(t="/");let r=W(("string"==typeof n?P(n):n).pathname||"/",t);if(null==r)return null;let a=D(e);!function(e){e.sort(((e,n)=>e.score!==n.score?n.score-e.score:function(e,n){let t=e.length===n.length&&e.slice(0,-1).every(((e,t)=>e===n[t]));return t?e[e.length-1]-n[n.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),n.routesMeta.map((e=>e.childrenIndex)))))}(a);let l=null;for(let e=0;null==l&&e<a.length;++e)l=j(a[e],H(r));return l}function D(e,n,t,r){void 0===n&&(n=[]),void 0===t&&(t=[]),void 0===r&&(r="");let a=(e,a,l)=>{let o={relativePath:void 0===l?e.path||"":l,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};o.relativePath.startsWith("/")&&(x(o.relativePath.startsWith(r),'Absolute route path "'+o.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),o.relativePath=o.relativePath.slice(r.length));let i=V([r,o.relativePath]),u=t.concat(o);e.children&&e.children.length>0&&(x(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+i+'".'),D(e.children,n,u,i)),(null!=e.path||e.index)&&n.push({path:i,score:U(i,e.index),routesMeta:u})};return e.forEach(((e,n)=>{var t;if(""!==e.path&&null!=(t=e.path)&&t.includes("?"))for(let t of L(e.path))a(e,n,t);else a(e,n)})),n}function L(e){let n=e.split("/");if(0===n.length)return[];let[t,...r]=n,a=t.endsWith("?"),l=t.replace(/\?$/,"");if(0===r.length)return a?[l,""]:[l];let o=L(r.join("/")),i=[];return i.push(...o.map((e=>""===e?l:[l,e].join("/")))),a&&i.push(...o),i.map((n=>e.startsWith("/")&&""===n?"/":n))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(N||(N={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const I=/^:\w+$/,_=3,M=2,R=1,z=10,F=-2,O=e=>"*"===e;function U(e,n){let t=e.split("/"),r=t.length;return t.some(O)&&(r+=F),n&&(r+=M),t.filter((e=>!O(e))).reduce(((e,n)=>e+(I.test(n)?_:""===n?R:z)),r)}function j(e,n){let{routesMeta:t}=e,r={},a="/",l=[];for(let e=0;e<t.length;++e){let o=t[e],i=e===t.length-1,u="/"===a?n:n.slice(a.length)||"/",s=$({path:o.relativePath,caseSensitive:o.caseSensitive,end:i},u);if(!s)return null;Object.assign(r,s.params);let c=o.route;l.push({params:r,pathname:V([a,s.pathname]),pathnameBase:G(V([a,s.pathnameBase])),route:c}),"/"!==s.pathnameBase&&(a=V([a,s.pathnameBase]))}return l}function $(e,n){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[t,r]=function(e,n,t){void 0===n&&(n=!1),void 0===t&&(t=!0),k("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,n)=>(r.push(n),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):t?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,n?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=n.match(t);if(!a)return null;let l=a[0],o=l.replace(/(.)\/+$/,"$1"),i=a.slice(1);return{params:r.reduce(((e,n,t)=>{if("*"===n){let e=i[t]||"";o=l.slice(0,l.length-e.length).replace(/(.)\/+$/,"$1")}return e[n]=function(e,n){try{return decodeURIComponent(e)}catch(t){return k(!1,'The value for the URL param "'+n+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}(i[t]||"",n),e}),{}),pathname:l,pathnameBase:o,pattern:e}}function H(e){try{return decodeURI(e)}catch(n){return k(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}function W(e,n){if("/"===n)return e;if(!e.toLowerCase().startsWith(n.toLowerCase()))return null;let t=n.endsWith("/")?n.length-1:n.length,r=e.charAt(t);return r&&"/"!==r?null:e.slice(t)||"/"}const V=e=>e.join("/").replace(/\/\/+/g,"/"),G=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/");Error;const Y=["post","put","patch","delete"],q=(new Set(Y),["get",...Y]);function Q(){return Q=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},Q.apply(this,arguments)}new Set(q),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const K=a.createContext(null),X=a.createContext(null),Z=a.createContext(null),J=a.createContext(null),ee=a.createContext({outlet:null,matches:[],isDataRoute:!1}),ne=a.createContext(null);function te(){return null!=a.useContext(J)}function re(e,n,t){te()||x(!1);let{navigator:l}=a.useContext(Z),{matches:o}=a.useContext(ee),i=o[o.length-1],u=i?i.params:{},s=(i&&i.pathname,i?i.pathnameBase:"/");i&&i.route;let c,d=(te()||x(!1),a.useContext(J).location);if(n){var A;let e="string"==typeof n?P(n):n;"/"===s||(null==(A=e.pathname)?void 0:A.startsWith(s))||x(!1),c=e}else c=d;let f=c.pathname||"/",p=T(e,{pathname:"/"===s?f:f.slice(s.length)||"/"}),m=function(e,n,t){var r;if(void 0===n&&(n=[]),void 0===t&&(t=null),null==e){var l;if(null==(l=t)||!l.errors)return null;e=t.matches}let o=e,i=null==(r=t)?void 0:r.errors;if(null!=i){let e=o.findIndex((e=>e.route.id&&(null==i?void 0:i[e.route.id])));e>=0||x(!1),o=o.slice(0,Math.min(o.length,e+1))}return o.reduceRight(((e,r,l)=>{let u=r.route.id?null==i?void 0:i[r.route.id]:null,s=null;t&&(s=r.route.errorElement||le);let c=n.concat(o.slice(0,l+1)),d=()=>{let n;return n=u?s:r.route.Component?a.createElement(r.route.Component,null):r.route.element?r.route.element:e,a.createElement(ie,{match:r,routeContext:{outlet:e,matches:c,isDataRoute:null!=t},children:n})};return t&&(r.route.ErrorBoundary||r.route.errorElement||0===l)?a.createElement(oe,{location:t.location,revalidation:t.revalidation,component:s,error:u,children:d(),routeContext:{outlet:null,matches:c,isDataRoute:!0}}):d()}),null)}(p&&p.map((e=>Object.assign({},e,{params:Object.assign({},u,e.params),pathname:V([s,l.encodeLocation?l.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?s:V([s,l.encodeLocation?l.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),o,t);return n&&m?a.createElement(J.Provider,{value:{location:Q({pathname:"/",search:"",hash:"",state:null,key:"default"},c),navigationType:r.Pop}},m):m}function ae(){let e=function(){var e;let n=a.useContext(ne),t=function(e){let n=a.useContext(X);return n||x(!1),n}(se.UseRouteError),r=function(e){let n=function(e){let n=a.useContext(ee);return n||x(!1),n}(),t=n.matches[n.matches.length-1];return t.route.id||x(!1),t.route.id}(se.UseRouteError);return n||(null==(e=t.errors)?void 0:e[r])}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),t=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return a.createElement(a.Fragment,null,a.createElement("h2",null,"Unexpected Application Error!"),a.createElement("h3",{style:{fontStyle:"italic"}},n),t?a.createElement("pre",{style:r},t):null,null)}const le=a.createElement(ae,null);class oe extends a.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,n){return n.location!==e.location||"idle"!==n.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||n.error,location:n.location,revalidation:e.revalidation||n.revalidation}}componentDidCatch(e,n){console.error("React Router caught the following error during render",e,n)}render(){return this.state.error?a.createElement(ee.Provider,{value:this.props.routeContext},a.createElement(ne.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function ie(e){let{routeContext:n,match:t,children:r}=e,l=a.useContext(K);return l&&l.static&&l.staticContext&&(t.route.errorElement||t.route.ErrorBoundary)&&(l.staticContext._deepestRenderedBoundaryId=t.route.id),a.createElement(ee.Provider,{value:n},r)}var ue,se,ce;function de(e){x(!1)}function Ae(e){let{basename:n="/",children:t=null,location:l,navigationType:o=r.Pop,navigator:i,static:u=!1}=e;te()&&x(!1);let s=n.replace(/^\/*/,"/"),c=a.useMemo((()=>({basename:s,navigator:i,static:u})),[s,i,u]);"string"==typeof l&&(l=P(l));let{pathname:d="/",search:A="",hash:f="",state:p=null,key:m="default"}=l,h=a.useMemo((()=>{let e=W(d,s);return null==e?null:{location:{pathname:e,search:A,hash:f,state:p,key:m},navigationType:o}}),[s,d,A,f,p,m,o]);return null==h?null:a.createElement(Z.Provider,{value:c},a.createElement(J.Provider,{children:t,value:h}))}function fe(e){let{children:n,location:t}=e;return re(pe(n),t)}function pe(e,n){void 0===n&&(n=[]);let t=[];return a.Children.forEach(e,((e,r)=>{if(!a.isValidElement(e))return;let l=[...n,r];if(e.type===a.Fragment)return void t.push.apply(t,pe(e.props.children,l));e.type!==de&&x(!1),e.props.index&&e.props.children&&x(!1);let o={id:e.props.id||l.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(o.children=pe(e.props.children,l)),t.push(o)})),t}!function(e){e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate"}(ue||(ue={})),function(e){e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId"}(se||(se={})),l.startTransition,function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(ce||(ce={})),new Promise((()=>{})),a.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const me=l.startTransition;function he(e){let{basename:n,children:t,future:l,window:o}=e,i=a.useRef();null==i.current&&(i.current=function(e){return void 0===e&&(e={}),function(e,n,t,a){void 0===a&&(a={});let{window:l=document.defaultView,v5Compat:o=!1}=a,i=l.history,u=r.Pop,s=null,c=d();function d(){return(i.state||{idx:null}).idx}function A(){u=r.Pop;let e=d(),n=null==e?null:e-c;c=e,s&&s({action:u,location:p.location,delta:n})}function f(e){let n="null"!==l.location.origin?l.location.origin:l.location.href,t="string"==typeof e?e:C(e);return x(n,"No window.location.(origin|href) available to create URL for href: "+t),new URL(t,n)}null==c&&(c=0,i.replaceState(w({},i.state,{idx:c}),""));let p={get action(){return u},get location(){return e(l,i)},listen(e){if(s)throw new Error("A history only accepts one active listener");return l.addEventListener(E,A),s=e,()=>{l.removeEventListener(E,A),s=null}},createHref:e=>n(l,e),createURL:f,encodeLocation(e){let n=f(e);return{pathname:n.pathname,search:n.search,hash:n.hash}},push:function(e,n){u=r.Push;let a=S(p.location,e,n);t&&t(a,e),c=d()+1;let A=B(a,c),f=p.createHref(a);try{i.pushState(A,"",f)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;l.location.assign(f)}o&&s&&s({action:u,location:p.location,delta:1})},replace:function(e,n){u=r.Replace;let a=S(p.location,e,n);t&&t(a,e),c=d();let l=B(a,c),A=p.createHref(a);i.replaceState(l,"",A),o&&s&&s({action:u,location:p.location,delta:0})},go:e=>i.go(e)};return p}((function(e,n){let{pathname:t,search:r,hash:a}=e.location;return S("",{pathname:t,search:r,hash:a},n.state&&n.state.usr||null,n.state&&n.state.key||"default")}),(function(e,n){return"string"==typeof n?n:C(n)}),null,e)}({window:o,v5Compat:!0}));let u=i.current,[s,c]=a.useState({action:u.action,location:u.location}),{v7_startTransition:d}=l||{},A=a.useCallback((e=>{d&&me?me((()=>c(e))):c(e)}),[c,d]);return a.useLayoutEffect((()=>u.listen(A)),[u,A]),a.createElement(Ae,{basename:n,children:t,location:s.location,navigationType:s.action,navigator:u})}var ge,ve;function be(e,n,...t){if(e in n){let r=n[e];return"function"==typeof r?r(...t):r}let r=new Error(`Tried to handle "${e}" but there is no handler defined. Only defined handlers are: ${Object.keys(n).map((e=>`"${e}"`)).join(", ")}.`);throw Error.captureStackTrace&&Error.captureStackTrace(r,be),r}function ye(...e){return e.filter(Boolean).join(" ")}"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement,function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher"}(ge||(ge={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(ve||(ve={}));var we,Ee=((we=Ee||{})[we.None=0]="None",we[we.RenderStrategy=1]="RenderStrategy",we[we.Static=2]="Static",we),xe=(e=>(e[e.Unmount=0]="Unmount",e[e.Hidden=1]="Hidden",e))(xe||{});function ke({ourProps:e,theirProps:n,slot:t,defaultTag:r,features:a,visible:l=!0,name:o}){let i=Se(n,e);if(l)return Be(i,t,r,o);let u=null!=a?a:0;if(2&u){let{static:e=!1,...n}=i;if(e)return Be(n,t,r,o)}if(1&u){let{unmount:e=!0,...n}=i;return be(e?0:1,{0:()=>null,1:()=>Be({...n,hidden:!0,style:{display:"none"}},t,r,o)})}return Be(i,t,r,o)}function Be(e,n={},t,r){let{as:l=t,children:o,refName:i="ref",...u}=Ne(e,["unmount","static"]),s=void 0!==e.ref?{[i]:e.ref}:{},c="function"==typeof o?o(n):o;"className"in u&&u.className&&"function"==typeof u.className&&(u.className=u.className(n));let d={};if(n){let e=!1,t=[];for(let[r,a]of Object.entries(n))"boolean"==typeof a&&(e=!0),!0===a&&t.push(r);e&&(d["data-headlessui-state"]=t.join(" "))}if(l===a.Fragment&&Object.keys(Pe(u)).length>0){if(!(0,a.isValidElement)(c)||Array.isArray(c)&&c.length>1)throw new Error(['Passing props on "Fragment"!',"",`The current component <${r} /> is rendering a "Fragment".`,"However we need to passthrough the following props:",Object.keys(u).map((e=>`  - ${e}`)).join("\n"),"","You can apply a few solutions:",['Add an `as="..."` prop, to ensure that we render an actual element instead of a "Fragment".',"Render a single element as the child so that we can forward the props onto that element."].map((e=>`  - ${e}`)).join("\n")].join("\n"));let e=c.props,n="function"==typeof(null==e?void 0:e.className)?(...n)=>ye(null==e?void 0:e.className(...n),u.className):ye(null==e?void 0:e.className,u.className),t=n?{className:n}:{};return(0,a.cloneElement)(c,Object.assign({},Se(c.props,Pe(Ne(u,["ref"]))),d,s,function(...e){return{ref:e.every((e=>null==e))?void 0:n=>{for(let t of e)null!=t&&("function"==typeof t?t(n):t.current=n)}}}(c.ref,s.ref),t))}return(0,a.createElement)(l,Object.assign({},Ne(u,["ref"]),l!==a.Fragment&&s,l!==a.Fragment&&d),c)}function Se(...e){if(0===e.length)return{};if(1===e.length)return e[0];let n={},t={};for(let r of e)for(let e in r)e.startsWith("on")&&"function"==typeof r[e]?(null!=t[e]||(t[e]=[]),t[e].push(r[e])):n[e]=r[e];if(n.disabled||n["aria-disabled"])return Object.assign(n,Object.fromEntries(Object.keys(t).map((e=>[e,void 0]))));for(let e in t)Object.assign(n,{[e](n,...r){let a=t[e];for(let e of a){if((n instanceof Event||(null==n?void 0:n.nativeEvent)instanceof Event)&&n.defaultPrevented)return;e(n,...r)}}});return n}function Ce(e){var n;return Object.assign((0,a.forwardRef)(e),{displayName:null!=(n=e.displayName)?n:e.name})}function Pe(e){let n=Object.assign({},e);for(let e in n)void 0===n[e]&&delete n[e];return n}function Ne(e,n=[]){let t=Object.assign({},e);for(let e of n)e in t&&delete t[e];return t}var Te=Object.defineProperty,De=(e,n,t)=>(((e,n,t)=>{n in e?Te(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t})(e,"symbol"!=typeof n?n+"":n,t),t);let Le=new class{constructor(){De(this,"current",this.detect()),De(this,"handoffState","pending"),De(this,"currentId",0)}set(e){this.current!==e&&(this.handoffState="pending",this.currentId=0,this.current=e)}reset(){this.set(this.detect())}nextId(){return++this.currentId}get isServer(){return"server"===this.current}get isClient(){return"client"===this.current}detect(){return"undefined"==typeof window||"undefined"==typeof document?"server":"client"}handoff(){"pending"===this.handoffState&&(this.handoffState="complete")}get isHandoffComplete(){return"complete"===this.handoffState}},Ie=(e,n)=>{Le.isServer?(0,a.useEffect)(e,n):(0,a.useLayoutEffect)(e,n)};function _e(e){let n=(0,a.useRef)(e);return Ie((()=>{n.current=e}),[e]),n}let Me=function(e){let n=_e(e);return a.useCallback(((...e)=>n.current(...e)),[n])},Re=Symbol();function ze(e,n=!0){return Object.assign(e,{[Re]:n})}function Fe(...e){let n=(0,a.useRef)(e);(0,a.useEffect)((()=>{n.current=e}),[e]);let t=Me((e=>{for(let t of n.current)null!=t&&("function"==typeof t?t(e):t.current=e)}));return e.every((e=>null==e||(null==e?void 0:e[Re])))?void 0:t}function Oe(){let[e,n]=(0,a.useState)(Le.isHandoffComplete);return e&&!1===Le.isHandoffComplete&&n(!1),(0,a.useEffect)((()=>{!0!==e&&n(!0)}),[e]),(0,a.useEffect)((()=>Le.handoff()),[]),e}var Ue;let je=null!=(Ue=a.useId)?Ue:function(){let e=Oe(),[n,t]=a.useState(e?()=>Le.nextId():null);return Ie((()=>{null===n&&t(Le.nextId())}),[n]),null!=n?""+n:void 0};var $e=(e=>(e.Space=" ",e.Enter="Enter",e.Escape="Escape",e.Backspace="Backspace",e.Delete="Delete",e.ArrowLeft="ArrowLeft",e.ArrowUp="ArrowUp",e.ArrowRight="ArrowRight",e.ArrowDown="ArrowDown",e.Home="Home",e.End="End",e.PageUp="PageUp",e.PageDown="PageDown",e.Tab="Tab",e))($e||{});function He(e){let n=e.parentElement,t=null;for(;n&&!(n instanceof HTMLFieldSetElement);)n instanceof HTMLLegendElement&&(t=n),n=n.parentElement;let r=""===(null==n?void 0:n.getAttribute("disabled"));return(!r||!function(e){if(!e)return!1;let n=e.previousElementSibling;for(;null!==n;){if(n instanceof HTMLLegendElement)return!1;n=n.previousElementSibling}return!0}(t))&&r}function We(e){return Le.isServer?null:e instanceof Node?e.ownerDocument:null!=e&&e.hasOwnProperty("current")&&e.current instanceof Node?e.current.ownerDocument:document}let Ve=["[contentEditable=true]","[tabindex]","a[href]","area[href]","button:not([disabled])","iframe","input:not([disabled])","select:not([disabled])","textarea:not([disabled])"].map((e=>`${e}:not([tabindex='-1'])`)).join(",");var Ge,Ye,qe=(e=>(e[e.First=1]="First",e[e.Previous=2]="Previous",e[e.Next=4]="Next",e[e.Last=8]="Last",e[e.WrapAround=16]="WrapAround",e[e.NoScroll=32]="NoScroll",e))(qe||{}),Qe=((Ye=Qe||{})[Ye.Error=0]="Error",Ye[Ye.Overflow=1]="Overflow",Ye[Ye.Success=2]="Success",Ye[Ye.Underflow=3]="Underflow",Ye),Ke=((Ge=Ke||{})[Ge.Previous=-1]="Previous",Ge[Ge.Next=1]="Next",Ge);function Xe(e=document.body){return null==e?[]:Array.from(e.querySelectorAll(Ve)).sort(((e,n)=>Math.sign((e.tabIndex||Number.MAX_SAFE_INTEGER)-(n.tabIndex||Number.MAX_SAFE_INTEGER))))}var Ze=(e=>(e[e.Strict=0]="Strict",e[e.Loose=1]="Loose",e))(Ze||{});function Je(e,n=0){var t;return e!==(null==(t=We(e))?void 0:t.body)&&be(n,{0:()=>e.matches(Ve),1(){let n=e;for(;null!==n;){if(n.matches(Ve))return!0;n=n.parentElement}return!1}})}var en=(e=>(e[e.Keyboard=0]="Keyboard",e[e.Mouse=1]="Mouse",e))(en||{});function nn(e){null==e||e.focus({preventScroll:!0})}"undefined"!=typeof window&&"undefined"!=typeof document&&(document.addEventListener("keydown",(e=>{e.metaKey||e.altKey||e.ctrlKey||(document.documentElement.dataset.headlessuiFocusVisible="")}),!0),document.addEventListener("click",(e=>{1===e.detail?delete document.documentElement.dataset.headlessuiFocusVisible:0===e.detail&&(document.documentElement.dataset.headlessuiFocusVisible="")}),!0));let tn=["textarea","input"].join(",");function rn(e,n,{sorted:t=!0,relativeTo:r=null,skipElements:a=[]}={}){let l=Array.isArray(e)?e.length>0?e[0].ownerDocument:document:e.ownerDocument,o=Array.isArray(e)?t?function(e,n=(e=>e)){return e.slice().sort(((e,t)=>{let r=n(e),a=n(t);if(null===r||null===a)return 0;let l=r.compareDocumentPosition(a);return l&Node.DOCUMENT_POSITION_FOLLOWING?-1:l&Node.DOCUMENT_POSITION_PRECEDING?1:0}))}(e):e:Xe(e);a.length>0&&o.length>1&&(o=o.filter((e=>!a.includes(e)))),r=null!=r?r:l.activeElement;let i,u=(()=>{if(5&n)return 1;if(10&n)return-1;throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last")})(),s=(()=>{if(1&n)return 0;if(2&n)return Math.max(0,o.indexOf(r))-1;if(4&n)return Math.max(0,o.indexOf(r))+1;if(8&n)return o.length-1;throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last")})(),c=32&n?{preventScroll:!0}:{},d=0,A=o.length;do{if(d>=A||d+A<=0)return 0;let e=s+d;if(16&n)e=(e+A)%A;else{if(e<0)return 3;if(e>=A)return 1}i=o[e],null==i||i.focus(c),d+=u}while(i!==l.activeElement);return 6&n&&function(e){var n,t;return null!=(t=null==(n=null==e?void 0:e.matches)?void 0:n.call(e,tn))&&t}(i)&&i.select(),2}let an=(0,a.createContext)(null);an.displayName="OpenClosedContext";var ln=(e=>(e[e.Open=1]="Open",e[e.Closed=2]="Closed",e[e.Closing=4]="Closing",e[e.Opening=8]="Opening",e))(ln||{});function on(){return(0,a.useContext)(an)}function un({value:e,children:n}){return a.createElement(an.Provider,{value:e},n)}function sn(e){var n;if(e.type)return e.type;let t=null!=(n=e.as)?n:"button";return"string"==typeof t&&"button"===t.toLowerCase()?"button":void 0}function cn(e,n){let[t,r]=(0,a.useState)((()=>sn(e)));return Ie((()=>{r(sn(e))}),[e.type,e.as]),Ie((()=>{t||n.current&&n.current instanceof HTMLButtonElement&&!n.current.hasAttribute("type")&&r("button")}),[t,n]),t}function dn(e,n,t){let r=_e(n);(0,a.useEffect)((()=>{function n(e){r.current(e)}return document.addEventListener(e,n,t),()=>document.removeEventListener(e,n,t)}),[e,t])}function An(e,n,t){let r=_e(n);(0,a.useEffect)((()=>{function n(e){r.current(e)}return window.addEventListener(e,n,t),()=>window.removeEventListener(e,n,t)}),[e,t])}function fn(e,n,t=!0){let r=(0,a.useRef)(!1);function l(t,a){if(!r.current||t.defaultPrevented)return;let l=a(t);if(null===l||!l.getRootNode().contains(l))return;let o=function e(n){return"function"==typeof n?e(n()):Array.isArray(n)||n instanceof Set?n:[n]}(e);for(let e of o){if(null===e)continue;let n=e instanceof HTMLElement?e:e.current;if(null!=n&&n.contains(l)||t.composed&&t.composedPath().includes(n))return}return!Je(l,Ze.Loose)&&-1!==l.tabIndex&&t.preventDefault(),n(t,l)}(0,a.useEffect)((()=>{requestAnimationFrame((()=>{r.current=t}))}),[t]);let o=(0,a.useRef)(null);dn("mousedown",(e=>{var n,t;r.current&&(o.current=(null==(t=null==(n=e.composedPath)?void 0:n.call(e))?void 0:t[0])||e.target)}),!0),dn("click",(e=>{o.current&&(l(e,(()=>o.current)),o.current=null)}),!0),An("blur",(e=>l(e,(()=>window.document.activeElement instanceof HTMLIFrameElement?window.document.activeElement:null))),!0)}function pn(...e){return(0,a.useMemo)((()=>We(...e)),[...e])}function mn(e,n,t,r){let l=_e(t);(0,a.useEffect)((()=>{function t(e){l.current(e)}return(e=null!=e?e:window).addEventListener(n,t,r),()=>e.removeEventListener(n,t,r)}),[e,n,r])}var hn=(e=>(e[e.None=1]="None",e[e.Focusable=2]="Focusable",e[e.Hidden=4]="Hidden",e))(hn||{});let gn=Ce((function(e,n){let{features:t=1,...r}=e;return ke({ourProps:{ref:n,"aria-hidden":2==(2&t)||void 0,style:{position:"fixed",top:1,left:1,width:1,height:0,padding:0,margin:-1,overflow:"hidden",clip:"rect(0, 0, 0, 0)",whiteSpace:"nowrap",borderWidth:"0",...4==(4&t)&&2!=(2&t)&&{display:"none"}}},theirProps:r,slot:{},defaultTag:"div",name:"Hidden"})}));var vn=(e=>(e[e.Forwards=0]="Forwards",e[e.Backwards=1]="Backwards",e))(vn||{});function bn(){let e=(0,a.useRef)(0);return An("keydown",(n=>{"Tab"===n.key&&(e.current=n.shiftKey?1:0)}),!0),e}function yn({defaultContainers:e=[],portals:n}={}){let t=(0,a.useRef)(null),r=pn(t),l=Me((()=>{var a;let l=[];for(let n of e)null!==n&&(n instanceof HTMLElement?l.push(n):"current"in n&&n.current instanceof HTMLElement&&l.push(n.current));if(null!=n&&n.current)for(let e of n.current)l.push(e);for(let e of null!=(a=null==r?void 0:r.querySelectorAll("html > *, body > *"))?a:[])e!==document.body&&e!==document.head&&e instanceof HTMLElement&&"headlessui-portal-root"!==e.id&&(e.contains(t.current)||l.some((n=>e.contains(n)))||l.push(e));return l}));return{resolveContainers:l,contains:Me((e=>l().some((n=>n.contains(e))))),mainTreeNodeRef:t,MainTreeNode:(0,a.useMemo)((()=>function(){return a.createElement(gn,{features:hn.Hidden,ref:t})}),[t])}}var wn=t(935);let En=(0,a.createContext)(!1);function xn(){return(0,a.useContext)(En)}function kn(e){return a.createElement(En.Provider,{value:e.force},e.children)}function Bn(e){"function"==typeof queueMicrotask?queueMicrotask(e):Promise.resolve().then(e).catch((e=>setTimeout((()=>{throw e}))))}function Sn(e){let n=Me(e),t=(0,a.useRef)(!1);(0,a.useEffect)((()=>(t.current=!1,()=>{t.current=!0,Bn((()=>{t.current&&n()}))})),[n])}let Cn=a.Fragment,Pn=a.Fragment,Nn=(0,a.createContext)(null),Tn=(0,a.createContext)(null);function Dn(){let e=(0,a.useContext)(Tn),n=(0,a.useRef)([]),t=Me((t=>(n.current.push(t),e&&e.register(t),()=>r(t)))),r=Me((t=>{let r=n.current.indexOf(t);-1!==r&&n.current.splice(r,1),e&&e.unregister(t)})),l=(0,a.useMemo)((()=>({register:t,unregister:r,portals:n})),[t,r,n]);return[n,(0,a.useMemo)((()=>function({children:e}){return a.createElement(Tn.Provider,{value:l},e)}),[l])]}let Ln=Ce((function(e,n){let t=e,r=(0,a.useRef)(null),l=Fe(ze((e=>{r.current=e})),n),o=pn(r),i=function(e){let n=xn(),t=(0,a.useContext)(Nn),r=pn(e),[l,o]=(0,a.useState)((()=>{if(!n&&null!==t||Le.isServer)return null;let e=null==r?void 0:r.getElementById("headlessui-portal-root");if(e)return e;if(null===r)return null;let a=r.createElement("div");return a.setAttribute("id","headlessui-portal-root"),r.body.appendChild(a)}));return(0,a.useEffect)((()=>{null!==l&&(null!=r&&r.body.contains(l)||null==r||r.body.appendChild(l))}),[l,r]),(0,a.useEffect)((()=>{n||null!==t&&o(t.current)}),[t,o,n]),l}(r),[u]=(0,a.useState)((()=>{var e;return Le.isServer?null:null!=(e=null==o?void 0:o.createElement("div"))?e:null})),s=(0,a.useContext)(Tn),c=Oe();return Ie((()=>{!i||!u||i.contains(u)||(u.setAttribute("data-headlessui-portal",""),i.appendChild(u))}),[i,u]),Ie((()=>{if(u&&s)return s.register(u)}),[s,u]),Sn((()=>{var e;!i||!u||(u instanceof Node&&i.contains(u)&&i.removeChild(u),i.childNodes.length<=0&&(null==(e=i.parentElement)||e.removeChild(i)))})),c&&i&&u?(0,wn.createPortal)(ke({ourProps:{ref:l},theirProps:t,defaultTag:Cn,name:"Portal"}),u):null})),In=Ce((function(e,n){let{target:t,...r}=e,l={ref:Fe(n)};return a.createElement(Nn.Provider,{value:t},ke({ourProps:l,theirProps:r,defaultTag:Pn,name:"Popover.Group"}))})),_n=Object.assign(Ln,{Group:In});var Mn=(e=>(e[e.Open=0]="Open",e[e.Closed=1]="Closed",e))(Mn||{}),Rn=(e=>(e[e.TogglePopover=0]="TogglePopover",e[e.ClosePopover=1]="ClosePopover",e[e.SetButton=2]="SetButton",e[e.SetButtonId=3]="SetButtonId",e[e.SetPanel=4]="SetPanel",e[e.SetPanelId=5]="SetPanelId",e))(Rn||{});let zn={0:e=>{let n={...e,popoverState:be(e.popoverState,{0:1,1:0})};return 0===n.popoverState&&(n.__demoMode=!1),n},1:e=>1===e.popoverState?e:{...e,popoverState:1},2:(e,n)=>e.button===n.button?e:{...e,button:n.button},3:(e,n)=>e.buttonId===n.buttonId?e:{...e,buttonId:n.buttonId},4:(e,n)=>e.panel===n.panel?e:{...e,panel:n.panel},5:(e,n)=>e.panelId===n.panelId?e:{...e,panelId:n.panelId}},Fn=(0,a.createContext)(null);function On(e){let n=(0,a.useContext)(Fn);if(null===n){let n=new Error(`<${e} /> is missing a parent <Popover /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(n,On),n}return n}Fn.displayName="PopoverContext";let Un=(0,a.createContext)(null);function jn(e){let n=(0,a.useContext)(Un);if(null===n){let n=new Error(`<${e} /> is missing a parent <Popover /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(n,jn),n}return n}Un.displayName="PopoverAPIContext";let $n=(0,a.createContext)(null);function Hn(){return(0,a.useContext)($n)}$n.displayName="PopoverGroupContext";let Wn=(0,a.createContext)(null);function Vn(e,n){return be(n.type,zn,e,n)}Wn.displayName="PopoverPanelContext";let Gn=Ee.RenderStrategy|Ee.Static,Yn=Ee.RenderStrategy|Ee.Static,qn=Ce((function(e,n){var t;let{__demoMode:r=!1,...l}=e,o=(0,a.useRef)(null),i=Fe(n,ze((e=>{o.current=e}))),u=(0,a.useRef)([]),s=(0,a.useReducer)(Vn,{__demoMode:r,popoverState:r?0:1,buttons:u,button:null,buttonId:null,panel:null,panelId:null,beforePanelSentinel:(0,a.createRef)(),afterPanelSentinel:(0,a.createRef)()}),[{popoverState:c,button:d,buttonId:A,panel:f,panelId:p,beforePanelSentinel:m,afterPanelSentinel:h},g]=s,v=pn(null!=(t=o.current)?t:d),b=(0,a.useMemo)((()=>{if(!d||!f)return!1;for(let e of document.querySelectorAll("body > *"))if(Number(null==e?void 0:e.contains(d))^Number(null==e?void 0:e.contains(f)))return!0;let e=Xe(),n=e.indexOf(d),t=(n+e.length-1)%e.length,r=(n+1)%e.length,a=e[t],l=e[r];return!f.contains(a)&&!f.contains(l)}),[d,f]),y=_e(A),w=_e(p),E=(0,a.useMemo)((()=>({buttonId:y,panelId:w,close:()=>g({type:1})})),[y,w,g]),x=Hn(),k=null==x?void 0:x.registerPopover,B=Me((()=>{var e;return null!=(e=null==x?void 0:x.isFocusWithinPopoverGroup())?e:(null==v?void 0:v.activeElement)&&((null==d?void 0:d.contains(v.activeElement))||(null==f?void 0:f.contains(v.activeElement)))}));(0,a.useEffect)((()=>null==k?void 0:k(E)),[k,E]);let[S,C]=Dn(),P=yn({portals:S,defaultContainers:[d,f]});mn(null==v?void 0:v.defaultView,"focus",(e=>{var n,t,r,a;e.target!==window&&e.target instanceof HTMLElement&&0===c&&(B()||d&&f&&(P.contains(e.target)||null!=(t=null==(n=m.current)?void 0:n.contains)&&t.call(n,e.target)||null!=(a=null==(r=h.current)?void 0:r.contains)&&a.call(r,e.target)||g({type:1})))}),!0),fn(P.resolveContainers,((e,n)=>{g({type:1}),Je(n,Ze.Loose)||(e.preventDefault(),null==d||d.focus())}),0===c);let N=Me((e=>{g({type:1});let n=e?e instanceof HTMLElement?e:"current"in e&&e.current instanceof HTMLElement?e.current:d:d;null==n||n.focus()})),T=(0,a.useMemo)((()=>({close:N,isPortalled:b})),[N,b]),D=(0,a.useMemo)((()=>({open:0===c,close:N})),[c,N]),L={ref:i};return a.createElement(Wn.Provider,{value:null},a.createElement(Fn.Provider,{value:s},a.createElement(Un.Provider,{value:T},a.createElement(un,{value:be(c,{0:ln.Open,1:ln.Closed})},a.createElement(C,null,ke({ourProps:L,theirProps:l,slot:D,defaultTag:"div",name:"Popover"}),a.createElement(P.MainTreeNode,null))))))})),Qn=Ce((function(e,n){let t=je(),{id:r=`headlessui-popover-button-${t}`,...l}=e,[o,i]=On("Popover.Button"),{isPortalled:u}=jn("Popover.Button"),s=(0,a.useRef)(null),c=`headlessui-focus-sentinel-${je()}`,d=Hn(),A=null==d?void 0:d.closeOthers,f=null!==(0,a.useContext)(Wn);(0,a.useEffect)((()=>{if(!f)return i({type:3,buttonId:r}),()=>{i({type:3,buttonId:null})}}),[f,r,i]);let[p]=(0,a.useState)((()=>Symbol())),m=Fe(s,n,f?null:e=>{if(e)o.buttons.current.push(p);else{let e=o.buttons.current.indexOf(p);-1!==e&&o.buttons.current.splice(e,1)}o.buttons.current.length>1&&console.warn("You are already using a <Popover.Button /> but only 1 <Popover.Button /> is supported."),e&&i({type:2,button:e})}),h=Fe(s,n),g=pn(s),v=Me((e=>{var n,t,r;if(f){if(1===o.popoverState)return;switch(e.key){case $e.Space:case $e.Enter:e.preventDefault(),null==(t=(n=e.target).click)||t.call(n),i({type:1}),null==(r=o.button)||r.focus()}}else switch(e.key){case $e.Space:case $e.Enter:e.preventDefault(),e.stopPropagation(),1===o.popoverState&&(null==A||A(o.buttonId)),i({type:0});break;case $e.Escape:if(0!==o.popoverState)return null==A?void 0:A(o.buttonId);if(!s.current||null!=g&&g.activeElement&&!s.current.contains(g.activeElement))return;e.preventDefault(),e.stopPropagation(),i({type:1})}})),b=Me((e=>{f||e.key===$e.Space&&e.preventDefault()})),y=Me((n=>{var t,r;He(n.currentTarget)||e.disabled||(f?(i({type:1}),null==(t=o.button)||t.focus()):(n.preventDefault(),n.stopPropagation(),1===o.popoverState&&(null==A||A(o.buttonId)),i({type:0}),null==(r=o.button)||r.focus()))})),w=Me((e=>{e.preventDefault(),e.stopPropagation()})),E=0===o.popoverState,x=(0,a.useMemo)((()=>({open:E})),[E]),k=cn(e,s),B=f?{ref:h,type:k,onKeyDown:v,onClick:y}:{ref:m,id:o.buttonId,type:k,"aria-expanded":e.disabled?void 0:0===o.popoverState,"aria-controls":o.panel?o.panelId:void 0,onKeyDown:v,onKeyUp:b,onClick:y,onMouseDown:w},S=bn(),C=Me((()=>{let e=o.panel;e&&be(S.current,{[vn.Forwards]:()=>rn(e,qe.First),[vn.Backwards]:()=>rn(e,qe.Last)})===Qe.Error&&rn(Xe().filter((e=>"true"!==e.dataset.headlessuiFocusGuard)),be(S.current,{[vn.Forwards]:qe.Next,[vn.Backwards]:qe.Previous}),{relativeTo:o.button})}));return a.createElement(a.Fragment,null,ke({ourProps:B,theirProps:l,slot:x,defaultTag:"button",name:"Popover.Button"}),E&&!f&&u&&a.createElement(gn,{id:c,features:hn.Focusable,"data-headlessui-focus-guard":!0,as:"button",type:"button",onFocus:C}))})),Kn=Ce((function(e,n){let t=je(),{id:r=`headlessui-popover-overlay-${t}`,...l}=e,[{popoverState:o},i]=On("Popover.Overlay"),u=Fe(n),s=on(),c=null!==s?(s&ln.Open)===ln.Open:0===o,d=Me((e=>{if(He(e.currentTarget))return e.preventDefault();i({type:1})}));return ke({ourProps:{ref:u,id:r,"aria-hidden":!0,onClick:d},theirProps:l,slot:(0,a.useMemo)((()=>({open:0===o})),[o]),defaultTag:"div",features:Gn,visible:c,name:"Popover.Overlay"})})),Xn=Ce((function(e,n){let t=je(),{id:r=`headlessui-popover-panel-${t}`,focus:l=!1,...o}=e,[i,u]=On("Popover.Panel"),{close:s,isPortalled:c}=jn("Popover.Panel"),d=`headlessui-focus-sentinel-before-${je()}`,A=`headlessui-focus-sentinel-after-${je()}`,f=(0,a.useRef)(null),p=Fe(f,n,(e=>{u({type:4,panel:e})})),m=pn(f);Ie((()=>(u({type:5,panelId:r}),()=>{u({type:5,panelId:null})})),[r,u]);let h=on(),g=null!==h?(h&ln.Open)===ln.Open:0===i.popoverState,v=Me((e=>{var n;if(e.key===$e.Escape){if(0!==i.popoverState||!f.current||null!=m&&m.activeElement&&!f.current.contains(m.activeElement))return;e.preventDefault(),e.stopPropagation(),u({type:1}),null==(n=i.button)||n.focus()}}));(0,a.useEffect)((()=>{var n;e.static||1===i.popoverState&&(null==(n=e.unmount)||n)&&u({type:4,panel:null})}),[i.popoverState,e.unmount,e.static,u]),(0,a.useEffect)((()=>{if(i.__demoMode||!l||0!==i.popoverState||!f.current)return;let e=null==m?void 0:m.activeElement;f.current.contains(e)||rn(f.current,qe.First)}),[i.__demoMode,l,f,i.popoverState]);let b=(0,a.useMemo)((()=>({open:0===i.popoverState,close:s})),[i,s]),y={ref:p,id:r,onKeyDown:v,onBlur:l&&0===i.popoverState?e=>{var n,t,r,a,l;let o=e.relatedTarget;o&&f.current&&(null!=(n=f.current)&&n.contains(o)||(u({type:1}),(null!=(r=null==(t=i.beforePanelSentinel.current)?void 0:t.contains)&&r.call(t,o)||null!=(l=null==(a=i.afterPanelSentinel.current)?void 0:a.contains)&&l.call(a,o))&&o.focus({preventScroll:!0})))}:void 0,tabIndex:-1},w=bn(),E=Me((()=>{let e=f.current;e&&be(w.current,{[vn.Forwards]:()=>{var n;rn(e,qe.First)===Qe.Error&&(null==(n=i.afterPanelSentinel.current)||n.focus())},[vn.Backwards]:()=>{var e;null==(e=i.button)||e.focus({preventScroll:!0})}})})),x=Me((()=>{let e=f.current;e&&be(w.current,{[vn.Forwards]:()=>{var e;if(!i.button)return;let n=Xe(),t=n.indexOf(i.button),r=n.slice(0,t+1),a=[...n.slice(t+1),...r];for(let n of a.slice())if("true"===n.dataset.headlessuiFocusGuard||null!=(e=i.panel)&&e.contains(n)){let e=a.indexOf(n);-1!==e&&a.splice(e,1)}rn(a,qe.First,{sorted:!1})},[vn.Backwards]:()=>{var n;rn(e,qe.Previous)===Qe.Error&&(null==(n=i.button)||n.focus())}})}));return a.createElement(Wn.Provider,{value:r},g&&c&&a.createElement(gn,{id:d,ref:i.beforePanelSentinel,features:hn.Focusable,"data-headlessui-focus-guard":!0,as:"button",type:"button",onFocus:E}),ke({ourProps:y,theirProps:o,slot:b,defaultTag:"div",features:Yn,visible:g,name:"Popover.Panel"}),g&&c&&a.createElement(gn,{id:A,ref:i.afterPanelSentinel,features:hn.Focusable,"data-headlessui-focus-guard":!0,as:"button",type:"button",onFocus:x}))})),Zn=Ce((function(e,n){let t=(0,a.useRef)(null),r=Fe(t,n),[l,o]=(0,a.useState)([]),i=Me((e=>{o((n=>{let t=n.indexOf(e);if(-1!==t){let e=n.slice();return e.splice(t,1),e}return n}))})),u=Me((e=>(o((n=>[...n,e])),()=>i(e)))),s=Me((()=>{var e;let n=We(t);if(!n)return!1;let r=n.activeElement;return!(null==(e=t.current)||!e.contains(r))||l.some((e=>{var t,a;return(null==(t=n.getElementById(e.buttonId.current))?void 0:t.contains(r))||(null==(a=n.getElementById(e.panelId.current))?void 0:a.contains(r))}))})),c=Me((e=>{for(let n of l)n.buttonId.current!==e&&n.close()})),d=(0,a.useMemo)((()=>({registerPopover:u,unregisterPopover:i,isFocusWithinPopoverGroup:s,closeOthers:c})),[u,i,s,c]),A=(0,a.useMemo)((()=>({})),[]),f=e,p={ref:r};return a.createElement($n.Provider,{value:d},ke({ourProps:p,theirProps:f,slot:A,defaultTag:"div",name:"Popover.Group"}))})),Jn=Object.assign(qn,{Button:Qn,Overlay:Kn,Panel:Xn,Group:Zn});function et(){let e=(0,a.useRef)(!1);return Ie((()=>(e.current=!0,()=>{e.current=!1})),[]),e}function nt(){let e=[],n={addEventListener:(e,t,r,a)=>(e.addEventListener(t,r,a),n.add((()=>e.removeEventListener(t,r,a)))),requestAnimationFrame(...e){let t=requestAnimationFrame(...e);return n.add((()=>cancelAnimationFrame(t)))},nextFrame:(...e)=>n.requestAnimationFrame((()=>n.requestAnimationFrame(...e))),setTimeout(...e){let t=setTimeout(...e);return n.add((()=>clearTimeout(t)))},microTask(...e){let t={current:!0};return Bn((()=>{t.current&&e[0]()})),n.add((()=>{t.current=!1}))},style(e,n,t){let r=e.style.getPropertyValue(n);return Object.assign(e.style,{[n]:t}),this.add((()=>{Object.assign(e.style,{[n]:r})}))},group(e){let n=nt();return e(n),this.add((()=>n.dispose()))},add:n=>(e.push(n),()=>{let t=e.indexOf(n);if(t>=0)for(let n of e.splice(t,1))n()}),dispose(){for(let n of e.splice(0))n()}};return n}function tt(e,...n){e&&n.length>0&&e.classList.add(...n)}function rt(e,...n){e&&n.length>0&&e.classList.remove(...n)}function at(){let[e]=(0,a.useState)(nt);return(0,a.useEffect)((()=>()=>e.dispose()),[e]),e}function lt(e=""){return e.split(" ").filter((e=>e.trim().length>1))}let ot=(0,a.createContext)(null);ot.displayName="TransitionContext";var it=(e=>(e.Visible="visible",e.Hidden="hidden",e))(it||{});let ut=(0,a.createContext)(null);function st(e){return"children"in e?st(e.children):e.current.filter((({el:e})=>null!==e.current)).filter((({state:e})=>"visible"===e)).length>0}function ct(e,n){let t=_e(e),r=(0,a.useRef)([]),l=et(),o=at(),i=Me(((e,n=xe.Hidden)=>{let a=r.current.findIndex((({el:n})=>n===e));-1!==a&&(be(n,{[xe.Unmount](){r.current.splice(a,1)},[xe.Hidden](){r.current[a].state="hidden"}}),o.microTask((()=>{var e;!st(r)&&l.current&&(null==(e=t.current)||e.call(t))})))})),u=Me((e=>{let n=r.current.find((({el:n})=>n===e));return n?"visible"!==n.state&&(n.state="visible"):r.current.push({el:e,state:"visible"}),()=>i(e,xe.Unmount)})),s=(0,a.useRef)([]),c=(0,a.useRef)(Promise.resolve()),d=(0,a.useRef)({enter:[],leave:[],idle:[]}),A=Me(((e,t,r)=>{s.current.splice(0),n&&(n.chains.current[t]=n.chains.current[t].filter((([n])=>n!==e))),null==n||n.chains.current[t].push([e,new Promise((e=>{s.current.push(e)}))]),null==n||n.chains.current[t].push([e,new Promise((e=>{Promise.all(d.current[t].map((([e,n])=>n))).then((()=>e()))}))]),"enter"===t?c.current=c.current.then((()=>null==n?void 0:n.wait.current)).then((()=>r(t))):r(t)})),f=Me(((e,n,t)=>{Promise.all(d.current[n].splice(0).map((([e,n])=>n))).then((()=>{var e;null==(e=s.current.shift())||e()})).then((()=>t(n)))}));return(0,a.useMemo)((()=>({children:r,register:u,unregister:i,onStart:A,onStop:f,wait:c,chains:d})),[u,i,r,A,f,d,c])}function dt(){}ut.displayName="NestingContext";let At=["beforeEnter","afterEnter","beforeLeave","afterLeave"];function ft(e){var n;let t={};for(let r of At)t[r]=null!=(n=e[r])?n:dt;return t}let pt=Ee.RenderStrategy,mt=Ce((function(e,n){let{show:t,appear:r=!1,unmount:l,...o}=e,i=(0,a.useRef)(null),u=Fe(i,n);Oe();let s=on();if(void 0===t&&null!==s&&(t=(s&ln.Open)===ln.Open),![!0,!1].includes(t))throw new Error("A <Transition /> is used but it is missing a `show={true | false}` prop.");let[c,d]=(0,a.useState)(t?"visible":"hidden"),A=ct((()=>{d("hidden")})),[f,p]=(0,a.useState)(!0),m=(0,a.useRef)([t]);Ie((()=>{!1!==f&&m.current[m.current.length-1]!==t&&(m.current.push(t),p(!1))}),[m,t]);let h=(0,a.useMemo)((()=>({show:t,appear:r,initial:f})),[t,r,f]);(0,a.useEffect)((()=>{if(t)d("visible");else if(st(A)){let e=i.current;if(!e)return;let n=e.getBoundingClientRect();0===n.x&&0===n.y&&0===n.width&&0===n.height&&d("hidden")}else d("hidden")}),[t,A]);let g={unmount:l},v=Me((()=>{var n;f&&p(!1),null==(n=e.beforeEnter)||n.call(e)})),b=Me((()=>{var n;f&&p(!1),null==(n=e.beforeLeave)||n.call(e)}));return a.createElement(ut.Provider,{value:A},a.createElement(ot.Provider,{value:h},ke({ourProps:{...g,as:a.Fragment,children:a.createElement(ht,{ref:u,...g,...o,beforeEnter:v,beforeLeave:b})},theirProps:{},defaultTag:a.Fragment,features:pt,visible:"visible"===c,name:"Transition"})))})),ht=Ce((function(e,n){let{beforeEnter:t,afterEnter:r,beforeLeave:l,afterLeave:o,enter:i,enterFrom:u,enterTo:s,entered:c,leave:d,leaveFrom:A,leaveTo:f,...p}=e,m=(0,a.useRef)(null),h=Fe(m,n),g=p.unmount?xe.Unmount:xe.Hidden,{show:v,appear:b,initial:y}=function(){let e=(0,a.useContext)(ot);if(null===e)throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.");return e}(),[w,E]=(0,a.useState)(v?"visible":"hidden"),x=function(){let e=(0,a.useContext)(ut);if(null===e)throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.");return e}(),{register:k,unregister:B}=x,S=(0,a.useRef)(null);(0,a.useEffect)((()=>k(m)),[k,m]),(0,a.useEffect)((()=>{if(g===xe.Hidden&&m.current)return v&&"visible"!==w?void E("visible"):be(w,{hidden:()=>B(m),visible:()=>k(m)})}),[w,m,k,B,v,g]);let C=_e({enter:lt(i),enterFrom:lt(u),enterTo:lt(s),entered:lt(c),leave:lt(d),leaveFrom:lt(A),leaveTo:lt(f)}),P=function(e){let n=(0,a.useRef)(ft(e));return(0,a.useEffect)((()=>{n.current=ft(e)}),[e]),n}({beforeEnter:t,afterEnter:r,beforeLeave:l,afterLeave:o}),N=Oe();(0,a.useEffect)((()=>{if(N&&"visible"===w&&null===m.current)throw new Error("Did you forget to passthrough the `ref` to the actual DOM node?")}),[m,w,N]);let T=y&&!b,D=!N||T||S.current===v?"idle":v?"enter":"leave",L=function(e=0){let[n,t]=(0,a.useState)(e),r=et(),l=(0,a.useCallback)((e=>{r.current&&t((n=>n|e))}),[n,r]),o=(0,a.useCallback)((e=>Boolean(n&e)),[n]),i=(0,a.useCallback)((e=>{r.current&&t((n=>n&~e))}),[t,r]),u=(0,a.useCallback)((e=>{r.current&&t((n=>n^e))}),[t]);return{flags:n,addFlag:l,hasFlag:o,removeFlag:i,toggleFlag:u}}(0),I=Me((e=>be(e,{enter:()=>{L.addFlag(ln.Opening),P.current.beforeEnter()},leave:()=>{L.addFlag(ln.Closing),P.current.beforeLeave()},idle:()=>{}}))),_=Me((e=>be(e,{enter:()=>{L.removeFlag(ln.Opening),P.current.afterEnter()},leave:()=>{L.removeFlag(ln.Closing),P.current.afterLeave()},idle:()=>{}}))),M=ct((()=>{E("hidden"),B(m)}),x);(function({container:e,direction:n,classes:t,onStart:r,onStop:a}){let l=et(),o=at(),i=_e(n);Ie((()=>{let n=nt();o.add(n.dispose);let u=e.current;if(u&&"idle"!==i.current&&l.current)return n.dispose(),r.current(i.current),n.add(function(e,n,t,r){let a=t?"enter":"leave",l=nt(),o=void 0!==r?function(e){let n={called:!1};return(...t)=>{if(!n.called)return n.called=!0,e(...t)}}(r):()=>{};"enter"===a&&(e.removeAttribute("hidden"),e.style.display="");let i=be(a,{enter:()=>n.enter,leave:()=>n.leave}),u=be(a,{enter:()=>n.enterTo,leave:()=>n.leaveTo}),s=be(a,{enter:()=>n.enterFrom,leave:()=>n.leaveFrom});return rt(e,...n.enter,...n.enterTo,...n.enterFrom,...n.leave,...n.leaveFrom,...n.leaveTo,...n.entered),tt(e,...i,...s),l.nextFrame((()=>{rt(e,...s),tt(e,...u),function(e,n){let t=nt();if(!e)return t.dispose;let{transitionDuration:r,transitionDelay:a}=getComputedStyle(e),[l,o]=[r,a].map((e=>{let[n=0]=e.split(",").filter(Boolean).map((e=>e.includes("ms")?parseFloat(e):1e3*parseFloat(e))).sort(((e,n)=>n-e));return n})),i=l+o;if(0!==i){t.group((t=>{t.setTimeout((()=>{n(),t.dispose()}),i),t.addEventListener(e,"transitionrun",(e=>{e.target===e.currentTarget&&t.dispose()}))}));let r=t.addEventListener(e,"transitionend",(e=>{e.target===e.currentTarget&&(n(),r())}))}else n();t.add((()=>n())),t.dispose}(e,(()=>(rt(e,...i),tt(e,...n.entered),o())))})),l.dispose}(u,t.current,"enter"===i.current,(()=>{n.dispose(),a.current(i.current)}))),n.dispose}),[n])})({container:m,classes:C,direction:D,onStart:_e((e=>{M.onStart(m,e,I)})),onStop:_e((e=>{M.onStop(m,e,_),"leave"===e&&!st(M)&&(E("hidden"),B(m))}))}),(0,a.useEffect)((()=>{T&&(g===xe.Hidden?S.current=null:S.current=v)}),[v,T,w]);let R=p,z={ref:h};return b&&v&&y&&(R={...R,className:ye(p.className,...C.current.enter,...C.current.enterFrom)}),a.createElement(ut.Provider,{value:M},a.createElement(un,{value:be(w,{visible:ln.Open,hidden:ln.Closed})|L.flags},ke({ourProps:z,theirProps:R,defaultTag:"div",features:pt,visible:"visible"===w,name:"Transition.Child"})))})),gt=Ce((function(e,n){let t=null!==(0,a.useContext)(ot),r=null!==on();return a.createElement(a.Fragment,null,!t&&r?a.createElement(mt,{ref:n,...e}):a.createElement(ht,{ref:n,...e}))})),vt=Object.assign(mt,{Child:gt,Root:mt});function bt(e,n){let t=(0,a.useRef)([]),r=Me(e);(0,a.useEffect)((()=>{let e=[...t.current];for(let[a,l]of n.entries())if(t.current[a]!==l){let a=r(n,e);return t.current=n,a}}),[r,...n])}function yt(e){if(!e)return new Set;if("function"==typeof e)return new Set(e());let n=new Set;for(let t of e.current)t.current instanceof HTMLElement&&n.add(t.current);return n}var wt=(e=>(e[e.None=1]="None",e[e.InitialFocus=2]="InitialFocus",e[e.TabLock=4]="TabLock",e[e.FocusLock=8]="FocusLock",e[e.RestoreFocus=16]="RestoreFocus",e[e.All=30]="All",e))(wt||{});let Et=Ce((function(e,n){let t=(0,a.useRef)(null),r=Fe(t,n),{initialFocus:l,containers:o,features:i=30,...u}=e;Oe()||(i=1);let s=pn(t);!function({ownerDocument:e},n){let t=function(e=!0){let n=(0,a.useRef)(kt.slice());return bt((([e],[t])=>{!0===t&&!1===e&&Bn((()=>{n.current.splice(0)})),!1===t&&!0===e&&(n.current=kt.slice())}),[e,kt,n]),Me((()=>{var e;return null!=(e=n.current.find((e=>null!=e&&e.isConnected)))?e:null}))}(n);bt((()=>{n||(null==e?void 0:e.activeElement)===(null==e?void 0:e.body)&&nn(t())}),[n]),Sn((()=>{n&&nn(t())}))}({ownerDocument:s},Boolean(16&i));let c=function({ownerDocument:e,container:n,initialFocus:t},r){let l=(0,a.useRef)(null),o=et();return bt((()=>{if(!r)return;let a=n.current;a&&Bn((()=>{if(!o.current)return;let n=null==e?void 0:e.activeElement;if(null!=t&&t.current){if((null==t?void 0:t.current)===n)return void(l.current=n)}else if(a.contains(n))return void(l.current=n);null!=t&&t.current?nn(t.current):rn(a,qe.First)===Qe.Error&&console.warn("There are no focusable elements inside the <FocusTrap />"),l.current=null==e?void 0:e.activeElement}))}),[r]),l}({ownerDocument:s,container:t,initialFocus:l},Boolean(2&i));!function({ownerDocument:e,container:n,containers:t,previousActiveElement:r},a){let l=et();mn(null==e?void 0:e.defaultView,"focus",(e=>{if(!a||!l.current)return;let o=yt(t);n.current instanceof HTMLElement&&o.add(n.current);let i=r.current;if(!i)return;let u=e.target;u&&u instanceof HTMLElement?Bt(o,u)?(r.current=u,nn(u)):(e.preventDefault(),e.stopPropagation(),nn(i)):nn(r.current)}),!0)}({ownerDocument:s,container:t,containers:o,previousActiveElement:c},Boolean(8&i));let d=bn(),A=Me((e=>{let n=t.current;n&&be(d.current,{[vn.Forwards]:()=>{rn(n,qe.First,{skipElements:[e.relatedTarget]})},[vn.Backwards]:()=>{rn(n,qe.Last,{skipElements:[e.relatedTarget]})}})})),f=at(),p=(0,a.useRef)(!1),m={ref:r,onKeyDown(e){"Tab"==e.key&&(p.current=!0,f.requestAnimationFrame((()=>{p.current=!1})))},onBlur(e){let n=yt(o);t.current instanceof HTMLElement&&n.add(t.current);let r=e.relatedTarget;r instanceof HTMLElement&&"true"!==r.dataset.headlessuiFocusGuard&&(Bt(n,r)||(p.current?rn(t.current,be(d.current,{[vn.Forwards]:()=>qe.Next,[vn.Backwards]:()=>qe.Previous})|qe.WrapAround,{relativeTo:e.target}):e.target instanceof HTMLElement&&nn(e.target)))}};return a.createElement(a.Fragment,null,Boolean(4&i)&&a.createElement(gn,{as:"button",type:"button","data-headlessui-focus-guard":!0,onFocus:A,features:hn.Focusable}),ke({ourProps:m,theirProps:u,defaultTag:"div",name:"FocusTrap"}),Boolean(4&i)&&a.createElement(gn,{as:"button",type:"button","data-headlessui-focus-guard":!0,onFocus:A,features:hn.Focusable}))})),xt=Object.assign(Et,{features:wt}),kt=[];function Bt(e,n){for(let t of e)if(t.contains(n))return!0;return!1}!function(e){function n(){"loading"!==document.readyState&&((()=>{function e(e){e.target instanceof HTMLElement&&e.target!==document.body&&kt[0]!==e.target&&(kt.unshift(e.target),kt=kt.filter((e=>null!=e&&e.isConnected)),kt.splice(10))}window.addEventListener("click",e,{capture:!0}),window.addEventListener("mousedown",e,{capture:!0}),window.addEventListener("focus",e,{capture:!0}),document.body.addEventListener("click",e,{capture:!0}),document.body.addEventListener("mousedown",e,{capture:!0}),document.body.addEventListener("focus",e,{capture:!0})})(),document.removeEventListener("DOMContentLoaded",n))}"undefined"!=typeof window&&"undefined"!=typeof document&&(document.addEventListener("DOMContentLoaded",n),n())}();let St=(0,a.createContext)(null);function Ct(){let e=(0,a.useContext)(St);if(null===e){let e=new Error("You used a <Description /> component, but it is not inside a relevant parent.");throw Error.captureStackTrace&&Error.captureStackTrace(e,Ct),e}return e}let Pt=Ce((function(e,n){let t=je(),{id:r=`headlessui-description-${t}`,...a}=e,l=Ct(),o=Fe(n);return Ie((()=>l.register(r)),[r,l.register]),ke({ourProps:{ref:o,...l.props,id:r},theirProps:a,slot:l.slot||{},defaultTag:"p",name:l.name||"Description"})})),Nt=Object.assign(Pt,{}),Tt=(0,a.createContext)((()=>{}));Tt.displayName="StackContext";var Dt=(e=>(e[e.Add=0]="Add",e[e.Remove=1]="Remove",e))(Dt||{});function Lt({children:e,onUpdate:n,type:t,element:r,enabled:l}){let o=(0,a.useContext)(Tt),i=Me(((...e)=>{null==n||n(...e),o(...e)}));return Ie((()=>{let e=void 0===l||!0===l;return e&&i(0,t,r),()=>{e&&i(1,t,r)}}),[i,t,r,l]),a.createElement(Tt.Provider,{value:i},e)}"function"==typeof Object.is&&Object.is;const{useState:It,useEffect:_t,useLayoutEffect:Mt,useDebugValue:Rt}=l;"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement;const zt=(e=>e.useSyncExternalStore)(l);function Ft(){let e;return{before({doc:n}){var t;let r=n.documentElement;e=(null!=(t=n.defaultView)?t:window).innerWidth-r.clientWidth},after({doc:n,d:t}){let r=n.documentElement,a=r.clientWidth-r.offsetWidth,l=e-a;t.style(r,"paddingRight",`${l}px`)}}}function Ot(){if(!(/iPhone/gi.test(window.navigator.platform)||/Mac/gi.test(window.navigator.platform)&&window.navigator.maxTouchPoints>0))return{};let e;return{before(){e=window.pageYOffset},after({doc:n,d:t,meta:r}){function a(e){return r.containers.flatMap((e=>e())).some((n=>n.contains(e)))}t.style(n.body,"marginTop",`-${e}px`),window.scrollTo(0,0);let l=null;t.addEventListener(n,"click",(e=>{if(e.target instanceof HTMLElement)try{let t=e.target.closest("a");if(!t)return;let{hash:r}=new URL(t.href),o=n.querySelector(r);o&&!a(o)&&(l=o)}catch{}}),!0),t.addEventListener(n,"touchmove",(e=>{e.target instanceof HTMLElement&&!a(e.target)&&e.preventDefault()}),{passive:!1}),t.add((()=>{window.scrollTo(0,window.pageYOffset+e),l&&l.isConnected&&(l.scrollIntoView({block:"nearest"}),l=null)}))}}}function Ut(e){let n={};for(let t of e)Object.assign(n,t(n));return n}let jt=function(e,n){let t=new Map,r=new Set;return{getSnapshot:()=>t,subscribe:e=>(r.add(e),()=>r.delete(e)),dispatch(e,...a){let l=n[e].call(t,...a);l&&(t=l,r.forEach((e=>e())))}}}(0,{PUSH(e,n){var t;let r=null!=(t=this.get(e))?t:{doc:e,count:0,d:nt(),meta:new Set};return r.count++,r.meta.add(n),this.set(e,r),this},POP(e,n){let t=this.get(e);return t&&(t.count--,t.meta.delete(n)),this},SCROLL_PREVENT({doc:e,d:n,meta:t}){let r={doc:e,d:n,meta:Ut(t)},a=[Ot(),Ft(),{before({doc:e,d:n}){n.style(e.documentElement,"overflow","hidden")}}];a.forEach((({before:e})=>null==e?void 0:e(r))),a.forEach((({after:e})=>null==e?void 0:e(r)))},SCROLL_ALLOW({d:e}){e.dispose()},TEARDOWN({doc:e}){this.delete(e)}});jt.subscribe((()=>{let e=jt.getSnapshot(),n=new Map;for(let[t]of e)n.set(t,t.documentElement.style.overflow);for(let t of e.values()){let e="hidden"===n.get(t.doc),r=0!==t.count;(r&&!e||!r&&e)&&jt.dispatch(t.count>0?"SCROLL_PREVENT":"SCROLL_ALLOW",t),0===t.count&&jt.dispatch("TEARDOWN",t)}}));let $t=new Map,Ht=new Map;function Wt(e,n=!0){Ie((()=>{var t;if(!n)return;let r="function"==typeof e?e():e.current;if(!r)return;let a=null!=(t=Ht.get(r))?t:0;return Ht.set(r,a+1),0!==a||($t.set(r,{"aria-hidden":r.getAttribute("aria-hidden"),inert:r.inert}),r.setAttribute("aria-hidden","true"),r.inert=!0),function(){var e;if(!r)return;let n=null!=(e=Ht.get(r))?e:1;if(1===n?Ht.delete(r):Ht.set(r,n-1),1!==n)return;let t=$t.get(r);t&&(null===t["aria-hidden"]?r.removeAttribute("aria-hidden"):r.setAttribute("aria-hidden",t["aria-hidden"]),r.inert=t.inert,$t.delete(r))}}),[e,n])}var Vt=(e=>(e[e.Open=0]="Open",e[e.Closed=1]="Closed",e))(Vt||{}),Gt=(e=>(e[e.SetTitleId=0]="SetTitleId",e))(Gt||{});let Yt={0:(e,n)=>e.titleId===n.id?e:{...e,titleId:n.id}},qt=(0,a.createContext)(null);function Qt(e){let n=(0,a.useContext)(qt);if(null===n){let n=new Error(`<${e} /> is missing a parent <Dialog /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(n,Qt),n}return n}function Kt(e,n){return be(n.type,Yt,e,n)}qt.displayName="DialogContext";let Xt=Ee.RenderStrategy|Ee.Static,Zt=Ce((function(e,n){var t;let r=je(),{id:l=`headlessui-dialog-${r}`,open:o,onClose:i,initialFocus:u,__demoMode:s=!1,...c}=e,[d,A]=(0,a.useState)(0),f=on();void 0===o&&null!==f&&(o=(f&ln.Open)===ln.Open);let p=(0,a.useRef)(null),m=Fe(p,n),h=pn(p),g=e.hasOwnProperty("open")||null!==f,v=e.hasOwnProperty("onClose");if(!g&&!v)throw new Error("You have to provide an `open` and an `onClose` prop to the `Dialog` component.");if(!g)throw new Error("You provided an `onClose` prop to the `Dialog`, but forgot an `open` prop.");if(!v)throw new Error("You provided an `open` prop to the `Dialog`, but forgot an `onClose` prop.");if("boolean"!=typeof o)throw new Error(`You provided an \`open\` prop to the \`Dialog\`, but the value is not a boolean. Received: ${o}`);if("function"!=typeof i)throw new Error(`You provided an \`onClose\` prop to the \`Dialog\`, but the value is not a function. Received: ${i}`);let b=o?0:1,[y,w]=(0,a.useReducer)(Kt,{titleId:null,descriptionId:null,panelRef:(0,a.createRef)()}),E=Me((()=>i(!1))),x=Me((e=>w({type:0,id:e}))),k=!!Oe()&&!s&&0===b,B=d>1,S=null!==(0,a.useContext)(qt),[C,P]=Dn(),{resolveContainers:N,mainTreeNodeRef:T,MainTreeNode:D}=yn({portals:C,defaultContainers:[null!=(t=y.panelRef.current)?t:p.current]}),L=B?"parent":"leaf",I=null!==f&&(f&ln.Closing)===ln.Closing,_=!S&&!I&&k,M=(0,a.useCallback)((()=>{var e,n;return null!=(n=Array.from(null!=(e=null==h?void 0:h.querySelectorAll("body > *"))?e:[]).find((e=>"headlessui-portal-root"!==e.id&&e.contains(T.current)&&e instanceof HTMLElement)))?n:null}),[T]);Wt(M,_);let R=!!B||k,z=(0,a.useCallback)((()=>{var e,n;return null!=(n=Array.from(null!=(e=null==h?void 0:h.querySelectorAll("[data-headlessui-portal]"))?e:[]).find((e=>e.contains(T.current)&&e instanceof HTMLElement)))?n:null}),[T]);Wt(z,R),fn(N,E,!(!k||B));let F=!(B||0!==b);mn(null==h?void 0:h.defaultView,"keydown",(e=>{F&&(e.defaultPrevented||e.key===$e.Escape&&(e.preventDefault(),e.stopPropagation(),E()))})),function(e,n,t=(()=>[document.body])){!function(e,n,t){let r=function(e){return zt(e.subscribe,e.getSnapshot,e.getSnapshot)}(jt),a=e?r.get(e):void 0,l=!!a&&a.count>0;Ie((()=>{if(e&&n)return jt.dispatch("PUSH",e,t),()=>jt.dispatch("POP",e,t)}),[n,e])}(e,n,(e=>{var n;return{containers:[...null!=(n=e.containers)?n:[],t]}}))}(h,!(I||0!==b||S),N),(0,a.useEffect)((()=>{if(0!==b||!p.current)return;let e=new ResizeObserver((e=>{for(let n of e){let e=n.target.getBoundingClientRect();0===e.x&&0===e.y&&0===e.width&&0===e.height&&E()}}));return e.observe(p.current),()=>e.disconnect()}),[b,p,E]);let[O,U]=function(){let[e,n]=(0,a.useState)([]);return[e.length>0?e.join(" "):void 0,(0,a.useMemo)((()=>function(e){let t=Me((e=>(n((n=>[...n,e])),()=>n((n=>{let t=n.slice(),r=t.indexOf(e);return-1!==r&&t.splice(r,1),t}))))),r=(0,a.useMemo)((()=>({register:t,slot:e.slot,name:e.name,props:e.props})),[t,e.slot,e.name,e.props]);return a.createElement(St.Provider,{value:r},e.children)}),[n])]}(),j=(0,a.useMemo)((()=>[{dialogState:b,close:E,setTitleId:x},y]),[b,y,E,x]),$=(0,a.useMemo)((()=>({open:0===b})),[b]),H={ref:m,id:l,role:"dialog","aria-modal":0===b||void 0,"aria-labelledby":y.titleId,"aria-describedby":O};return a.createElement(Lt,{type:"Dialog",enabled:0===b,element:p,onUpdate:Me(((e,n)=>{"Dialog"===n&&be(e,{[Dt.Add]:()=>A((e=>e+1)),[Dt.Remove]:()=>A((e=>e-1))})}))},a.createElement(kn,{force:!0},a.createElement(_n,null,a.createElement(qt.Provider,{value:j},a.createElement(_n.Group,{target:p},a.createElement(kn,{force:!1},a.createElement(U,{slot:$,name:"Dialog.Description"},a.createElement(xt,{initialFocus:u,containers:N,features:k?be(L,{parent:xt.features.RestoreFocus,leaf:xt.features.All&~xt.features.FocusLock}):xt.features.None},a.createElement(P,null,ke({ourProps:H,theirProps:c,slot:$,defaultTag:"div",features:Xt,visible:0===b,name:"Dialog"}))))))))),a.createElement(D,null))})),Jt=Ce((function(e,n){let t=je(),{id:r=`headlessui-dialog-backdrop-${t}`,...l}=e,[{dialogState:o},i]=Qt("Dialog.Backdrop"),u=Fe(n);(0,a.useEffect)((()=>{if(null===i.panelRef.current)throw new Error("A <Dialog.Backdrop /> component is being used, but a <Dialog.Panel /> component is missing.")}),[i.panelRef]);let s=(0,a.useMemo)((()=>({open:0===o})),[o]);return a.createElement(kn,{force:!0},a.createElement(_n,null,ke({ourProps:{ref:u,id:r,"aria-hidden":!0},theirProps:l,slot:s,defaultTag:"div",name:"Dialog.Backdrop"})))})),er=Ce((function(e,n){let t=je(),{id:r=`headlessui-dialog-panel-${t}`,...l}=e,[{dialogState:o},i]=Qt("Dialog.Panel"),u=Fe(n,i.panelRef),s=(0,a.useMemo)((()=>({open:0===o})),[o]),c=Me((e=>{e.stopPropagation()}));return ke({ourProps:{ref:u,id:r,onClick:c},theirProps:l,slot:s,defaultTag:"div",name:"Dialog.Panel"})})),nr=Ce((function(e,n){let t=je(),{id:r=`headlessui-dialog-overlay-${t}`,...l}=e,[{dialogState:o,close:i}]=Qt("Dialog.Overlay"),u=Fe(n),s=Me((e=>{if(e.target===e.currentTarget){if(He(e.currentTarget))return e.preventDefault();e.preventDefault(),e.stopPropagation(),i()}}));return ke({ourProps:{ref:u,id:r,"aria-hidden":!0,onClick:s},theirProps:l,slot:(0,a.useMemo)((()=>({open:0===o})),[o]),defaultTag:"div",name:"Dialog.Overlay"})})),tr=Ce((function(e,n){let t=je(),{id:r=`headlessui-dialog-title-${t}`,...l}=e,[{dialogState:o,setTitleId:i}]=Qt("Dialog.Title"),u=Fe(n);(0,a.useEffect)((()=>(i(r),()=>i(null))),[r,i]);let s=(0,a.useMemo)((()=>({open:0===o})),[o]);return ke({ourProps:{ref:u,id:r},theirProps:l,slot:s,defaultTag:"h2",name:"Dialog.Title"})})),rr=Object.assign(Zt,{Backdrop:Jt,Panel:er,Overlay:nr,Title:tr,Description:Nt});var ar;let lr=null!=(ar=a.startTransition)?ar:function(e){e()};var or=(e=>(e[e.Open=0]="Open",e[e.Closed=1]="Closed",e))(or||{}),ir=(e=>(e[e.ToggleDisclosure=0]="ToggleDisclosure",e[e.CloseDisclosure=1]="CloseDisclosure",e[e.SetButtonId=2]="SetButtonId",e[e.SetPanelId=3]="SetPanelId",e[e.LinkPanel=4]="LinkPanel",e[e.UnlinkPanel=5]="UnlinkPanel",e))(ir||{});let ur={0:e=>({...e,disclosureState:be(e.disclosureState,{0:1,1:0})}),1:e=>1===e.disclosureState?e:{...e,disclosureState:1},4:e=>!0===e.linkedPanel?e:{...e,linkedPanel:!0},5:e=>!1===e.linkedPanel?e:{...e,linkedPanel:!1},2:(e,n)=>e.buttonId===n.buttonId?e:{...e,buttonId:n.buttonId},3:(e,n)=>e.panelId===n.panelId?e:{...e,panelId:n.panelId}},sr=(0,a.createContext)(null);function cr(e){let n=(0,a.useContext)(sr);if(null===n){let n=new Error(`<${e} /> is missing a parent <Disclosure /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(n,cr),n}return n}sr.displayName="DisclosureContext";let dr=(0,a.createContext)(null);function Ar(e){let n=(0,a.useContext)(dr);if(null===n){let n=new Error(`<${e} /> is missing a parent <Disclosure /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(n,Ar),n}return n}dr.displayName="DisclosureAPIContext";let fr=(0,a.createContext)(null);function pr(e,n){return be(n.type,ur,e,n)}fr.displayName="DisclosurePanelContext";let mr=a.Fragment,hr=Ee.RenderStrategy|Ee.Static,gr=Ce((function(e,n){let{defaultOpen:t=!1,...r}=e,l=(0,a.useRef)(null),o=Fe(n,ze((e=>{l.current=e}),void 0===e.as||e.as===a.Fragment)),i=(0,a.useRef)(null),u=(0,a.useRef)(null),s=(0,a.useReducer)(pr,{disclosureState:t?0:1,linkedPanel:!1,buttonRef:u,panelRef:i,buttonId:null,panelId:null}),[{disclosureState:c,buttonId:d},A]=s,f=Me((e=>{A({type:1});let n=We(l);if(!n||!d)return;let t=e?e instanceof HTMLElement?e:e.current instanceof HTMLElement?e.current:n.getElementById(d):n.getElementById(d);null==t||t.focus()})),p=(0,a.useMemo)((()=>({close:f})),[f]),m=(0,a.useMemo)((()=>({open:0===c,close:f})),[c,f]),h={ref:o};return a.createElement(sr.Provider,{value:s},a.createElement(dr.Provider,{value:p},a.createElement(un,{value:be(c,{0:ln.Open,1:ln.Closed})},ke({ourProps:h,theirProps:r,slot:m,defaultTag:mr,name:"Disclosure"}))))})),vr=Ce((function(e,n){let t=je(),{id:r=`headlessui-disclosure-button-${t}`,...l}=e,[o,i]=cr("Disclosure.Button"),u=(0,a.useContext)(fr),s=null!==u&&u===o.panelId,c=(0,a.useRef)(null),d=Fe(c,n,s?null:o.buttonRef);(0,a.useEffect)((()=>{if(!s)return i({type:2,buttonId:r}),()=>{i({type:2,buttonId:null})}}),[r,i,s]);let A=Me((e=>{var n;if(s){if(1===o.disclosureState)return;switch(e.key){case $e.Space:case $e.Enter:e.preventDefault(),e.stopPropagation(),i({type:0}),null==(n=o.buttonRef.current)||n.focus()}}else switch(e.key){case $e.Space:case $e.Enter:e.preventDefault(),e.stopPropagation(),i({type:0})}})),f=Me((e=>{e.key===$e.Space&&e.preventDefault()})),p=Me((n=>{var t;He(n.currentTarget)||e.disabled||(s?(i({type:0}),null==(t=o.buttonRef.current)||t.focus()):i({type:0}))})),m=(0,a.useMemo)((()=>({open:0===o.disclosureState})),[o]),h=cn(e,c);return ke({ourProps:s?{ref:d,type:h,onKeyDown:A,onClick:p}:{ref:d,id:r,type:h,"aria-expanded":e.disabled?void 0:0===o.disclosureState,"aria-controls":o.linkedPanel?o.panelId:void 0,onKeyDown:A,onKeyUp:f,onClick:p},theirProps:l,slot:m,defaultTag:"button",name:"Disclosure.Button"})})),br=Ce((function(e,n){let t=je(),{id:r=`headlessui-disclosure-panel-${t}`,...l}=e,[o,i]=cr("Disclosure.Panel"),{close:u}=Ar("Disclosure.Panel"),s=Fe(n,o.panelRef,(e=>{lr((()=>i({type:e?4:5})))}));(0,a.useEffect)((()=>(i({type:3,panelId:r}),()=>{i({type:3,panelId:null})})),[r,i]);let c=on(),d=null!==c?(c&ln.Open)===ln.Open:0===o.disclosureState,A=(0,a.useMemo)((()=>({open:0===o.disclosureState,close:u})),[o,u]),f={ref:s,id:r};return a.createElement(fr.Provider,{value:o.panelId},ke({ourProps:f,theirProps:l,slot:A,defaultTag:"div",features:hr,visible:d,name:"Disclosure.Panel"}))})),yr=Object.assign(gr,{Button:vr,Panel:br});const wr=a.forwardRef((function({title:e,titleId:n,...t},r){return a.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:r,"aria-labelledby":n},t),e?a.createElement("title",{id:n},e):null,a.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"}))})),Er=a.forwardRef((function({title:e,titleId:n,...t},r){return a.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:r,"aria-labelledby":n},t),e?a.createElement("title",{id:n},e):null,a.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M2.25 3h1.386c.51 0 .955.343 1.087.835l.383 1.437M7.5 14.25a3 3 0 00-3 3h15.75m-12.75-3h11.218c1.121-2.3 2.1-4.684 2.924-7.138a60.114 60.114 0 00-16.536-1.84M7.5 14.25L5.106 5.272M6 20.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm12.75 0a.75.75 0 11-1.5 0 .75.75 0 011.5 0z"}))})),xr=a.forwardRef((function({title:e,titleId:n,...t},r){return a.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true",ref:r,"aria-labelledby":n},t),e?a.createElement("title",{id:n},e):null,a.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M6 18L18 6M6 6l12 12"}))})),kr=a.forwardRef((function({title:e,titleId:n,...t},r){return a.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:r,"aria-labelledby":n},t),e?a.createElement("title",{id:n},e):null,a.createElement("path",{fillRule:"evenodd",d:"M2 10a8 8 0 1116 0 8 8 0 01-16 0zm6.39-2.908a.75.75 0 01.766.027l3.5 2.25a.75.75 0 010 1.262l-3.5 2.25A.75.75 0 018 12.25v-4.5a.75.75 0 01.39-.658z",clipRule:"evenodd"}))})),Br=a.forwardRef((function({title:e,titleId:n,...t},r){return a.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:r,"aria-labelledby":n},t),e?a.createElement("title",{id:n},e):null,a.createElement("path",{fillRule:"evenodd",d:"M2 3.5A1.5 1.5 0 013.5 2h1.148a1.5 1.5 0 011.465 1.175l.716 3.223a1.5 1.5 0 01-1.052 1.767l-.933.267c-.41.117-.643.555-.48.95a11.542 11.542 0 006.254 6.254c.395.163.833-.07.95-.48l.267-.933a1.5 1.5 0 011.767-1.052l3.223.716A1.5 1.5 0 0118 15.352V16.5a1.5 1.5 0 01-1.5 1.5H15c-1.149 0-2.263-.15-3.326-.43A13.022 13.022 0 012.43 8.326 13.019 13.019 0 012 5V3.5z",clipRule:"evenodd"}))})),Sr=a.forwardRef((function({title:e,titleId:n,...t},r){return a.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",ref:r,"aria-labelledby":n},t),e?a.createElement("title",{id:n},e):null,a.createElement("path",{fillRule:"evenodd",d:"M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z",clipRule:"evenodd"}))}));var Cr=t(503),Pr=[{name:"Shirts",description:"The basis of every great outfit",href:"#",icon:t(858)},{name:"Pants",description:"Can't leave home without them",href:"#",icon:t(483)},{name:"Shoes",description:"Your feet will thank you",href:"#",icon:t(275)},{name:"Hats",description:"For the sun and the cold",href:"#",icon:t(120)},{name:"Accessories",description:"The finishing touches",href:"#",icon:t(460)}],Nr=[{name:"See it in action",href:"#",icon:kr},{name:"Contact support",href:"#",icon:Br}];function Tr(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return e.filter(Boolean).join(" ")}const Dr=function(){var e=(0,a.useState)(!1),n=e[0],t=e[1];return a.createElement("header",{className:"bg-white"},a.createElement("nav",{className:"mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8","aria-label":"Global"},a.createElement("div",{className:"flex lg:flex-1"},a.createElement("a",{href:"/",className:"-m-1.5 p-1.5","data-testid":"logo-button"},a.createElement("span",{className:"sr-only"},"Your Company"),a.createElement("img",{className:"h-8 w-auto",src:Cr,alt:""}))),a.createElement("div",{className:"flex lg:hidden"},a.createElement("button",{type:"button",className:"-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700",onClick:function(){return t(!0)}},a.createElement("span",{className:"sr-only"},"Open main menu"),a.createElement(wr,{className:"h-6 w-6","aria-hidden":"true"}))),a.createElement(Jn.Group,{className:"hidden lg:flex lg:gap-x-12"},a.createElement(Jn,{className:"relative"},a.createElement(Jn.Button,{className:"flex items-center gap-x-1 text-md font-semibold leading-6 text-gray-900"},"Product",a.createElement(Sr,{className:"h-5 w-5 flex-none text-gray-400","aria-hidden":"true"})),a.createElement(vt,{as:a.Fragment,enter:"transition ease-out duration-200",enterFrom:"opacity-0 translate-y-1",enterTo:"opacity-100 translate-y-0",leave:"transition ease-in duration-150",leaveFrom:"opacity-100 translate-y-0",leaveTo:"opacity-0 translate-y-1"},a.createElement(Jn.Panel,{className:"absolute -left-8 top-full z-10 mt-3 w-screen max-w-md overflow-hidden rounded-3xl bg-white shadow-lg ring-1 ring-gray-900/5"},a.createElement("div",{className:"p-4"},Pr.map((function(e){return a.createElement("div",{key:e.name,className:"group relative flex items-center gap-x-6 rounded-lg p-4 text-sm leading-6 hover:bg-gray-50"},a.createElement("div",{className:"flex h-11 w-11 flex-none items-center justify-center rounded-lg bg-gray-50 group-hover:bg-white"},a.createElement("img",{className:"h-8 w-auto",src:e.icon,alt:""})),a.createElement("div",{className:"flex-auto"},a.createElement("a",{href:e.href,className:"block font-semibold text-gray-900"},e.name,a.createElement("span",{className:"absolute inset-0"})),a.createElement("p",{className:"mt-1 text-gray-600"},e.description)))}))),a.createElement("div",{className:"grid grid-cols-2 divide-x divide-gray-900/5 bg-gray-50"},Nr.map((function(e){return a.createElement("a",{key:e.name,href:e.href,className:"flex items-center justify-center gap-x-2.5 p-3 text-sm font-semibold leading-6 text-gray-900 hover:bg-gray-100"},a.createElement(e.icon,{className:"h-5 w-5 flex-none text-gray-400","aria-hidden":"true"}),e.name)})))))),a.createElement("a",{href:"/store",className:"text-md font-semibold leading-6 text-gray-900"},"Marketplace"),a.createElement("a",{href:"#",className:"text-md font-semibold leading-6 text-gray-900"},"Company")),a.createElement("div",{className:"hidden lg:flex lg:flex-1 lg:justify-end"},a.createElement("a",{href:"/cart",className:"text-sm font-semibold leading-6 text-gray-900","data-testid":"cart-button"},a.createElement(Er,{className:"h-7 w-auto flex-none"})))),a.createElement(rr,{as:"div",className:"lg:hidden",open:n,onClose:t},a.createElement("div",{className:"fixed inset-0 z-10"}),a.createElement(rr.Panel,{className:"fixed inset-y-0 right-0 z-10 w-full overflow-y-auto bg-white px-6 py-6 sm:max-w-sm sm:ring-1 sm:ring-gray-900/10"},a.createElement("div",{className:"flex items-center justify-between"},a.createElement("a",{href:"#",className:"-m-1.5 p-1.5"},a.createElement("span",{className:"sr-only"},"Your Company"),a.createElement("img",{className:"h-8 w-auto",src:Cr,alt:""})),a.createElement("button",{type:"button",className:"-m-2.5 rounded-md p-2.5 text-gray-700",onClick:function(){return t(!1)}},a.createElement("span",{className:"sr-only"},"Close menu"),a.createElement(xr,{className:"h-6 w-6","aria-hidden":"true"}))),a.createElement("div",{className:"mt-6 flow-root"},a.createElement("div",{className:"-my-6 divide-y divide-gray-500/10"},a.createElement("div",{className:"space-y-2 py-6"},a.createElement(yr,{as:"div",className:"-mx-3"},(function(e){var n=e.open;return a.createElement(a.Fragment,null,a.createElement(yr.Button,{className:"flex w-full items-center justify-between rounded-lg py-2 pl-3 pr-3.5 text-base font-semibold leading-7 text-gray-900 hover:bg-gray-50"},"Product",a.createElement(Sr,{className:Tr(n?"rotate-180":"","h-5 w-5 flex-none"),"aria-hidden":"true"})),a.createElement(yr.Panel,{className:"mt-2 space-y-2"},function(e,n,t){if(t||2===arguments.length)for(var r,a=0,l=n.length;a<l;a++)!r&&a in n||(r||(r=Array.prototype.slice.call(n,0,a)),r[a]=n[a]);return e.concat(r||Array.prototype.slice.call(n))}([],Pr,!0).map((function(e){return a.createElement(yr.Button,{key:e.name,as:"a",href:e.href,className:"block rounded-lg py-2 pl-6 pr-3 text-sm font-semibold leading-7 text-gray-900 hover:bg-gray-50"},e.name)}))))})),a.createElement("a",{href:"/store",className:"-mx-3 block rounded-lg px-3 py-2 text-base font-semibold leading-7 text-gray-900 hover:bg-gray-50"},"Marketplace"),a.createElement("a",{href:"#",className:"-mx-3 block rounded-lg px-3 py-2 text-base font-semibold leading-7 text-gray-900 hover:bg-gray-50"},"Company")),a.createElement("div",{className:"py-6"},a.createElement("a",{href:"#",className:"-mx-3 block rounded-lg px-3 py-2.5 text-base font-semibold leading-7 text-gray-900 hover:bg-gray-50"},a.createElement(Er,{className:"h-7 w-auto flex-none","aria-hidden":"true"}))))))))},Lr=function(){return a.createElement("div",{className:"relative overflow-hidden bg-white"},a.createElement("div",{className:"pb-80 pt-16 sm:pb-40 sm:pt-24 lg:pb-48 lg:pt-40"},a.createElement("div",{className:"relative mx-auto max-w-7xl px-4 sm:static sm:px-6 lg:px-8"},a.createElement("div",{className:"sm:max-w-lg"},a.createElement("h1",{className:"text-4xl font-bold tracking-tight text-gray-900 sm:text-6xl"},"Summer styles are finally here"),a.createElement("p",{className:"mt-4 text-xl text-gray-500"},"This year, our new summer collection will shelter you from the harsh elements of a world that doesn't care if you live or die.")),a.createElement("div",null,a.createElement("div",{className:"mt-10"},a.createElement("div",{"aria-hidden":"true",className:"pointer-events-none lg:absolute lg:inset-y-0 lg:mx-auto lg:w-full lg:max-w-7xl"},a.createElement("div",{className:"absolute transform sm:left-1/2 sm:top-0 sm:translate-x-8 lg:left-1/2 lg:top-1/2 lg:-translate-y-1/2 lg:translate-x-8"},a.createElement("div",{className:"flex items-center space-x-6 lg:space-x-8"},a.createElement("div",{className:"grid flex-shrink-0 grid-cols-1 gap-y-6 lg:gap-y-8"},a.createElement("div",{className:"h-64 w-44 overflow-hidden rounded-lg sm:opacity-0 lg:opacity-100"},a.createElement("img",{src:"https://tailwindui.com/img/ecommerce-images/home-page-03-hero-image-tile-01.jpg",alt:"",className:"h-full w-full object-cover object-center"})),a.createElement("div",{className:"h-64 w-44 overflow-hidden rounded-lg"},a.createElement("img",{src:"https://tailwindui.com/img/ecommerce-images/home-page-03-hero-image-tile-02.jpg",alt:"",className:"h-full w-full object-cover object-center"}))),a.createElement("div",{className:"grid flex-shrink-0 grid-cols-1 gap-y-6 lg:gap-y-8"},a.createElement("div",{className:"h-64 w-44 overflow-hidden rounded-lg"},a.createElement("img",{src:"https://tailwindui.com/img/ecommerce-images/home-page-03-hero-image-tile-03.jpg",alt:"",className:"h-full w-full object-cover object-center"})),a.createElement("div",{className:"h-64 w-44 overflow-hidden rounded-lg"},a.createElement("img",{src:"https://tailwindui.com/img/ecommerce-images/home-page-03-hero-image-tile-04.jpg",alt:"",className:"h-full w-full object-cover object-center"})),a.createElement("div",{className:"h-64 w-44 overflow-hidden rounded-lg"},a.createElement("img",{src:"https://tailwindui.com/img/ecommerce-images/home-page-03-hero-image-tile-05.jpg",alt:"",className:"h-full w-full object-cover object-center"}))),a.createElement("div",{className:"grid flex-shrink-0 grid-cols-1 gap-y-6 lg:gap-y-8"},a.createElement("div",{className:"h-64 w-44 overflow-hidden rounded-lg"},a.createElement("img",{src:"https://tailwindui.com/img/ecommerce-images/home-page-03-hero-image-tile-06.jpg",alt:"",className:"h-full w-full object-cover object-center"})),a.createElement("div",{className:"h-64 w-44 overflow-hidden rounded-lg"},a.createElement("img",{src:"https://tailwindui.com/img/ecommerce-images/home-page-03-hero-image-tile-07.jpg",alt:"",className:"h-full w-full object-cover object-center"})))))),a.createElement("a",{href:"/store",className:"inline-block rounded-md border border-transparent bg-indigo-600 px-8 py-3 text-center font-medium text-white hover:bg-indigo-700"},"Shop Collection"))))))};var Ir=t(926);const _r=function(){return a.createElement("footer",{className:"bg-white mx-auto flex items-center justify-between p-6 min-w-full lg:px-8 "},a.createElement("p",{className:"text-slate-600 text-xl my-4"},"Made by Cole Burch"),a.createElement("a",{href:"https://github.com/ColeBurch"},a.createElement("img",{src:Ir,alt:"GitHub",className:"w-5 h-5 mx-2"})))},Mr=function(){return a.createElement("main",{className:"font-sans antialiased text-gray-600 min-h-full flex flex-col"},a.createElement(Dr,null),a.createElement(Lr,null),a.createElement(_r,null))};var Rr=[{id:1,name:"Basic Tee",href:"#",imageSrc:"https://tailwindui.com/img/ecommerce-images/product-page-01-related-product-01.jpg",imageAlt:"Front of men's Basic Tee in black.",price:"$35",color:"Black"}];const zr=function(){return a.createElement("div",{className:"bg-white"},a.createElement("div",{className:"mx-auto max-w-2xl px-4 py-16 sm:px-6 sm:py-24 lg:max-w-7xl lg:px-8"},a.createElement("h2",{className:"text-2xl font-bold tracking-tight text-gray-900"},"Customers also purchased"),a.createElement("div",{className:"mt-6 grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-4 xl:gap-x-8"},Rr.map((function(e){return a.createElement("div",{key:e.id,className:"group relative"},a.createElement("div",{className:"aspect-h-1 aspect-w-1 w-full overflow-hidden rounded-md bg-gray-200 lg:aspect-none group-hover:opacity-75 lg:h-80"},a.createElement("img",{src:e.imageSrc,alt:e.imageAlt,className:"h-full w-full object-cover object-center lg:h-full lg:w-full"})),a.createElement("div",{className:"mt-4 flex justify-between"},a.createElement("div",null,a.createElement("h3",{className:"text-sm text-gray-700"},a.createElement("a",{href:e.href},a.createElement("span",{"aria-hidden":"true",className:"absolute inset-0"}),e.name)),a.createElement("p",{className:"mt-1 text-sm text-gray-500"},e.color)),a.createElement("p",{className:"text-sm font-medium text-gray-900"},e.price)))})))))},Fr=function(){return a.createElement("div",{className:"font-sans antialiased text-gray-600 min-h-full flex flex-col"},a.createElement(Dr,null),a.createElement(zr,null),a.createElement(_r,null))};(0,o.s)(document.getElementById("root")).render(a.createElement(a.StrictMode,null,a.createElement((function(){return a.createElement(he,null,a.createElement(fe,null,a.createElement(de,{path:"/",element:a.createElement(Mr,null)}),a.createElement(de,{path:"/store",element:a.createElement(Fr,null)})))}),null)))},601:e=>{e.exports="data:image/svg+xml,%3csvg viewBox=%270 0 16 16%27 fill=%27white%27 xmlns=%27http://www.w3.org/2000/svg%27%3e%3ccircle cx=%278%27 cy=%278%27 r=%273%27/%3e%3c/svg%3e"},133:e=>{e.exports="data:image/svg+xml,%3csvg viewBox=%270 0 16 16%27 fill=%27white%27 xmlns=%27http://www.w3.org/2000/svg%27%3e%3cpath d=%27M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z%27/%3e%3c/svg%3e"},686:e=>{e.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27none%27 viewBox=%270 0 16 16%27%3e%3cpath stroke=%27white%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%272%27 d=%27M4 8h8%27/%3e%3c/svg%3e"},909:e=>{e.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 fill=%27none%27 viewBox=%270 0 20 20%27%3e%3cpath stroke=%27%236b7280%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%271.5%27 d=%27M6 8l4 4 4-4%27/%3e%3c/svg%3e"},503:(e,n,t)=>{e.exports=t.p+"63ddee6e256674317cbb.svg"},926:(e,n,t)=>{e.exports=t.p+"e7ab8675a2cbadea548c.svg"},120:(e,n,t)=>{e.exports=t.p+"509535c1b2ca51e5d154.svg"},483:(e,n,t)=>{e.exports=t.p+"79d0291bddf5f9af62fc.svg"},858:(e,n,t)=>{e.exports=t.p+"fc62baa07482d2e881c1.svg"},275:(e,n,t)=>{e.exports=t.p+"100d10d54a2340afd440.svg"},460:(e,n,t)=>{e.exports=t.p+"129e41efd720742f7b09.svg"}},e=>{e(e.s=66)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,